/*
 * generated by Xtext 2.10.0
 */
grammar InternalJDL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package io.github.jhipster.jdl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package io.github.jhipster.jdl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import io.github.jhipster.jdl.services.JDLGrammarAccess;

}

@parser::members {

 	private JDLGrammarAccess grammarAccess;

    public InternalJDLParser(TokenStream input, JDLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "JdlDomainModel";
   	}

   	@Override
   	protected JDLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleJdlDomainModel
entryRuleJdlDomainModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJdlDomainModelRule()); }
	iv_ruleJdlDomainModel=ruleJdlDomainModel
	{ $current=$iv_ruleJdlDomainModel.current; }
	EOF;

// Rule JdlDomainModel
ruleJdlDomainModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getJdlDomainModelAccess().getFeaturesJdlFeatureParserRuleCall_0());
			}
			lv_features_0_0=ruleJdlFeature
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getJdlDomainModelRule());
				}
				add(
					$current,
					"features",
					lv_features_0_0,
					"io.github.jhipster.jdl.JDL.JdlFeature");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleJdlFeature
entryRuleJdlFeature returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJdlFeatureRule()); }
	iv_ruleJdlFeature=ruleJdlFeature
	{ $current=$iv_ruleJdlFeature.current; }
	EOF;

// Rule JdlFeature
ruleJdlFeature returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getJdlFeatureAccess().getJdlEntityParserRuleCall_0());
		}
		this_JdlEntity_0=ruleJdlEntity
		{
			$current = $this_JdlEntity_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getJdlFeatureAccess().getJdlEnumTypeParserRuleCall_1());
		}
		this_JdlEnumType_1=ruleJdlEnumType
		{
			$current = $this_JdlEnumType_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getJdlFeatureAccess().getJdlRelationshipsParserRuleCall_2());
		}
		this_JdlRelationships_2=ruleJdlRelationships
		{
			$current = $this_JdlRelationships_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getJdlFeatureAccess().getJdlGenerationSettingParserRuleCall_3());
		}
		this_JdlGenerationSetting_3=ruleJdlGenerationSetting
		{
			$current = $this_JdlGenerationSetting_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleJdlEntity
entryRuleJdlEntity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJdlEntityRule()); }
	iv_ruleJdlEntity=ruleJdlEntity
	{ $current=$iv_ruleJdlEntity.current; }
	EOF;

// Rule JdlEntity
ruleJdlEntity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='entity'
		{
			newLeafNode(otherlv_0, grammarAccess.getJdlEntityAccess().getEntityKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getJdlEntityAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJdlEntityRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='{'
			{
				newLeafNode(otherlv_2, grammarAccess.getJdlEntityAccess().getLeftCurlyBracketKeyword_2_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getJdlEntityAccess().getFieldsJdlEntityFieldParserRuleCall_2_1_0_0());
						}
						lv_fields_3_0=ruleJdlEntityField
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getJdlEntityRule());
							}
							add(
								$current,
								"fields",
								lv_fields_3_0,
								"io.github.jhipster.jdl.JDL.JdlEntityField");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_4=','
					{
						newLeafNode(otherlv_4, grammarAccess.getJdlEntityAccess().getCommaKeyword_2_1_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getJdlEntityAccess().getFieldsJdlEntityFieldParserRuleCall_2_1_1_1_0());
							}
							lv_fields_5_0=ruleJdlEntityField
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getJdlEntityRule());
								}
								add(
									$current,
									"fields",
									lv_fields_5_0,
									"io.github.jhipster.jdl.JDL.JdlEntityField");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_6='}'
			{
				newLeafNode(otherlv_6, grammarAccess.getJdlEntityAccess().getRightCurlyBracketKeyword_2_2());
			}
		)?
	)
;

// Entry rule entryRuleJdlEntityField
entryRuleJdlEntityField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJdlEntityFieldRule()); }
	iv_ruleJdlEntityField=ruleJdlEntityField
	{ $current=$iv_ruleJdlEntityField.current; }
	EOF;

// Rule JdlEntityField
ruleJdlEntityField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getJdlEntityFieldAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJdlEntityFieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getJdlEntityFieldAccess().getTypeJdlFieldTypeParserRuleCall_1_0());
				}
				lv_type_1_0=ruleJdlFieldType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJdlEntityFieldRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"io.github.jhipster.jdl.JDL.JdlFieldType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleJdlFieldType
entryRuleJdlFieldType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJdlFieldTypeRule()); }
	iv_ruleJdlFieldType=ruleJdlFieldType
	{ $current=$iv_ruleJdlFieldType.current; }
	EOF;

// Rule JdlFieldType
ruleJdlFieldType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getJdlFieldTypeAccess().getJdlEnumFieldParserRuleCall_0());
		}
		this_JdlEnumField_0=ruleJdlEnumField
		{
			$current = $this_JdlEnumField_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getJdlFieldTypeAccess().getJdlStringFieldParserRuleCall_1());
		}
		this_JdlStringField_1=ruleJdlStringField
		{
			$current = $this_JdlStringField_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getJdlFieldTypeAccess().getJdlNumericFieldParserRuleCall_2());
		}
		this_JdlNumericField_2=ruleJdlNumericField
		{
			$current = $this_JdlNumericField_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getJdlFieldTypeAccess().getJdlBooleanFieldParserRuleCall_3());
		}
		this_JdlBooleanField_3=ruleJdlBooleanField
		{
			$current = $this_JdlBooleanField_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getJdlFieldTypeAccess().getJdlDateFieldParserRuleCall_4());
		}
		this_JdlDateField_4=ruleJdlDateField
		{
			$current = $this_JdlDateField_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getJdlFieldTypeAccess().getJdlBlobFieldParserRuleCall_5());
		}
		this_JdlBlobField_5=ruleJdlBlobField
		{
			$current = $this_JdlBlobField_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleJdlEnumField
entryRuleJdlEnumField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJdlEnumFieldRule()); }
	iv_ruleJdlEnumField=ruleJdlEnumField
	{ $current=$iv_ruleJdlEnumField.current; }
	EOF;

// Rule JdlEnumField
ruleJdlEnumField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJdlEnumFieldRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getJdlEnumFieldAccess().getEnumTypeJdlEnumTypeCrossReference_0_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getJdlEnumFieldAccess().getValidatorsJdlRequiredValidatorParserRuleCall_1_0());
				}
				lv_validators_1_0=ruleJdlRequiredValidator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJdlEnumFieldRule());
					}
					set(
						$current,
						"validators",
						lv_validators_1_0,
						"io.github.jhipster.jdl.JDL.JdlRequiredValidator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleJdlStringField
entryRuleJdlStringField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJdlStringFieldRule()); }
	iv_ruleJdlStringField=ruleJdlStringField
	{ $current=$iv_ruleJdlStringField.current; }
	EOF;

// Rule JdlStringField
ruleJdlStringField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_stringType_0_0='String'
				{
					newLeafNode(lv_stringType_0_0, grammarAccess.getJdlStringFieldAccess().getStringTypeStringKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJdlStringFieldRule());
					}
					setWithLastConsumed($current, "stringType", true, "String");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getJdlStringFieldAccess().getValidatorsJdlStringValidatorsParserRuleCall_1_0());
				}
				lv_validators_1_0=ruleJdlStringValidators
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJdlStringFieldRule());
					}
					set(
						$current,
						"validators",
						lv_validators_1_0,
						"io.github.jhipster.jdl.JDL.JdlStringValidators");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleJdlNumericField
entryRuleJdlNumericField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJdlNumericFieldRule()); }
	iv_ruleJdlNumericField=ruleJdlNumericField
	{ $current=$iv_ruleJdlNumericField.current; }
	EOF;

// Rule JdlNumericField
ruleJdlNumericField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getJdlNumericFieldAccess().getNumericFieldTypeJdlNumericFieldTypeEnumRuleCall_0_0());
				}
				lv_numericFieldType_0_0=ruleJdlNumericFieldType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJdlNumericFieldRule());
					}
					set(
						$current,
						"numericFieldType",
						lv_numericFieldType_0_0,
						"io.github.jhipster.jdl.JDL.JdlNumericFieldType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getJdlNumericFieldAccess().getValidatorsJdlNumericValidatorsParserRuleCall_1_0());
				}
				lv_validators_1_0=ruleJdlNumericValidators
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJdlNumericFieldRule());
					}
					set(
						$current,
						"validators",
						lv_validators_1_0,
						"io.github.jhipster.jdl.JDL.JdlNumericValidators");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleJdlBooleanField
entryRuleJdlBooleanField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJdlBooleanFieldRule()); }
	iv_ruleJdlBooleanField=ruleJdlBooleanField
	{ $current=$iv_ruleJdlBooleanField.current; }
	EOF;

// Rule JdlBooleanField
ruleJdlBooleanField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_booleanType_0_0='Boolean'
				{
					newLeafNode(lv_booleanType_0_0, grammarAccess.getJdlBooleanFieldAccess().getBooleanTypeBooleanKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJdlBooleanFieldRule());
					}
					setWithLastConsumed($current, "booleanType", true, "Boolean");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getJdlBooleanFieldAccess().getValidatorsJdlRequiredValidatorParserRuleCall_1_0());
				}
				lv_validators_1_0=ruleJdlRequiredValidator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJdlBooleanFieldRule());
					}
					set(
						$current,
						"validators",
						lv_validators_1_0,
						"io.github.jhipster.jdl.JDL.JdlRequiredValidator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleJdlDateField
entryRuleJdlDateField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJdlDateFieldRule()); }
	iv_ruleJdlDateField=ruleJdlDateField
	{ $current=$iv_ruleJdlDateField.current; }
	EOF;

// Rule JdlDateField
ruleJdlDateField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_localDateType_0_0='LocalDate'
					{
						newLeafNode(lv_localDateType_0_0, grammarAccess.getJdlDateFieldAccess().getLocalDateTypeLocalDateKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getJdlDateFieldRule());
						}
						setWithLastConsumed($current, "localDateType", true, "LocalDate");
					}
				)
			)
			    |
			(
				(
					lv_zonedDateTimeType_1_0='ZonedDateTime'
					{
						newLeafNode(lv_zonedDateTimeType_1_0, grammarAccess.getJdlDateFieldAccess().getZonedDateTimeTypeZonedDateTimeKeyword_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getJdlDateFieldRule());
						}
						setWithLastConsumed($current, "zonedDateTimeType", true, "ZonedDateTime");
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getJdlDateFieldAccess().getValidatorsJdlRequiredValidatorParserRuleCall_1_0());
				}
				lv_validators_2_0=ruleJdlRequiredValidator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJdlDateFieldRule());
					}
					set(
						$current,
						"validators",
						lv_validators_2_0,
						"io.github.jhipster.jdl.JDL.JdlRequiredValidator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleJdlBlobField
entryRuleJdlBlobField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJdlBlobFieldRule()); }
	iv_ruleJdlBlobField=ruleJdlBlobField
	{ $current=$iv_ruleJdlBlobField.current; }
	EOF;

// Rule JdlBlobField
ruleJdlBlobField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getJdlBlobFieldAccess().getBlobFieldTypeJdlBlobFieldTypeEnumRuleCall_0_0());
				}
				lv_blobFieldType_0_0=ruleJdlBlobFieldType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJdlBlobFieldRule());
					}
					set(
						$current,
						"blobFieldType",
						lv_blobFieldType_0_0,
						"io.github.jhipster.jdl.JDL.JdlBlobFieldType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getJdlBlobFieldAccess().getValidatorsJdlBlobValidatorsParserRuleCall_1_0());
				}
				lv_validators_1_0=ruleJdlBlobValidators
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJdlBlobFieldRule());
					}
					set(
						$current,
						"validators",
						lv_validators_1_0,
						"io.github.jhipster.jdl.JDL.JdlBlobValidators");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleJdlStringValidators
entryRuleJdlStringValidators returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJdlStringValidatorsRule()); }
	iv_ruleJdlStringValidators=ruleJdlStringValidators
	{ $current=$iv_ruleJdlStringValidators.current; }
	EOF;

// Rule JdlStringValidators
ruleJdlStringValidators returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getJdlStringValidatorsAccess().getRequiredJdlRequiredValidatorParserRuleCall_0_0());
				}
				lv_required_0_0=ruleJdlRequiredValidator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJdlStringValidatorsRule());
					}
					set(
						$current,
						"required",
						true,
						"io.github.jhipster.jdl.JDL.JdlRequiredValidator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getJdlStringValidatorsAccess().getMinLengthJdlMinLengthValidatorParserRuleCall_1_0());
				}
				lv_minLength_1_0=ruleJdlMinLengthValidator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJdlStringValidatorsRule());
					}
					set(
						$current,
						"minLength",
						lv_minLength_1_0,
						"io.github.jhipster.jdl.JDL.JdlMinLengthValidator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getJdlStringValidatorsAccess().getMaxlengthJdlMaxLengthValidatorParserRuleCall_2_0());
				}
				lv_maxlength_2_0=ruleJdlMaxLengthValidator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJdlStringValidatorsRule());
					}
					set(
						$current,
						"maxlength",
						lv_maxlength_2_0,
						"io.github.jhipster.jdl.JDL.JdlMaxLengthValidator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getJdlStringValidatorsAccess().getPatternJdlPatternValidatorParserRuleCall_3_0());
				}
				lv_pattern_3_0=ruleJdlPatternValidator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJdlStringValidatorsRule());
					}
					set(
						$current,
						"pattern",
						lv_pattern_3_0,
						"io.github.jhipster.jdl.JDL.JdlPatternValidator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleJdlNumericValidators
entryRuleJdlNumericValidators returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJdlNumericValidatorsRule()); }
	iv_ruleJdlNumericValidators=ruleJdlNumericValidators
	{ $current=$iv_ruleJdlNumericValidators.current; }
	EOF;

// Rule JdlNumericValidators
ruleJdlNumericValidators returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getJdlNumericValidatorsAccess().getRequiredJdlRequiredValidatorParserRuleCall_0_0());
				}
				lv_required_0_0=ruleJdlRequiredValidator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJdlNumericValidatorsRule());
					}
					set(
						$current,
						"required",
						lv_required_0_0,
						"io.github.jhipster.jdl.JDL.JdlRequiredValidator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getJdlNumericValidatorsAccess().getMinlengthJdlMinValidatorParserRuleCall_1_0());
				}
				lv_minlength_1_0=ruleJdlMinValidator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJdlNumericValidatorsRule());
					}
					set(
						$current,
						"minlength",
						lv_minlength_1_0,
						"io.github.jhipster.jdl.JDL.JdlMinValidator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getJdlNumericValidatorsAccess().getMaxlengthJdlMaxValidatorParserRuleCall_2_0());
				}
				lv_maxlength_2_0=ruleJdlMaxValidator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJdlNumericValidatorsRule());
					}
					set(
						$current,
						"maxlength",
						lv_maxlength_2_0,
						"io.github.jhipster.jdl.JDL.JdlMaxValidator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleJdlBlobValidators
entryRuleJdlBlobValidators returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJdlBlobValidatorsRule()); }
	iv_ruleJdlBlobValidators=ruleJdlBlobValidators
	{ $current=$iv_ruleJdlBlobValidators.current; }
	EOF;

// Rule JdlBlobValidators
ruleJdlBlobValidators returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getJdlBlobValidatorsAccess().getRequiredJdlRequiredValidatorParserRuleCall_0_0());
				}
				lv_required_0_0=ruleJdlRequiredValidator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJdlBlobValidatorsRule());
					}
					set(
						$current,
						"required",
						lv_required_0_0,
						"io.github.jhipster.jdl.JDL.JdlRequiredValidator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getJdlBlobValidatorsAccess().getMinbytesJdlMinBytesValidatorParserRuleCall_1_0());
				}
				lv_minbytes_1_0=ruleJdlMinBytesValidator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJdlBlobValidatorsRule());
					}
					set(
						$current,
						"minbytes",
						lv_minbytes_1_0,
						"io.github.jhipster.jdl.JDL.JdlMinBytesValidator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getJdlBlobValidatorsAccess().getMaxbytesJdlMaxBytesValidatorParserRuleCall_2_0());
				}
				lv_maxbytes_2_0=ruleJdlMaxBytesValidator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJdlBlobValidatorsRule());
					}
					set(
						$current,
						"maxbytes",
						lv_maxbytes_2_0,
						"io.github.jhipster.jdl.JDL.JdlMaxBytesValidator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleJdlRequiredValidator
entryRuleJdlRequiredValidator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJdlRequiredValidatorRule()); }
	iv_ruleJdlRequiredValidator=ruleJdlRequiredValidator
	{ $current=$iv_ruleJdlRequiredValidator.current; }
	EOF;

// Rule JdlRequiredValidator
ruleJdlRequiredValidator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_required_0_0='required'
			{
				newLeafNode(lv_required_0_0, grammarAccess.getJdlRequiredValidatorAccess().getRequiredRequiredKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getJdlRequiredValidatorRule());
				}
				setWithLastConsumed($current, "required", true, "required");
			}
		)
	)
;

// Entry rule entryRuleJdlMinLengthValidator
entryRuleJdlMinLengthValidator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJdlMinLengthValidatorRule()); }
	iv_ruleJdlMinLengthValidator=ruleJdlMinLengthValidator
	{ $current=$iv_ruleJdlMinLengthValidator.current; }
	EOF;

// Rule JdlMinLengthValidator
ruleJdlMinLengthValidator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='minlength'
		{
			newLeafNode(otherlv_0, grammarAccess.getJdlMinLengthValidatorAccess().getMinlengthKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getJdlMinLengthValidatorAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_value_2_0=RULE_INT
				{
					newLeafNode(lv_value_2_0, grammarAccess.getJdlMinLengthValidatorAccess().getValueINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJdlMinLengthValidatorRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getJdlMinLengthValidatorAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleJdlMaxLengthValidator
entryRuleJdlMaxLengthValidator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJdlMaxLengthValidatorRule()); }
	iv_ruleJdlMaxLengthValidator=ruleJdlMaxLengthValidator
	{ $current=$iv_ruleJdlMaxLengthValidator.current; }
	EOF;

// Rule JdlMaxLengthValidator
ruleJdlMaxLengthValidator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='maxlength'
		{
			newLeafNode(otherlv_0, grammarAccess.getJdlMaxLengthValidatorAccess().getMaxlengthKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getJdlMaxLengthValidatorAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_value_2_0=RULE_INT
				{
					newLeafNode(lv_value_2_0, grammarAccess.getJdlMaxLengthValidatorAccess().getValueINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJdlMaxLengthValidatorRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getJdlMaxLengthValidatorAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleJdlPatternValidator
entryRuleJdlPatternValidator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJdlPatternValidatorRule()); }
	iv_ruleJdlPatternValidator=ruleJdlPatternValidator
	{ $current=$iv_ruleJdlPatternValidator.current; }
	EOF;

// Rule JdlPatternValidator
ruleJdlPatternValidator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='pattern'
		{
			newLeafNode(otherlv_0, grammarAccess.getJdlPatternValidatorAccess().getPatternKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getJdlPatternValidatorAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_value_2_0=RULE_STRING
				{
					newLeafNode(lv_value_2_0, grammarAccess.getJdlPatternValidatorAccess().getValueSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJdlPatternValidatorRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getJdlPatternValidatorAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleJdlMinValidator
entryRuleJdlMinValidator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJdlMinValidatorRule()); }
	iv_ruleJdlMinValidator=ruleJdlMinValidator
	{ $current=$iv_ruleJdlMinValidator.current; }
	EOF;

// Rule JdlMinValidator
ruleJdlMinValidator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='min'
		{
			newLeafNode(otherlv_0, grammarAccess.getJdlMinValidatorAccess().getMinKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getJdlMinValidatorAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_value_2_0=RULE_INT
				{
					newLeafNode(lv_value_2_0, grammarAccess.getJdlMinValidatorAccess().getValueINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJdlMinValidatorRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getJdlMinValidatorAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleJdlMaxValidator
entryRuleJdlMaxValidator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJdlMaxValidatorRule()); }
	iv_ruleJdlMaxValidator=ruleJdlMaxValidator
	{ $current=$iv_ruleJdlMaxValidator.current; }
	EOF;

// Rule JdlMaxValidator
ruleJdlMaxValidator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='max'
		{
			newLeafNode(otherlv_0, grammarAccess.getJdlMaxValidatorAccess().getMaxKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getJdlMaxValidatorAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_value_2_0=RULE_INT
				{
					newLeafNode(lv_value_2_0, grammarAccess.getJdlMaxValidatorAccess().getValueINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJdlMaxValidatorRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getJdlMaxValidatorAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleJdlMinBytesValidator
entryRuleJdlMinBytesValidator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJdlMinBytesValidatorRule()); }
	iv_ruleJdlMinBytesValidator=ruleJdlMinBytesValidator
	{ $current=$iv_ruleJdlMinBytesValidator.current; }
	EOF;

// Rule JdlMinBytesValidator
ruleJdlMinBytesValidator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='minbytes'
		{
			newLeafNode(otherlv_0, grammarAccess.getJdlMinBytesValidatorAccess().getMinbytesKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getJdlMinBytesValidatorAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_value_2_0=RULE_INT
				{
					newLeafNode(lv_value_2_0, grammarAccess.getJdlMinBytesValidatorAccess().getValueINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJdlMinBytesValidatorRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getJdlMinBytesValidatorAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleJdlMaxBytesValidator
entryRuleJdlMaxBytesValidator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJdlMaxBytesValidatorRule()); }
	iv_ruleJdlMaxBytesValidator=ruleJdlMaxBytesValidator
	{ $current=$iv_ruleJdlMaxBytesValidator.current; }
	EOF;

// Rule JdlMaxBytesValidator
ruleJdlMaxBytesValidator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='maxbytes'
		{
			newLeafNode(otherlv_0, grammarAccess.getJdlMaxBytesValidatorAccess().getMaxbytesKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getJdlMaxBytesValidatorAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_value_2_0=RULE_INT
				{
					newLeafNode(lv_value_2_0, grammarAccess.getJdlMaxBytesValidatorAccess().getValueINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJdlMaxBytesValidatorRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getJdlMaxBytesValidatorAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleJdlRelationships
entryRuleJdlRelationships returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJdlRelationshipsRule()); }
	iv_ruleJdlRelationships=ruleJdlRelationships
	{ $current=$iv_ruleJdlRelationships.current; }
	EOF;

// Rule JdlRelationships
ruleJdlRelationships returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='relationship'
		{
			newLeafNode(otherlv_0, grammarAccess.getJdlRelationshipsAccess().getRelationshipKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getJdlRelationshipsAccess().getCardinalityJdlCardinalityEnumRuleCall_1_0());
				}
				lv_cardinality_1_0=ruleJdlCardinality
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJdlRelationshipsRule());
					}
					set(
						$current,
						"cardinality",
						lv_cardinality_1_0,
						"io.github.jhipster.jdl.JDL.JdlCardinality");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getJdlRelationshipsAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getJdlRelationshipsAccess().getRelationshipsJdlRelationshipParserRuleCall_3_0());
				}
				lv_relationships_3_0=ruleJdlRelationship
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJdlRelationshipsRule());
					}
					add(
						$current,
						"relationships",
						lv_relationships_3_0,
						"io.github.jhipster.jdl.JDL.JdlRelationship");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getJdlRelationshipsAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getJdlRelationshipsAccess().getRelationshipsJdlRelationshipParserRuleCall_4_1_0());
					}
					lv_relationships_5_0=ruleJdlRelationship
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getJdlRelationshipsRule());
						}
						add(
							$current,
							"relationships",
							lv_relationships_5_0,
							"io.github.jhipster.jdl.JDL.JdlRelationship");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getJdlRelationshipsAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleJdlRelationship
entryRuleJdlRelationship returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJdlRelationshipRule()); }
	iv_ruleJdlRelationship=ruleJdlRelationship
	{ $current=$iv_ruleJdlRelationship.current; }
	EOF;

// Rule JdlRelationship
ruleJdlRelationship returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJdlRelationshipRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getJdlRelationshipAccess().getFromEntityJdlEntityCrossReference_0_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getJdlRelationshipAccess().getFromNameJdlRelationshipNameParserRuleCall_1_0());
				}
				lv_fromName_1_0=ruleJdlRelationshipName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJdlRelationshipRule());
					}
					set(
						$current,
						"fromName",
						lv_fromName_1_0,
						"io.github.jhipster.jdl.JDL.JdlRelationshipName");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_2='to'
		{
			newLeafNode(otherlv_2, grammarAccess.getJdlRelationshipAccess().getToKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJdlRelationshipRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getJdlRelationshipAccess().getToEntityJdlEntityCrossReference_3_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getJdlRelationshipAccess().getToNameJdlRelationshipNameParserRuleCall_4_0());
				}
				lv_toName_4_0=ruleJdlRelationshipName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJdlRelationshipRule());
					}
					set(
						$current,
						"toName",
						lv_toName_4_0,
						"io.github.jhipster.jdl.JDL.JdlRelationshipName");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleJdlRelationshipName
entryRuleJdlRelationshipName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJdlRelationshipNameRule()); }
	iv_ruleJdlRelationshipName=ruleJdlRelationshipName
	{ $current=$iv_ruleJdlRelationshipName.current; }
	EOF;

// Rule JdlRelationshipName
ruleJdlRelationshipName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='{'
		{
			newLeafNode(otherlv_0, grammarAccess.getJdlRelationshipNameAccess().getLeftCurlyBracketKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getJdlRelationshipNameAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJdlRelationshipNameRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getJdlRelationshipNameAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					lv_role_3_0=RULE_ID
					{
						newLeafNode(lv_role_3_0, grammarAccess.getJdlRelationshipNameAccess().getRoleIDTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getJdlRelationshipNameRule());
						}
						setWithLastConsumed(
							$current,
							"role",
							lv_role_3_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getJdlRelationshipNameAccess().getRightParenthesisKeyword_2_2());
			}
		)?
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getJdlRelationshipNameAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleJdlEnumType
entryRuleJdlEnumType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJdlEnumTypeRule()); }
	iv_ruleJdlEnumType=ruleJdlEnumType
	{ $current=$iv_ruleJdlEnumType.current; }
	EOF;

// Rule JdlEnumType
ruleJdlEnumType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='enum'
		{
			newLeafNode(otherlv_0, grammarAccess.getJdlEnumTypeAccess().getEnumKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getJdlEnumTypeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJdlEnumTypeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getJdlEnumTypeAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				lv_values_3_0=RULE_ID
				{
					newLeafNode(lv_values_3_0, grammarAccess.getJdlEnumTypeAccess().getValuesIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJdlEnumTypeRule());
					}
					addWithLastConsumed(
						$current,
						"values",
						lv_values_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getJdlEnumTypeAccess().getCommaKeyword_4_0());
			}
			(
				(
					lv_values_5_0=RULE_ID
					{
						newLeafNode(lv_values_5_0, grammarAccess.getJdlEnumTypeAccess().getValuesIDTerminalRuleCall_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getJdlEnumTypeRule());
						}
						addWithLastConsumed(
							$current,
							"values",
							lv_values_5_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getJdlEnumTypeAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleJdlGenerationSetting
entryRuleJdlGenerationSetting returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJdlGenerationSettingRule()); }
	iv_ruleJdlGenerationSetting=ruleJdlGenerationSetting
	{ $current=$iv_ruleJdlGenerationSetting.current; }
	EOF;

// Rule JdlGenerationSetting
ruleJdlGenerationSetting returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getJdlGenerationSettingAccess().getSettingJdlGenerationSettingTypeParserRuleCall_0_0());
				}
				lv_setting_0_0=ruleJdlGenerationSettingType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJdlGenerationSettingRule());
					}
					set(
						$current,
						"setting",
						lv_setting_0_0,
						"io.github.jhipster.jdl.JDL.JdlGenerationSettingType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getJdlGenerationSettingAccess().getExcludesJdlEntityExclusionParserRuleCall_1_0());
				}
				lv_excludes_1_0=ruleJdlEntityExclusion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJdlGenerationSettingRule());
					}
					set(
						$current,
						"excludes",
						lv_excludes_1_0,
						"io.github.jhipster.jdl.JDL.JdlEntityExclusion");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleJdlGenerationSettingType
entryRuleJdlGenerationSettingType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJdlGenerationSettingTypeRule()); }
	iv_ruleJdlGenerationSettingType=ruleJdlGenerationSettingType
	{ $current=$iv_ruleJdlGenerationSettingType.current; }
	EOF;

// Rule JdlGenerationSettingType
ruleJdlGenerationSettingType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getJdlGenerationSettingTypeAccess().getJdlServiceGenerationSettingParserRuleCall_0());
		}
		this_JdlServiceGenerationSetting_0=ruleJdlServiceGenerationSetting
		{
			$current = $this_JdlServiceGenerationSetting_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getJdlGenerationSettingTypeAccess().getJdlMicroserviceGenerationSettingParserRuleCall_1());
		}
		this_JdlMicroserviceGenerationSetting_1=ruleJdlMicroserviceGenerationSetting
		{
			$current = $this_JdlMicroserviceGenerationSetting_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getJdlGenerationSettingTypeAccess().getJdlSearchGenerationSettingParserRuleCall_2());
		}
		this_JdlSearchGenerationSetting_2=ruleJdlSearchGenerationSetting
		{
			$current = $this_JdlSearchGenerationSetting_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getJdlGenerationSettingTypeAccess().getJdlDtoGenerationSettingParserRuleCall_3());
		}
		this_JdlDtoGenerationSetting_3=ruleJdlDtoGenerationSetting
		{
			$current = $this_JdlDtoGenerationSetting_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getJdlGenerationSettingTypeAccess().getJdlPaginateGenerationSettingParserRuleCall_4());
		}
		this_JdlPaginateGenerationSetting_4=ruleJdlPaginateGenerationSetting
		{
			$current = $this_JdlPaginateGenerationSetting_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getJdlGenerationSettingTypeAccess().getJdlAngularSuffixGenerationSettingParserRuleCall_5());
		}
		this_JdlAngularSuffixGenerationSetting_5=ruleJdlAngularSuffixGenerationSetting
		{
			$current = $this_JdlAngularSuffixGenerationSetting_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleJdlServiceGenerationSetting
entryRuleJdlServiceGenerationSetting returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJdlServiceGenerationSettingRule()); }
	iv_ruleJdlServiceGenerationSetting=ruleJdlServiceGenerationSetting
	{ $current=$iv_ruleJdlServiceGenerationSetting.current; }
	EOF;

// Rule JdlServiceGenerationSetting
ruleJdlServiceGenerationSetting returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_serviceGenerationSetting_0_0='service'
				{
					newLeafNode(lv_serviceGenerationSetting_0_0, grammarAccess.getJdlServiceGenerationSettingAccess().getServiceGenerationSettingServiceKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJdlServiceGenerationSettingRule());
					}
					setWithLastConsumed($current, "serviceGenerationSetting", true, "service");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getJdlServiceGenerationSettingAccess().getIncludesJdlEntityInclusionParserRuleCall_1_0());
				}
				lv_includes_1_0=ruleJdlEntityInclusion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJdlServiceGenerationSettingRule());
					}
					set(
						$current,
						"includes",
						lv_includes_1_0,
						"io.github.jhipster.jdl.JDL.JdlEntityInclusion");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getJdlServiceGenerationSettingAccess().getServiceTypeJdlServiceTypeEnumRuleCall_2_0());
				}
				lv_serviceType_2_0=ruleJdlServiceType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJdlServiceGenerationSettingRule());
					}
					set(
						$current,
						"serviceType",
						lv_serviceType_2_0,
						"io.github.jhipster.jdl.JDL.JdlServiceType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleJdlMicroserviceGenerationSetting
entryRuleJdlMicroserviceGenerationSetting returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJdlMicroserviceGenerationSettingRule()); }
	iv_ruleJdlMicroserviceGenerationSetting=ruleJdlMicroserviceGenerationSetting
	{ $current=$iv_ruleJdlMicroserviceGenerationSetting.current; }
	EOF;

// Rule JdlMicroserviceGenerationSetting
ruleJdlMicroserviceGenerationSetting returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_microserviceGenerationSetting_0_0='microservice'
				{
					newLeafNode(lv_microserviceGenerationSetting_0_0, grammarAccess.getJdlMicroserviceGenerationSettingAccess().getMicroserviceGenerationSettingMicroserviceKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJdlMicroserviceGenerationSettingRule());
					}
					setWithLastConsumed($current, "microserviceGenerationSetting", true, "microservice");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getJdlMicroserviceGenerationSettingAccess().getIncludesJdlEntityInclusionParserRuleCall_1_0());
				}
				lv_includes_1_0=ruleJdlEntityInclusion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJdlMicroserviceGenerationSettingRule());
					}
					set(
						$current,
						"includes",
						lv_includes_1_0,
						"io.github.jhipster.jdl.JDL.JdlEntityInclusion");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_appname_2_0=RULE_ID
				{
					newLeafNode(lv_appname_2_0, grammarAccess.getJdlMicroserviceGenerationSettingAccess().getAppnameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJdlMicroserviceGenerationSettingRule());
					}
					setWithLastConsumed(
						$current,
						"appname",
						lv_appname_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleJdlSearchGenerationSetting
entryRuleJdlSearchGenerationSetting returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJdlSearchGenerationSettingRule()); }
	iv_ruleJdlSearchGenerationSetting=ruleJdlSearchGenerationSetting
	{ $current=$iv_ruleJdlSearchGenerationSetting.current; }
	EOF;

// Rule JdlSearchGenerationSetting
ruleJdlSearchGenerationSetting returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_searchGenerationSetting_0_0='search'
				{
					newLeafNode(lv_searchGenerationSetting_0_0, grammarAccess.getJdlSearchGenerationSettingAccess().getSearchGenerationSettingSearchKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJdlSearchGenerationSettingRule());
					}
					setWithLastConsumed($current, "searchGenerationSetting", true, "search");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getJdlSearchGenerationSettingAccess().getIncludesJdlEntityInclusionParserRuleCall_1_0());
				}
				lv_includes_1_0=ruleJdlEntityInclusion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJdlSearchGenerationSettingRule());
					}
					set(
						$current,
						"includes",
						lv_includes_1_0,
						"io.github.jhipster.jdl.JDL.JdlEntityInclusion");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_service_2_0=RULE_ID
				{
					newLeafNode(lv_service_2_0, grammarAccess.getJdlSearchGenerationSettingAccess().getServiceIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJdlSearchGenerationSettingRule());
					}
					setWithLastConsumed(
						$current,
						"service",
						lv_service_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleJdlDtoGenerationSetting
entryRuleJdlDtoGenerationSetting returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJdlDtoGenerationSettingRule()); }
	iv_ruleJdlDtoGenerationSetting=ruleJdlDtoGenerationSetting
	{ $current=$iv_ruleJdlDtoGenerationSetting.current; }
	EOF;

// Rule JdlDtoGenerationSetting
ruleJdlDtoGenerationSetting returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_dtoGenerationSetting_0_0='dto'
				{
					newLeafNode(lv_dtoGenerationSetting_0_0, grammarAccess.getJdlDtoGenerationSettingAccess().getDtoGenerationSettingDtoKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJdlDtoGenerationSettingRule());
					}
					setWithLastConsumed($current, "dtoGenerationSetting", true, "dto");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getJdlDtoGenerationSettingAccess().getIncludesJdlEntityInclusionParserRuleCall_1_0());
				}
				lv_includes_1_0=ruleJdlEntityInclusion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJdlDtoGenerationSettingRule());
					}
					set(
						$current,
						"includes",
						lv_includes_1_0,
						"io.github.jhipster.jdl.JDL.JdlEntityInclusion");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getJdlDtoGenerationSettingAccess().getDtoTypeJdlDtoTypeEnumRuleCall_2_0());
				}
				lv_dtoType_2_0=ruleJdlDtoType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJdlDtoGenerationSettingRule());
					}
					set(
						$current,
						"dtoType",
						lv_dtoType_2_0,
						"io.github.jhipster.jdl.JDL.JdlDtoType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleJdlPaginateGenerationSetting
entryRuleJdlPaginateGenerationSetting returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJdlPaginateGenerationSettingRule()); }
	iv_ruleJdlPaginateGenerationSetting=ruleJdlPaginateGenerationSetting
	{ $current=$iv_ruleJdlPaginateGenerationSetting.current; }
	EOF;

// Rule JdlPaginateGenerationSetting
ruleJdlPaginateGenerationSetting returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_paginateGenerationSetting_0_0='paginate'
				{
					newLeafNode(lv_paginateGenerationSetting_0_0, grammarAccess.getJdlPaginateGenerationSettingAccess().getPaginateGenerationSettingPaginateKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJdlPaginateGenerationSettingRule());
					}
					setWithLastConsumed($current, "paginateGenerationSetting", true, "paginate");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getJdlPaginateGenerationSettingAccess().getIncludesJdlEntityInclusionParserRuleCall_1_0());
				}
				lv_includes_1_0=ruleJdlEntityInclusion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJdlPaginateGenerationSettingRule());
					}
					set(
						$current,
						"includes",
						lv_includes_1_0,
						"io.github.jhipster.jdl.JDL.JdlEntityInclusion");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getJdlPaginateGenerationSettingAccess().getPaginateTypeJdlPaginateTypeParserRuleCall_2_0());
				}
				lv_paginateType_2_0=ruleJdlPaginateType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJdlPaginateGenerationSettingRule());
					}
					set(
						$current,
						"paginateType",
						lv_paginateType_2_0,
						"io.github.jhipster.jdl.JDL.JdlPaginateType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleJdlAngularSuffixGenerationSetting
entryRuleJdlAngularSuffixGenerationSetting returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJdlAngularSuffixGenerationSettingRule()); }
	iv_ruleJdlAngularSuffixGenerationSetting=ruleJdlAngularSuffixGenerationSetting
	{ $current=$iv_ruleJdlAngularSuffixGenerationSetting.current; }
	EOF;

// Rule JdlAngularSuffixGenerationSetting
ruleJdlAngularSuffixGenerationSetting returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_angularSuffixGenerationSetting_0_0='angularSuffix'
				{
					newLeafNode(lv_angularSuffixGenerationSetting_0_0, grammarAccess.getJdlAngularSuffixGenerationSettingAccess().getAngularSuffixGenerationSettingAngularSuffixKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJdlAngularSuffixGenerationSettingRule());
					}
					setWithLastConsumed($current, "angularSuffixGenerationSetting", true, "angularSuffix");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getJdlAngularSuffixGenerationSettingAccess().getIncludesJdlEntityInclusionParserRuleCall_1_0());
				}
				lv_includes_1_0=ruleJdlEntityInclusion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJdlAngularSuffixGenerationSettingRule());
					}
					set(
						$current,
						"includes",
						lv_includes_1_0,
						"io.github.jhipster.jdl.JDL.JdlEntityInclusion");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_id_2_0=RULE_ID
				{
					newLeafNode(lv_id_2_0, grammarAccess.getJdlAngularSuffixGenerationSettingAccess().getIdIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJdlAngularSuffixGenerationSettingRule());
					}
					setWithLastConsumed(
						$current,
						"id",
						lv_id_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleJdlEntityInclusion
entryRuleJdlEntityInclusion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJdlEntityInclusionRule()); }
	iv_ruleJdlEntityInclusion=ruleJdlEntityInclusion
	{ $current=$iv_ruleJdlEntityInclusion.current; }
	EOF;

// Rule JdlEntityInclusion
ruleJdlEntityInclusion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getJdlEntityInclusionAccess().getPredicateJdlWildcardPredicateParserRuleCall_0_0_0());
					}
					lv_predicate_0_0=ruleJdlWildcardPredicate
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getJdlEntityInclusionRule());
						}
						set(
							$current,
							"predicate",
							lv_predicate_0_0,
							"io.github.jhipster.jdl.JDL.JdlWildcardPredicate");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getJdlEntityInclusionRule());
							}
						}
						otherlv_1=RULE_ID
						{
							newLeafNode(otherlv_1, grammarAccess.getJdlEntityInclusionAccess().getEntitiesJdlEntityCrossReference_0_1_0_0());
						}
					)
				)
				(
					otherlv_2=','
					{
						newLeafNode(otherlv_2, grammarAccess.getJdlEntityInclusionAccess().getCommaKeyword_0_1_1_0());
					}
					(
						(
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getJdlEntityInclusionRule());
								}
							}
							otherlv_3=RULE_ID
							{
								newLeafNode(otherlv_3, grammarAccess.getJdlEntityInclusionAccess().getEntitiesJdlEntityCrossReference_0_1_1_1_0());
							}
						)
					)
				)*
			)
		)
		otherlv_4='with'
		{
			newLeafNode(otherlv_4, grammarAccess.getJdlEntityInclusionAccess().getWithKeyword_1());
		}
	)
;

// Entry rule entryRuleJdlEntityExclusion
entryRuleJdlEntityExclusion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJdlEntityExclusionRule()); }
	iv_ruleJdlEntityExclusion=ruleJdlEntityExclusion
	{ $current=$iv_ruleJdlEntityExclusion.current; }
	EOF;

// Rule JdlEntityExclusion
ruleJdlEntityExclusion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='except'
		{
			newLeafNode(otherlv_0, grammarAccess.getJdlEntityExclusionAccess().getExceptKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJdlEntityExclusionRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getJdlEntityExclusionAccess().getEntitiesJdlEntityCrossReference_1_0());
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getJdlEntityExclusionAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getJdlEntityExclusionRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getJdlEntityExclusionAccess().getEntitiesJdlEntityCrossReference_2_1_0());
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleJdlWildcardPredicate
entryRuleJdlWildcardPredicate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJdlWildcardPredicateRule()); }
	iv_ruleJdlWildcardPredicate=ruleJdlWildcardPredicate
	{ $current=$iv_ruleJdlWildcardPredicate.current; }
	EOF;

// Rule JdlWildcardPredicate
ruleJdlWildcardPredicate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_wildcard_0_0='*'
				{
					newLeafNode(lv_wildcard_0_0, grammarAccess.getJdlWildcardPredicateAccess().getWildcardAsteriskKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJdlWildcardPredicateRule());
					}
					setWithLastConsumed($current, "wildcard", true, "*");
				}
			)
		)
		    |
		(
			(
				lv_all_1_0='all'
				{
					newLeafNode(lv_all_1_0, grammarAccess.getJdlWildcardPredicateAccess().getAllAllKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJdlWildcardPredicateRule());
					}
					setWithLastConsumed($current, "all", true, "all");
				}
			)
		)
	)
;

// Entry rule entryRuleJdlPaginateType
entryRuleJdlPaginateType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJdlPaginateTypeRule()); }
	iv_ruleJdlPaginateType=ruleJdlPaginateType
	{ $current=$iv_ruleJdlPaginateType.current; }
	EOF;

// Rule JdlPaginateType
ruleJdlPaginateType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_pagination_0_1='pager'
					{
						newLeafNode(lv_pagination_0_1, grammarAccess.getJdlPaginateTypeAccess().getPaginationPagerKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getJdlPaginateTypeRule());
						}
						setWithLastConsumed($current, "pagination", true, null);
					}
					    |
					lv_pagination_0_2='pagination'
					{
						newLeafNode(lv_pagination_0_2, grammarAccess.getJdlPaginateTypeAccess().getPaginationPaginationKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getJdlPaginateTypeRule());
						}
						setWithLastConsumed($current, "pagination", true, null);
					}
				)
			)
		)
		    |
		(
			(
				lv_infiniteScroll_1_0='infinite-scroll'
				{
					newLeafNode(lv_infiniteScroll_1_0, grammarAccess.getJdlPaginateTypeAccess().getInfiniteScrollInfiniteScrollKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJdlPaginateTypeRule());
					}
					setWithLastConsumed($current, "infiniteScroll", true, "infinite-scroll");
				}
			)
		)
	)
;

// Rule JdlNumericFieldType
ruleJdlNumericFieldType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Integer'
			{
				$current = grammarAccess.getJdlNumericFieldTypeAccess().getIntegerEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getJdlNumericFieldTypeAccess().getIntegerEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Long'
			{
				$current = grammarAccess.getJdlNumericFieldTypeAccess().getLongEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getJdlNumericFieldTypeAccess().getLongEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='BigDecimal'
			{
				$current = grammarAccess.getJdlNumericFieldTypeAccess().getBigDecimalEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getJdlNumericFieldTypeAccess().getBigDecimalEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='Float'
			{
				$current = grammarAccess.getJdlNumericFieldTypeAccess().getFloatEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getJdlNumericFieldTypeAccess().getFloatEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='Double'
			{
				$current = grammarAccess.getJdlNumericFieldTypeAccess().getDoubleEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getJdlNumericFieldTypeAccess().getDoubleEnumLiteralDeclaration_4());
			}
		)
	)
;

// Rule JdlBlobFieldType
ruleJdlBlobFieldType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Blob'
			{
				$current = grammarAccess.getJdlBlobFieldTypeAccess().getBlobEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getJdlBlobFieldTypeAccess().getBlobEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='AnyBlob'
			{
				$current = grammarAccess.getJdlBlobFieldTypeAccess().getAnyBlobEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getJdlBlobFieldTypeAccess().getAnyBlobEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='ImageBlob'
			{
				$current = grammarAccess.getJdlBlobFieldTypeAccess().getImageBlobEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getJdlBlobFieldTypeAccess().getImageBlobEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule JdlCardinality
ruleJdlCardinality returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='OneToMany'
			{
				$current = grammarAccess.getJdlCardinalityAccess().getOneToManyEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getJdlCardinalityAccess().getOneToManyEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='ManyToOne'
			{
				$current = grammarAccess.getJdlCardinalityAccess().getManyToOneEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getJdlCardinalityAccess().getManyToOneEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='OneToOne'
			{
				$current = grammarAccess.getJdlCardinalityAccess().getOneToOneEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getJdlCardinalityAccess().getOneToOneEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='ManyToMany'
			{
				$current = grammarAccess.getJdlCardinalityAccess().getManyToManyEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getJdlCardinalityAccess().getManyToManyEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule JdlServiceType
ruleJdlServiceType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='serviceClass'
			{
				$current = grammarAccess.getJdlServiceTypeAccess().getServiceClassEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getJdlServiceTypeAccess().getServiceClassEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='serviceImpl'
			{
				$current = grammarAccess.getJdlServiceTypeAccess().getServiceImplEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getJdlServiceTypeAccess().getServiceImplEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule JdlDtoType
ruleJdlDtoType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='mapstruct'
		{
			$current = grammarAccess.getJdlDtoTypeAccess().getMapstructEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getJdlDtoTypeAccess().getMapstructEnumLiteralDeclaration());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
