/*
 * generated by Xtext 2.10.0
 */
package io.github.jhipster.jdl.dsl.serializer;

import com.google.inject.Inject;
import io.github.jhipster.jdl.dsl.jdl.AngularSuffixGenerationSetting;
import io.github.jhipster.jdl.dsl.jdl.AnyBlobField;
import io.github.jhipster.jdl.dsl.jdl.BigDecimalField;
import io.github.jhipster.jdl.dsl.jdl.BlobField;
import io.github.jhipster.jdl.dsl.jdl.BlobValidators;
import io.github.jhipster.jdl.dsl.jdl.BooleanField;
import io.github.jhipster.jdl.dsl.jdl.DTOGenerationSetting;
import io.github.jhipster.jdl.dsl.jdl.DomainModel;
import io.github.jhipster.jdl.dsl.jdl.DoubleField;
import io.github.jhipster.jdl.dsl.jdl.Entity;
import io.github.jhipster.jdl.dsl.jdl.EnumField;
import io.github.jhipster.jdl.dsl.jdl.EnumType;
import io.github.jhipster.jdl.dsl.jdl.FloatField;
import io.github.jhipster.jdl.dsl.jdl.ImageBlobField;
import io.github.jhipster.jdl.dsl.jdl.IntegerField;
import io.github.jhipster.jdl.dsl.jdl.JdlPackage;
import io.github.jhipster.jdl.dsl.jdl.LocalDateField;
import io.github.jhipster.jdl.dsl.jdl.LongField;
import io.github.jhipster.jdl.dsl.jdl.MaxBytesValidator;
import io.github.jhipster.jdl.dsl.jdl.MaxLengthValidator;
import io.github.jhipster.jdl.dsl.jdl.MaxValidator;
import io.github.jhipster.jdl.dsl.jdl.MinBytesValidator;
import io.github.jhipster.jdl.dsl.jdl.MinLengthValidator;
import io.github.jhipster.jdl.dsl.jdl.MinValidator;
import io.github.jhipster.jdl.dsl.jdl.NumericValidators;
import io.github.jhipster.jdl.dsl.jdl.PaginateGenerationSetting;
import io.github.jhipster.jdl.dsl.jdl.PatternValidator;
import io.github.jhipster.jdl.dsl.jdl.Relationship;
import io.github.jhipster.jdl.dsl.jdl.RelationshipName;
import io.github.jhipster.jdl.dsl.jdl.Relationships;
import io.github.jhipster.jdl.dsl.jdl.RequiredValidator;
import io.github.jhipster.jdl.dsl.jdl.ServiceGenerationSetting;
import io.github.jhipster.jdl.dsl.jdl.StringField;
import io.github.jhipster.jdl.dsl.jdl.StringValidators;
import io.github.jhipster.jdl.dsl.jdl.ZonedDateTimeField;
import io.github.jhipster.jdl.dsl.services.JDLGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class JDLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private JDLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == JdlPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case JdlPackage.ANGULAR_SUFFIX_GENERATION_SETTING:
				sequence_AngularSuffixGenerationSetting(context, (AngularSuffixGenerationSetting) semanticObject); 
				return; 
			case JdlPackage.ANY_BLOB_FIELD:
				sequence_AnyBlobField(context, (AnyBlobField) semanticObject); 
				return; 
			case JdlPackage.BIG_DECIMAL_FIELD:
				sequence_BigDecimalField(context, (BigDecimalField) semanticObject); 
				return; 
			case JdlPackage.BLOB_FIELD:
				sequence_BlobField(context, (BlobField) semanticObject); 
				return; 
			case JdlPackage.BLOB_VALIDATORS:
				sequence_BlobValidators(context, (BlobValidators) semanticObject); 
				return; 
			case JdlPackage.BOOLEAN_FIELD:
				sequence_BooleanField(context, (BooleanField) semanticObject); 
				return; 
			case JdlPackage.DTO_GENERATION_SETTING:
				sequence_DTOGenerationSetting(context, (DTOGenerationSetting) semanticObject); 
				return; 
			case JdlPackage.DOMAIN_MODEL:
				sequence_DomainModel(context, (DomainModel) semanticObject); 
				return; 
			case JdlPackage.DOUBLE_FIELD:
				sequence_DoubleField(context, (DoubleField) semanticObject); 
				return; 
			case JdlPackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case JdlPackage.ENUM_FIELD:
				sequence_EnumField(context, (EnumField) semanticObject); 
				return; 
			case JdlPackage.ENUM_TYPE:
				sequence_EnumType(context, (EnumType) semanticObject); 
				return; 
			case JdlPackage.FLOAT_FIELD:
				sequence_FloatField(context, (FloatField) semanticObject); 
				return; 
			case JdlPackage.IMAGE_BLOB_FIELD:
				sequence_ImageBlobField(context, (ImageBlobField) semanticObject); 
				return; 
			case JdlPackage.INTEGER_FIELD:
				sequence_IntegerField(context, (IntegerField) semanticObject); 
				return; 
			case JdlPackage.LOCAL_DATE_FIELD:
				sequence_LocalDateField(context, (LocalDateField) semanticObject); 
				return; 
			case JdlPackage.LONG_FIELD:
				sequence_LongField(context, (LongField) semanticObject); 
				return; 
			case JdlPackage.MAX_BYTES_VALIDATOR:
				sequence_MaxBytesValidator(context, (MaxBytesValidator) semanticObject); 
				return; 
			case JdlPackage.MAX_LENGTH_VALIDATOR:
				sequence_MaxLengthValidator(context, (MaxLengthValidator) semanticObject); 
				return; 
			case JdlPackage.MAX_VALIDATOR:
				sequence_MaxValidator(context, (MaxValidator) semanticObject); 
				return; 
			case JdlPackage.MIN_BYTES_VALIDATOR:
				sequence_MinBytesValidator(context, (MinBytesValidator) semanticObject); 
				return; 
			case JdlPackage.MIN_LENGTH_VALIDATOR:
				sequence_MinLengthValidator(context, (MinLengthValidator) semanticObject); 
				return; 
			case JdlPackage.MIN_VALIDATOR:
				sequence_MinValidator(context, (MinValidator) semanticObject); 
				return; 
			case JdlPackage.NUMERIC_VALIDATORS:
				sequence_NumericValidators(context, (NumericValidators) semanticObject); 
				return; 
			case JdlPackage.PAGINATE_GENERATION_SETTING:
				sequence_PaginateGenerationSetting(context, (PaginateGenerationSetting) semanticObject); 
				return; 
			case JdlPackage.PATTERN_VALIDATOR:
				sequence_PatternValidator(context, (PatternValidator) semanticObject); 
				return; 
			case JdlPackage.RELATIONSHIP:
				sequence_Relationship(context, (Relationship) semanticObject); 
				return; 
			case JdlPackage.RELATIONSHIP_NAME:
				sequence_RelationshipName(context, (RelationshipName) semanticObject); 
				return; 
			case JdlPackage.RELATIONSHIPS:
				sequence_Relationships(context, (Relationships) semanticObject); 
				return; 
			case JdlPackage.REQUIRED_VALIDATOR:
				sequence_RequiredValidator(context, (RequiredValidator) semanticObject); 
				return; 
			case JdlPackage.SERVICE_GENERATION_SETTING:
				sequence_ServiceGenerationSetting(context, (ServiceGenerationSetting) semanticObject); 
				return; 
			case JdlPackage.STRING_FIELD:
				sequence_StringField(context, (StringField) semanticObject); 
				return; 
			case JdlPackage.STRING_VALIDATORS:
				sequence_StringValidators(context, (StringValidators) semanticObject); 
				return; 
			case JdlPackage.ZONED_DATE_TIME_FIELD:
				sequence_ZonedDateTimeField(context, (ZonedDateTimeField) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Elements returns AngularSuffixGenerationSetting
	 *     GenerationSetting returns AngularSuffixGenerationSetting
	 *     AngularSuffixGenerationSetting returns AngularSuffixGenerationSetting
	 *
	 * Constraint:
	 *     (entities+=ID entities+=ID* id=ID)
	 */
	protected void sequence_AngularSuffixGenerationSetting(ISerializationContext context, AngularSuffixGenerationSetting semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Field returns AnyBlobField
	 *     BinaryLargeObjectField returns AnyBlobField
	 *     AnyBlobField returns AnyBlobField
	 *
	 * Constraint:
	 *     (name=ID validators=BlobValidators?)
	 */
	protected void sequence_AnyBlobField(ISerializationContext context, AnyBlobField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Field returns BigDecimalField
	 *     NumericField returns BigDecimalField
	 *     BigDecimalField returns BigDecimalField
	 *
	 * Constraint:
	 *     (name=ID validators=NumericValidators?)
	 */
	protected void sequence_BigDecimalField(ISerializationContext context, BigDecimalField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Field returns BlobField
	 *     BinaryLargeObjectField returns BlobField
	 *     BlobField returns BlobField
	 *
	 * Constraint:
	 *     (name=ID validators=BlobValidators?)
	 */
	protected void sequence_BlobField(ISerializationContext context, BlobField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BlobValidators returns BlobValidators
	 *
	 * Constraint:
	 *     (required=RequiredValidator minbytes=MinBytesValidator? maxbytes=MaxBytesValidator?)
	 */
	protected void sequence_BlobValidators(ISerializationContext context, BlobValidators semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Field returns BooleanField
	 *     BooleanField returns BooleanField
	 *
	 * Constraint:
	 *     (name=ID validators=RequiredValidator?)
	 */
	protected void sequence_BooleanField(ISerializationContext context, BooleanField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Elements returns DTOGenerationSetting
	 *     GenerationSetting returns DTOGenerationSetting
	 *     DTOGenerationSetting returns DTOGenerationSetting
	 *
	 * Constraint:
	 *     (entities+=ID entities+=ID* dtoType=DTOType)
	 */
	protected void sequence_DTOGenerationSetting(ISerializationContext context, DTOGenerationSetting semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DomainModel returns DomainModel
	 *
	 * Constraint:
	 *     elements+=Elements+
	 */
	protected void sequence_DomainModel(ISerializationContext context, DomainModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Field returns DoubleField
	 *     NumericField returns DoubleField
	 *     DoubleField returns DoubleField
	 *
	 * Constraint:
	 *     (name=ID validators=NumericValidators?)
	 */
	protected void sequence_DoubleField(ISerializationContext context, DoubleField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Elements returns Entity
	 *     Entity returns Entity
	 *
	 * Constraint:
	 *     (name=ID fields+=Field fields+=Field*)
	 */
	protected void sequence_Entity(ISerializationContext context, Entity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Field returns EnumField
	 *     EnumField returns EnumField
	 *
	 * Constraint:
	 *     (name=ID enumType=[EnumType|ID] validators=RequiredValidator?)
	 */
	protected void sequence_EnumField(ISerializationContext context, EnumField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Elements returns EnumType
	 *     EnumType returns EnumType
	 *
	 * Constraint:
	 *     (name=ID values+=ID values+=ID*)
	 */
	protected void sequence_EnumType(ISerializationContext context, EnumType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Field returns FloatField
	 *     NumericField returns FloatField
	 *     FloatField returns FloatField
	 *
	 * Constraint:
	 *     (name=ID validators=NumericValidators?)
	 */
	protected void sequence_FloatField(ISerializationContext context, FloatField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Field returns ImageBlobField
	 *     BinaryLargeObjectField returns ImageBlobField
	 *     ImageBlobField returns ImageBlobField
	 *
	 * Constraint:
	 *     (name=ID validators=BlobValidators?)
	 */
	protected void sequence_ImageBlobField(ISerializationContext context, ImageBlobField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Field returns IntegerField
	 *     NumericField returns IntegerField
	 *     IntegerField returns IntegerField
	 *
	 * Constraint:
	 *     (name=ID validators=NumericValidators?)
	 */
	protected void sequence_IntegerField(ISerializationContext context, IntegerField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Field returns LocalDateField
	 *     DateField returns LocalDateField
	 *     LocalDateField returns LocalDateField
	 *
	 * Constraint:
	 *     (name=ID validators=RequiredValidator?)
	 */
	protected void sequence_LocalDateField(ISerializationContext context, LocalDateField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Field returns LongField
	 *     NumericField returns LongField
	 *     LongField returns LongField
	 *
	 * Constraint:
	 *     (name=ID validators=NumericValidators?)
	 */
	protected void sequence_LongField(ISerializationContext context, LongField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MaxBytesValidator returns MaxBytesValidator
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_MaxBytesValidator(ISerializationContext context, MaxBytesValidator semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JdlPackage.Literals.MAX_BYTES_VALIDATOR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JdlPackage.Literals.MAX_BYTES_VALIDATOR__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMaxBytesValidatorAccess().getValueINTTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MaxLengthValidator returns MaxLengthValidator
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_MaxLengthValidator(ISerializationContext context, MaxLengthValidator semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JdlPackage.Literals.MAX_LENGTH_VALIDATOR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JdlPackage.Literals.MAX_LENGTH_VALIDATOR__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMaxLengthValidatorAccess().getValueINTTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MaxValidator returns MaxValidator
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_MaxValidator(ISerializationContext context, MaxValidator semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JdlPackage.Literals.MAX_VALIDATOR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JdlPackage.Literals.MAX_VALIDATOR__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMaxValidatorAccess().getValueINTTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MinBytesValidator returns MinBytesValidator
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_MinBytesValidator(ISerializationContext context, MinBytesValidator semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JdlPackage.Literals.MIN_BYTES_VALIDATOR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JdlPackage.Literals.MIN_BYTES_VALIDATOR__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMinBytesValidatorAccess().getValueINTTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MinLengthValidator returns MinLengthValidator
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_MinLengthValidator(ISerializationContext context, MinLengthValidator semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JdlPackage.Literals.MIN_LENGTH_VALIDATOR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JdlPackage.Literals.MIN_LENGTH_VALIDATOR__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMinLengthValidatorAccess().getValueINTTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MinValidator returns MinValidator
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_MinValidator(ISerializationContext context, MinValidator semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JdlPackage.Literals.MIN_VALIDATOR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JdlPackage.Literals.MIN_VALIDATOR__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMinValidatorAccess().getValueINTTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NumericValidators returns NumericValidators
	 *
	 * Constraint:
	 *     (required=RequiredValidator minlength=MinValidator? maxlength=MaxValidator?)
	 */
	protected void sequence_NumericValidators(ISerializationContext context, NumericValidators semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Elements returns PaginateGenerationSetting
	 *     GenerationSetting returns PaginateGenerationSetting
	 *     PaginateGenerationSetting returns PaginateGenerationSetting
	 *
	 * Constraint:
	 *     (entities+=ID entities+=ID* paginateType=PaginateType)
	 */
	protected void sequence_PaginateGenerationSetting(ISerializationContext context, PaginateGenerationSetting semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PatternValidator returns PatternValidator
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_PatternValidator(ISerializationContext context, PatternValidator semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JdlPackage.Literals.PATTERN_VALIDATOR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JdlPackage.Literals.PATTERN_VALIDATOR__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPatternValidatorAccess().getValueSTRINGTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RelationshipName returns RelationshipName
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_RelationshipName(ISerializationContext context, RelationshipName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JdlPackage.Literals.RELATIONSHIP_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JdlPackage.Literals.RELATIONSHIP_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRelationshipNameAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Relationship returns Relationship
	 *
	 * Constraint:
	 *     (fromEntity=Entity fromName=RelationshipName? toEntity=Entity toName=RelationshipName?)
	 */
	protected void sequence_Relationship(ISerializationContext context, Relationship semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Elements returns Relationships
	 *     Relationships returns Relationships
	 *
	 * Constraint:
	 *     (cardinality=Cardinality relationships+=Relationship*)
	 */
	protected void sequence_Relationships(ISerializationContext context, Relationships semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RequiredValidator returns RequiredValidator
	 *
	 * Constraint:
	 *     required?='required'
	 */
	protected void sequence_RequiredValidator(ISerializationContext context, RequiredValidator semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JdlPackage.Literals.REQUIRED_VALIDATOR__REQUIRED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JdlPackage.Literals.REQUIRED_VALIDATOR__REQUIRED));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRequiredValidatorAccess().getRequiredRequiredKeyword_0(), semanticObject.isRequired());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Elements returns ServiceGenerationSetting
	 *     GenerationSetting returns ServiceGenerationSetting
	 *     ServiceGenerationSetting returns ServiceGenerationSetting
	 *
	 * Constraint:
	 *     (entities+=ID entities+=ID* serviceType=ServiceType)
	 */
	protected void sequence_ServiceGenerationSetting(ISerializationContext context, ServiceGenerationSetting semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Field returns StringField
	 *     StringField returns StringField
	 *
	 * Constraint:
	 *     (name=ID validators=StringValidators?)
	 */
	protected void sequence_StringField(ISerializationContext context, StringField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StringValidators returns StringValidators
	 *
	 * Constraint:
	 *     (required=RequiredValidator minLength=MinLengthValidator? maxlength=MaxLengthValidator? pattern=PatternValidator?)
	 */
	protected void sequence_StringValidators(ISerializationContext context, StringValidators semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Field returns ZonedDateTimeField
	 *     DateField returns ZonedDateTimeField
	 *     ZonedDateTimeField returns ZonedDateTimeField
	 *
	 * Constraint:
	 *     (name=ID validators=RequiredValidator?)
	 */
	protected void sequence_ZonedDateTimeField(ISerializationContext context, ZonedDateTimeField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
