/**
 * generated by Xtext 2.10.0
 */
package io.github.jhipster.jdl.dsl.jdl.impl;

import io.github.jhipster.jdl.dsl.jdl.JdlPackage;
import io.github.jhipster.jdl.dsl.jdl.PaginateType;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Paginate Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link io.github.jhipster.jdl.dsl.jdl.impl.PaginateTypeImpl#isPagination <em>Pagination</em>}</li>
 *   <li>{@link io.github.jhipster.jdl.dsl.jdl.impl.PaginateTypeImpl#isInfiniteScroll <em>Infinite Scroll</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PaginateTypeImpl extends MinimalEObjectImpl.Container implements PaginateType
{
  /**
   * The default value of the '{@link #isPagination() <em>Pagination</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isPagination()
   * @generated
   * @ordered
   */
  protected static final boolean PAGINATION_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isPagination() <em>Pagination</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isPagination()
   * @generated
   * @ordered
   */
  protected boolean pagination = PAGINATION_EDEFAULT;

  /**
   * The default value of the '{@link #isInfiniteScroll() <em>Infinite Scroll</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isInfiniteScroll()
   * @generated
   * @ordered
   */
  protected static final boolean INFINITE_SCROLL_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isInfiniteScroll() <em>Infinite Scroll</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isInfiniteScroll()
   * @generated
   * @ordered
   */
  protected boolean infiniteScroll = INFINITE_SCROLL_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PaginateTypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return JdlPackage.Literals.PAGINATE_TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isPagination()
  {
    return pagination;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPagination(boolean newPagination)
  {
    boolean oldPagination = pagination;
    pagination = newPagination;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JdlPackage.PAGINATE_TYPE__PAGINATION, oldPagination, pagination));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isInfiniteScroll()
  {
    return infiniteScroll;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setInfiniteScroll(boolean newInfiniteScroll)
  {
    boolean oldInfiniteScroll = infiniteScroll;
    infiniteScroll = newInfiniteScroll;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JdlPackage.PAGINATE_TYPE__INFINITE_SCROLL, oldInfiniteScroll, infiniteScroll));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case JdlPackage.PAGINATE_TYPE__PAGINATION:
        return isPagination();
      case JdlPackage.PAGINATE_TYPE__INFINITE_SCROLL:
        return isInfiniteScroll();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case JdlPackage.PAGINATE_TYPE__PAGINATION:
        setPagination((Boolean)newValue);
        return;
      case JdlPackage.PAGINATE_TYPE__INFINITE_SCROLL:
        setInfiniteScroll((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case JdlPackage.PAGINATE_TYPE__PAGINATION:
        setPagination(PAGINATION_EDEFAULT);
        return;
      case JdlPackage.PAGINATE_TYPE__INFINITE_SCROLL:
        setInfiniteScroll(INFINITE_SCROLL_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case JdlPackage.PAGINATE_TYPE__PAGINATION:
        return pagination != PAGINATION_EDEFAULT;
      case JdlPackage.PAGINATE_TYPE__INFINITE_SCROLL:
        return infiniteScroll != INFINITE_SCROLL_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (pagination: ");
    result.append(pagination);
    result.append(", infiniteScroll: ");
    result.append(infiniteScroll);
    result.append(')');
    return result.toString();
  }

} //PaginateTypeImpl
