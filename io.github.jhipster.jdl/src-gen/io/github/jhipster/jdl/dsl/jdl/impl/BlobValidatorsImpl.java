/**
 * generated by Xtext 2.10.0
 */
package io.github.jhipster.jdl.dsl.jdl.impl;

import io.github.jhipster.jdl.dsl.jdl.BlobValidators;
import io.github.jhipster.jdl.dsl.jdl.JdlPackage;
import io.github.jhipster.jdl.dsl.jdl.MaxBytesValidator;
import io.github.jhipster.jdl.dsl.jdl.MinBytesValidator;
import io.github.jhipster.jdl.dsl.jdl.RequiredValidator;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Blob Validators</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link io.github.jhipster.jdl.dsl.jdl.impl.BlobValidatorsImpl#getRequired <em>Required</em>}</li>
 *   <li>{@link io.github.jhipster.jdl.dsl.jdl.impl.BlobValidatorsImpl#getMinbytes <em>Minbytes</em>}</li>
 *   <li>{@link io.github.jhipster.jdl.dsl.jdl.impl.BlobValidatorsImpl#getMaxbytes <em>Maxbytes</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BlobValidatorsImpl extends MinimalEObjectImpl.Container implements BlobValidators
{
  /**
   * The cached value of the '{@link #getRequired() <em>Required</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRequired()
   * @generated
   * @ordered
   */
  protected RequiredValidator required;

  /**
   * The cached value of the '{@link #getMinbytes() <em>Minbytes</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMinbytes()
   * @generated
   * @ordered
   */
  protected MinBytesValidator minbytes;

  /**
   * The cached value of the '{@link #getMaxbytes() <em>Maxbytes</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMaxbytes()
   * @generated
   * @ordered
   */
  protected MaxBytesValidator maxbytes;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BlobValidatorsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return JdlPackage.Literals.BLOB_VALIDATORS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RequiredValidator getRequired()
  {
    return required;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRequired(RequiredValidator newRequired, NotificationChain msgs)
  {
    RequiredValidator oldRequired = required;
    required = newRequired;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JdlPackage.BLOB_VALIDATORS__REQUIRED, oldRequired, newRequired);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRequired(RequiredValidator newRequired)
  {
    if (newRequired != required)
    {
      NotificationChain msgs = null;
      if (required != null)
        msgs = ((InternalEObject)required).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JdlPackage.BLOB_VALIDATORS__REQUIRED, null, msgs);
      if (newRequired != null)
        msgs = ((InternalEObject)newRequired).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JdlPackage.BLOB_VALIDATORS__REQUIRED, null, msgs);
      msgs = basicSetRequired(newRequired, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JdlPackage.BLOB_VALIDATORS__REQUIRED, newRequired, newRequired));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MinBytesValidator getMinbytes()
  {
    return minbytes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMinbytes(MinBytesValidator newMinbytes, NotificationChain msgs)
  {
    MinBytesValidator oldMinbytes = minbytes;
    minbytes = newMinbytes;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JdlPackage.BLOB_VALIDATORS__MINBYTES, oldMinbytes, newMinbytes);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMinbytes(MinBytesValidator newMinbytes)
  {
    if (newMinbytes != minbytes)
    {
      NotificationChain msgs = null;
      if (minbytes != null)
        msgs = ((InternalEObject)minbytes).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JdlPackage.BLOB_VALIDATORS__MINBYTES, null, msgs);
      if (newMinbytes != null)
        msgs = ((InternalEObject)newMinbytes).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JdlPackage.BLOB_VALIDATORS__MINBYTES, null, msgs);
      msgs = basicSetMinbytes(newMinbytes, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JdlPackage.BLOB_VALIDATORS__MINBYTES, newMinbytes, newMinbytes));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MaxBytesValidator getMaxbytes()
  {
    return maxbytes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMaxbytes(MaxBytesValidator newMaxbytes, NotificationChain msgs)
  {
    MaxBytesValidator oldMaxbytes = maxbytes;
    maxbytes = newMaxbytes;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JdlPackage.BLOB_VALIDATORS__MAXBYTES, oldMaxbytes, newMaxbytes);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMaxbytes(MaxBytesValidator newMaxbytes)
  {
    if (newMaxbytes != maxbytes)
    {
      NotificationChain msgs = null;
      if (maxbytes != null)
        msgs = ((InternalEObject)maxbytes).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JdlPackage.BLOB_VALIDATORS__MAXBYTES, null, msgs);
      if (newMaxbytes != null)
        msgs = ((InternalEObject)newMaxbytes).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JdlPackage.BLOB_VALIDATORS__MAXBYTES, null, msgs);
      msgs = basicSetMaxbytes(newMaxbytes, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JdlPackage.BLOB_VALIDATORS__MAXBYTES, newMaxbytes, newMaxbytes));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case JdlPackage.BLOB_VALIDATORS__REQUIRED:
        return basicSetRequired(null, msgs);
      case JdlPackage.BLOB_VALIDATORS__MINBYTES:
        return basicSetMinbytes(null, msgs);
      case JdlPackage.BLOB_VALIDATORS__MAXBYTES:
        return basicSetMaxbytes(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case JdlPackage.BLOB_VALIDATORS__REQUIRED:
        return getRequired();
      case JdlPackage.BLOB_VALIDATORS__MINBYTES:
        return getMinbytes();
      case JdlPackage.BLOB_VALIDATORS__MAXBYTES:
        return getMaxbytes();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case JdlPackage.BLOB_VALIDATORS__REQUIRED:
        setRequired((RequiredValidator)newValue);
        return;
      case JdlPackage.BLOB_VALIDATORS__MINBYTES:
        setMinbytes((MinBytesValidator)newValue);
        return;
      case JdlPackage.BLOB_VALIDATORS__MAXBYTES:
        setMaxbytes((MaxBytesValidator)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case JdlPackage.BLOB_VALIDATORS__REQUIRED:
        setRequired((RequiredValidator)null);
        return;
      case JdlPackage.BLOB_VALIDATORS__MINBYTES:
        setMinbytes((MinBytesValidator)null);
        return;
      case JdlPackage.BLOB_VALIDATORS__MAXBYTES:
        setMaxbytes((MaxBytesValidator)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case JdlPackage.BLOB_VALIDATORS__REQUIRED:
        return required != null;
      case JdlPackage.BLOB_VALIDATORS__MINBYTES:
        return minbytes != null;
      case JdlPackage.BLOB_VALIDATORS__MAXBYTES:
        return maxbytes != null;
    }
    return super.eIsSet(featureID);
  }

} //BlobValidatorsImpl
