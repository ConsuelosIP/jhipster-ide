/*
 * generated by Xtext 2.10.0
 */
grammar InternalJDL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package io.github.jhipster.jdl.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package io.github.jhipster.jdl.dsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import io.github.jhipster.jdl.dsl.services.JDLGrammarAccess;

}

@parser::members {

 	private JDLGrammarAccess grammarAccess;

    public InternalJDLParser(TokenStream input, JDLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "DomainModel";
   	}

   	@Override
   	protected JDLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleDomainModel
entryRuleDomainModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDomainModelRule()); }
	iv_ruleDomainModel=ruleDomainModel
	{ $current=$iv_ruleDomainModel.current; }
	EOF;

// Rule DomainModel
ruleDomainModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getDomainModelAccess().getElementsElementsParserRuleCall_0());
			}
			lv_elements_0_0=ruleElements
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getDomainModelRule());
				}
				add(
					$current,
					"elements",
					lv_elements_0_0,
					"io.github.jhipster.jdl.dsl.JDL.Elements");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleElements
entryRuleElements returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementsRule()); }
	iv_ruleElements=ruleElements
	{ $current=$iv_ruleElements.current; }
	EOF;

// Rule Elements
ruleElements returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getElementsAccess().getEntityParserRuleCall_0());
		}
		this_Entity_0=ruleEntity
		{
			$current = $this_Entity_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementsAccess().getRelationshipsParserRuleCall_1());
		}
		this_Relationships_1=ruleRelationships
		{
			$current = $this_Relationships_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementsAccess().getGenerationSettingParserRuleCall_2());
		}
		this_GenerationSetting_2=ruleGenerationSetting
		{
			$current = $this_GenerationSetting_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEntity
entryRuleEntity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntityRule()); }
	iv_ruleEntity=ruleEntity
	{ $current=$iv_ruleEntity.current; }
	EOF;

// Rule Entity
ruleEntity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='entity'
		{
			newLeafNode(otherlv_0, grammarAccess.getEntityAccess().getEntityKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getEntityAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEntityRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getEntityAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEntityAccess().getFieldsFieldParserRuleCall_3_0());
				}
				lv_fields_3_0=ruleField
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEntityRule());
					}
					add(
						$current,
						"fields",
						lv_fields_3_0,
						"io.github.jhipster.jdl.dsl.JDL.Field");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getEntityAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getEntityAccess().getFieldsFieldParserRuleCall_4_1_0());
					}
					lv_fields_5_0=ruleField
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEntityRule());
						}
						add(
							$current,
							"fields",
							lv_fields_5_0,
							"io.github.jhipster.jdl.dsl.JDL.Field");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getEntityAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleField
entryRuleField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldRule()); }
	iv_ruleField=ruleField
	{ $current=$iv_ruleField.current; }
	EOF;

// Rule Field
ruleField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFieldAccess().getStringFieldParserRuleCall_0());
		}
		this_StringField_0=ruleStringField
		{
			$current = $this_StringField_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFieldAccess().getNumericFieldParserRuleCall_1());
		}
		this_NumericField_1=ruleNumericField
		{
			$current = $this_NumericField_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFieldAccess().getBooleanFieldParserRuleCall_2());
		}
		this_BooleanField_2=ruleBooleanField
		{
			$current = $this_BooleanField_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFieldAccess().getDateFieldParserRuleCall_3());
		}
		this_DateField_3=ruleDateField
		{
			$current = $this_DateField_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFieldAccess().getBinaryLargeObjectFieldParserRuleCall_4());
		}
		this_BinaryLargeObjectField_4=ruleBinaryLargeObjectField
		{
			$current = $this_BinaryLargeObjectField_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFieldAccess().getEnumFieldParserRuleCall_5());
		}
		this_EnumField_5=ruleEnumField
		{
			$current = $this_EnumField_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEnumField
entryRuleEnumField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumFieldRule()); }
	iv_ruleEnumField=ruleEnumField
	{ $current=$iv_ruleEnumField.current; }
	EOF;

// Rule EnumField
ruleEnumField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getEnumFieldRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getEnumFieldAccess().getEnumTypeEnumTypeCrossReference_0());
			}
		)
	)
;

// Entry rule entryRuleStringField
entryRuleStringField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringFieldRule()); }
	iv_ruleStringField=ruleStringField
	{ $current=$iv_ruleStringField.current; }
	EOF;

// Rule StringField
ruleStringField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getStringFieldAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStringFieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='String'
		{
			newLeafNode(otherlv_1, grammarAccess.getStringFieldAccess().getStringKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStringFieldAccess().getValidatorsStringValidatorsParserRuleCall_2_0());
				}
				lv_validators_2_0=ruleStringValidators
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStringFieldRule());
					}
					set(
						$current,
						"validators",
						lv_validators_2_0,
						"io.github.jhipster.jdl.dsl.JDL.StringValidators");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleNumericField
entryRuleNumericField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumericFieldRule()); }
	iv_ruleNumericField=ruleNumericField
	{ $current=$iv_ruleNumericField.current; }
	EOF;

// Rule NumericField
ruleNumericField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNumericFieldAccess().getIntegerFieldParserRuleCall_0());
		}
		this_IntegerField_0=ruleIntegerField
		{
			$current = $this_IntegerField_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNumericFieldAccess().getLongFieldParserRuleCall_1());
		}
		this_LongField_1=ruleLongField
		{
			$current = $this_LongField_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNumericFieldAccess().getBigDecimalFieldParserRuleCall_2());
		}
		this_BigDecimalField_2=ruleBigDecimalField
		{
			$current = $this_BigDecimalField_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNumericFieldAccess().getFloatFieldParserRuleCall_3());
		}
		this_FloatField_3=ruleFloatField
		{
			$current = $this_FloatField_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNumericFieldAccess().getDoubleFieldParserRuleCall_4());
		}
		this_DoubleField_4=ruleDoubleField
		{
			$current = $this_DoubleField_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIntegerField
entryRuleIntegerField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntegerFieldRule()); }
	iv_ruleIntegerField=ruleIntegerField
	{ $current=$iv_ruleIntegerField.current; }
	EOF;

// Rule IntegerField
ruleIntegerField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getIntegerFieldAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIntegerFieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='Integer'
		{
			newLeafNode(otherlv_1, grammarAccess.getIntegerFieldAccess().getIntegerKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIntegerFieldAccess().getValidatorsNumericValidatorsParserRuleCall_2_0());
				}
				lv_validators_2_0=ruleNumericValidators
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIntegerFieldRule());
					}
					set(
						$current,
						"validators",
						lv_validators_2_0,
						"io.github.jhipster.jdl.dsl.JDL.NumericValidators");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleLongField
entryRuleLongField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLongFieldRule()); }
	iv_ruleLongField=ruleLongField
	{ $current=$iv_ruleLongField.current; }
	EOF;

// Rule LongField
ruleLongField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getLongFieldAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLongFieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='Long'
		{
			newLeafNode(otherlv_1, grammarAccess.getLongFieldAccess().getLongKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLongFieldAccess().getValidatorsNumericValidatorsParserRuleCall_2_0());
				}
				lv_validators_2_0=ruleNumericValidators
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLongFieldRule());
					}
					set(
						$current,
						"validators",
						lv_validators_2_0,
						"io.github.jhipster.jdl.dsl.JDL.NumericValidators");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleBigDecimalField
entryRuleBigDecimalField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBigDecimalFieldRule()); }
	iv_ruleBigDecimalField=ruleBigDecimalField
	{ $current=$iv_ruleBigDecimalField.current; }
	EOF;

// Rule BigDecimalField
ruleBigDecimalField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getBigDecimalFieldAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBigDecimalFieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='BigDecimal'
		{
			newLeafNode(otherlv_1, grammarAccess.getBigDecimalFieldAccess().getBigDecimalKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBigDecimalFieldAccess().getValidatorsNumericValidatorsParserRuleCall_2_0());
				}
				lv_validators_2_0=ruleNumericValidators
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBigDecimalFieldRule());
					}
					set(
						$current,
						"validators",
						lv_validators_2_0,
						"io.github.jhipster.jdl.dsl.JDL.NumericValidators");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleFloatField
entryRuleFloatField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFloatFieldRule()); }
	iv_ruleFloatField=ruleFloatField
	{ $current=$iv_ruleFloatField.current; }
	EOF;

// Rule FloatField
ruleFloatField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getFloatFieldAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFloatFieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='Float'
		{
			newLeafNode(otherlv_1, grammarAccess.getFloatFieldAccess().getFloatKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFloatFieldAccess().getValidatorsNumericValidatorsParserRuleCall_2_0());
				}
				lv_validators_2_0=ruleNumericValidators
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFloatFieldRule());
					}
					set(
						$current,
						"validators",
						lv_validators_2_0,
						"io.github.jhipster.jdl.dsl.JDL.NumericValidators");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleDoubleField
entryRuleDoubleField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDoubleFieldRule()); }
	iv_ruleDoubleField=ruleDoubleField
	{ $current=$iv_ruleDoubleField.current; }
	EOF;

// Rule DoubleField
ruleDoubleField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getDoubleFieldAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDoubleFieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='Double'
		{
			newLeafNode(otherlv_1, grammarAccess.getDoubleFieldAccess().getDoubleKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDoubleFieldAccess().getValidatorsNumericValidatorsParserRuleCall_2_0());
				}
				lv_validators_2_0=ruleNumericValidators
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDoubleFieldRule());
					}
					set(
						$current,
						"validators",
						lv_validators_2_0,
						"io.github.jhipster.jdl.dsl.JDL.NumericValidators");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleBooleanField
entryRuleBooleanField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanFieldRule()); }
	iv_ruleBooleanField=ruleBooleanField
	{ $current=$iv_ruleBooleanField.current; }
	EOF;

// Rule BooleanField
ruleBooleanField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getBooleanFieldAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanFieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='Boolean'
		{
			newLeafNode(otherlv_1, grammarAccess.getBooleanFieldAccess().getBooleanKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBooleanFieldAccess().getValidatorsRequiredValidatorParserRuleCall_2_0());
				}
				lv_validators_2_0=ruleRequiredValidator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBooleanFieldRule());
					}
					set(
						$current,
						"validators",
						lv_validators_2_0,
						"io.github.jhipster.jdl.dsl.JDL.RequiredValidator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleDateField
entryRuleDateField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDateFieldRule()); }
	iv_ruleDateField=ruleDateField
	{ $current=$iv_ruleDateField.current; }
	EOF;

// Rule DateField
ruleDateField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDateFieldAccess().getLocalDateFieldParserRuleCall_0());
		}
		this_LocalDateField_0=ruleLocalDateField
		{
			$current = $this_LocalDateField_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDateFieldAccess().getZonedDateTimeFieldParserRuleCall_1());
		}
		this_ZonedDateTimeField_1=ruleZonedDateTimeField
		{
			$current = $this_ZonedDateTimeField_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleLocalDateField
entryRuleLocalDateField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLocalDateFieldRule()); }
	iv_ruleLocalDateField=ruleLocalDateField
	{ $current=$iv_ruleLocalDateField.current; }
	EOF;

// Rule LocalDateField
ruleLocalDateField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getLocalDateFieldAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLocalDateFieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='LocalDate'
		{
			newLeafNode(otherlv_1, grammarAccess.getLocalDateFieldAccess().getLocalDateKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLocalDateFieldAccess().getValidatorsRequiredValidatorParserRuleCall_2_0());
				}
				lv_validators_2_0=ruleRequiredValidator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLocalDateFieldRule());
					}
					set(
						$current,
						"validators",
						lv_validators_2_0,
						"io.github.jhipster.jdl.dsl.JDL.RequiredValidator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleZonedDateTimeField
entryRuleZonedDateTimeField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getZonedDateTimeFieldRule()); }
	iv_ruleZonedDateTimeField=ruleZonedDateTimeField
	{ $current=$iv_ruleZonedDateTimeField.current; }
	EOF;

// Rule ZonedDateTimeField
ruleZonedDateTimeField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getZonedDateTimeFieldAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getZonedDateTimeFieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='ZonedDateTime'
		{
			newLeafNode(otherlv_1, grammarAccess.getZonedDateTimeFieldAccess().getZonedDateTimeKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getZonedDateTimeFieldAccess().getValidatorsRequiredValidatorParserRuleCall_2_0());
				}
				lv_validators_2_0=ruleRequiredValidator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getZonedDateTimeFieldRule());
					}
					set(
						$current,
						"validators",
						lv_validators_2_0,
						"io.github.jhipster.jdl.dsl.JDL.RequiredValidator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleBinaryLargeObjectField
entryRuleBinaryLargeObjectField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBinaryLargeObjectFieldRule()); }
	iv_ruleBinaryLargeObjectField=ruleBinaryLargeObjectField
	{ $current=$iv_ruleBinaryLargeObjectField.current; }
	EOF;

// Rule BinaryLargeObjectField
ruleBinaryLargeObjectField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBinaryLargeObjectFieldAccess().getBlobFieldParserRuleCall_0());
		}
		this_BlobField_0=ruleBlobField
		{
			$current = $this_BlobField_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBinaryLargeObjectFieldAccess().getAnyBlobFieldParserRuleCall_1());
		}
		this_AnyBlobField_1=ruleAnyBlobField
		{
			$current = $this_AnyBlobField_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBinaryLargeObjectFieldAccess().getImageBlobFieldParserRuleCall_2());
		}
		this_ImageBlobField_2=ruleImageBlobField
		{
			$current = $this_ImageBlobField_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBlobField
entryRuleBlobField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlobFieldRule()); }
	iv_ruleBlobField=ruleBlobField
	{ $current=$iv_ruleBlobField.current; }
	EOF;

// Rule BlobField
ruleBlobField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getBlobFieldAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBlobFieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='Blob'
		{
			newLeafNode(otherlv_1, grammarAccess.getBlobFieldAccess().getBlobKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBlobFieldAccess().getValidatorsBlobValidatorsParserRuleCall_2_0());
				}
				lv_validators_2_0=ruleBlobValidators
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlobFieldRule());
					}
					set(
						$current,
						"validators",
						lv_validators_2_0,
						"io.github.jhipster.jdl.dsl.JDL.BlobValidators");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleAnyBlobField
entryRuleAnyBlobField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnyBlobFieldRule()); }
	iv_ruleAnyBlobField=ruleAnyBlobField
	{ $current=$iv_ruleAnyBlobField.current; }
	EOF;

// Rule AnyBlobField
ruleAnyBlobField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getAnyBlobFieldAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAnyBlobFieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='AnyBlob'
		{
			newLeafNode(otherlv_1, grammarAccess.getAnyBlobFieldAccess().getAnyBlobKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAnyBlobFieldAccess().getValidatorsBlobValidatorsParserRuleCall_2_0());
				}
				lv_validators_2_0=ruleBlobValidators
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAnyBlobFieldRule());
					}
					set(
						$current,
						"validators",
						lv_validators_2_0,
						"io.github.jhipster.jdl.dsl.JDL.BlobValidators");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleImageBlobField
entryRuleImageBlobField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImageBlobFieldRule()); }
	iv_ruleImageBlobField=ruleImageBlobField
	{ $current=$iv_ruleImageBlobField.current; }
	EOF;

// Rule ImageBlobField
ruleImageBlobField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getImageBlobFieldAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getImageBlobFieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='ImageBlob'
		{
			newLeafNode(otherlv_1, grammarAccess.getImageBlobFieldAccess().getImageBlobKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getImageBlobFieldAccess().getValidatorsBlobValidatorsParserRuleCall_2_0());
				}
				lv_validators_2_0=ruleBlobValidators
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getImageBlobFieldRule());
					}
					set(
						$current,
						"validators",
						lv_validators_2_0,
						"io.github.jhipster.jdl.dsl.JDL.BlobValidators");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleRequiredValidator
entryRuleRequiredValidator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRequiredValidatorRule()); }
	iv_ruleRequiredValidator=ruleRequiredValidator
	{ $current=$iv_ruleRequiredValidator.current; }
	EOF;

// Rule RequiredValidator
ruleRequiredValidator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_required_0_0='required'
			{
				newLeafNode(lv_required_0_0, grammarAccess.getRequiredValidatorAccess().getRequiredRequiredKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getRequiredValidatorRule());
				}
				setWithLastConsumed($current, "required", true, "required");
			}
		)
	)
;

// Entry rule entryRuleMinLengthValidator
entryRuleMinLengthValidator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMinLengthValidatorRule()); }
	iv_ruleMinLengthValidator=ruleMinLengthValidator
	{ $current=$iv_ruleMinLengthValidator.current; }
	EOF;

// Rule MinLengthValidator
ruleMinLengthValidator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='minlength'
		{
			newLeafNode(otherlv_0, grammarAccess.getMinLengthValidatorAccess().getMinlengthKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getMinLengthValidatorAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_value_2_0=RULE_INT
				{
					newLeafNode(lv_value_2_0, grammarAccess.getMinLengthValidatorAccess().getValueINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMinLengthValidatorRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getMinLengthValidatorAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleMaxLengthValidator
entryRuleMaxLengthValidator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMaxLengthValidatorRule()); }
	iv_ruleMaxLengthValidator=ruleMaxLengthValidator
	{ $current=$iv_ruleMaxLengthValidator.current; }
	EOF;

// Rule MaxLengthValidator
ruleMaxLengthValidator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='maxlength'
		{
			newLeafNode(otherlv_0, grammarAccess.getMaxLengthValidatorAccess().getMaxlengthKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getMaxLengthValidatorAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_value_2_0=RULE_INT
				{
					newLeafNode(lv_value_2_0, grammarAccess.getMaxLengthValidatorAccess().getValueINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMaxLengthValidatorRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getMaxLengthValidatorAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRulePatternValidator
entryRulePatternValidator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPatternValidatorRule()); }
	iv_rulePatternValidator=rulePatternValidator
	{ $current=$iv_rulePatternValidator.current; }
	EOF;

// Rule PatternValidator
rulePatternValidator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='pattern'
		{
			newLeafNode(otherlv_0, grammarAccess.getPatternValidatorAccess().getPatternKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getPatternValidatorAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_value_2_0=RULE_STRING
				{
					newLeafNode(lv_value_2_0, grammarAccess.getPatternValidatorAccess().getValueSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPatternValidatorRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getPatternValidatorAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleMinValidator
entryRuleMinValidator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMinValidatorRule()); }
	iv_ruleMinValidator=ruleMinValidator
	{ $current=$iv_ruleMinValidator.current; }
	EOF;

// Rule MinValidator
ruleMinValidator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='min'
		{
			newLeafNode(otherlv_0, grammarAccess.getMinValidatorAccess().getMinKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getMinValidatorAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_value_2_0=RULE_INT
				{
					newLeafNode(lv_value_2_0, grammarAccess.getMinValidatorAccess().getValueINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMinValidatorRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getMinValidatorAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleMaxValidator
entryRuleMaxValidator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMaxValidatorRule()); }
	iv_ruleMaxValidator=ruleMaxValidator
	{ $current=$iv_ruleMaxValidator.current; }
	EOF;

// Rule MaxValidator
ruleMaxValidator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='max'
		{
			newLeafNode(otherlv_0, grammarAccess.getMaxValidatorAccess().getMaxKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getMaxValidatorAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_value_2_0=RULE_INT
				{
					newLeafNode(lv_value_2_0, grammarAccess.getMaxValidatorAccess().getValueINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMaxValidatorRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getMaxValidatorAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleMinBytesValidator
entryRuleMinBytesValidator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMinBytesValidatorRule()); }
	iv_ruleMinBytesValidator=ruleMinBytesValidator
	{ $current=$iv_ruleMinBytesValidator.current; }
	EOF;

// Rule MinBytesValidator
ruleMinBytesValidator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='minbytes'
		{
			newLeafNode(otherlv_0, grammarAccess.getMinBytesValidatorAccess().getMinbytesKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getMinBytesValidatorAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_value_2_0=RULE_INT
				{
					newLeafNode(lv_value_2_0, grammarAccess.getMinBytesValidatorAccess().getValueINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMinBytesValidatorRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getMinBytesValidatorAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleMaxBytesValidator
entryRuleMaxBytesValidator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMaxBytesValidatorRule()); }
	iv_ruleMaxBytesValidator=ruleMaxBytesValidator
	{ $current=$iv_ruleMaxBytesValidator.current; }
	EOF;

// Rule MaxBytesValidator
ruleMaxBytesValidator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='maxbytes'
		{
			newLeafNode(otherlv_0, grammarAccess.getMaxBytesValidatorAccess().getMaxbytesKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getMaxBytesValidatorAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_value_2_0=RULE_INT
				{
					newLeafNode(lv_value_2_0, grammarAccess.getMaxBytesValidatorAccess().getValueINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMaxBytesValidatorRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getMaxBytesValidatorAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleStringValidators
entryRuleStringValidators returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringValidatorsRule()); }
	iv_ruleStringValidators=ruleStringValidators
	{ $current=$iv_ruleStringValidators.current; }
	EOF;

// Rule StringValidators
ruleStringValidators returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getStringValidatorsAccess().getRequiredRequiredValidatorParserRuleCall_0_0());
				}
				lv_required_0_0=ruleRequiredValidator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStringValidatorsRule());
					}
					set(
						$current,
						"required",
						lv_required_0_0,
						"io.github.jhipster.jdl.dsl.JDL.RequiredValidator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStringValidatorsAccess().getMinLengthMinLengthValidatorParserRuleCall_1_0());
				}
				lv_minLength_1_0=ruleMinLengthValidator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStringValidatorsRule());
					}
					set(
						$current,
						"minLength",
						lv_minLength_1_0,
						"io.github.jhipster.jdl.dsl.JDL.MinLengthValidator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getStringValidatorsAccess().getMaxlengthMaxLengthValidatorParserRuleCall_2_0());
				}
				lv_maxlength_2_0=ruleMaxLengthValidator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStringValidatorsRule());
					}
					set(
						$current,
						"maxlength",
						lv_maxlength_2_0,
						"io.github.jhipster.jdl.dsl.JDL.MaxLengthValidator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getStringValidatorsAccess().getPatternPatternValidatorParserRuleCall_3_0());
				}
				lv_pattern_3_0=rulePatternValidator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStringValidatorsRule());
					}
					set(
						$current,
						"pattern",
						lv_pattern_3_0,
						"io.github.jhipster.jdl.dsl.JDL.PatternValidator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleNumericValidators
entryRuleNumericValidators returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumericValidatorsRule()); }
	iv_ruleNumericValidators=ruleNumericValidators
	{ $current=$iv_ruleNumericValidators.current; }
	EOF;

// Rule NumericValidators
ruleNumericValidators returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getNumericValidatorsAccess().getRequiredRequiredValidatorParserRuleCall_0_0());
				}
				lv_required_0_0=ruleRequiredValidator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumericValidatorsRule());
					}
					set(
						$current,
						"required",
						lv_required_0_0,
						"io.github.jhipster.jdl.dsl.JDL.RequiredValidator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getNumericValidatorsAccess().getMinlengthMinValidatorParserRuleCall_1_0());
				}
				lv_minlength_1_0=ruleMinValidator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumericValidatorsRule());
					}
					set(
						$current,
						"minlength",
						lv_minlength_1_0,
						"io.github.jhipster.jdl.dsl.JDL.MinValidator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getNumericValidatorsAccess().getMaxlengthMaxValidatorParserRuleCall_2_0());
				}
				lv_maxlength_2_0=ruleMaxValidator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumericValidatorsRule());
					}
					set(
						$current,
						"maxlength",
						lv_maxlength_2_0,
						"io.github.jhipster.jdl.dsl.JDL.MaxValidator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleBlobValidators
entryRuleBlobValidators returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlobValidatorsRule()); }
	iv_ruleBlobValidators=ruleBlobValidators
	{ $current=$iv_ruleBlobValidators.current; }
	EOF;

// Rule BlobValidators
ruleBlobValidators returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getBlobValidatorsAccess().getRequiredRequiredValidatorParserRuleCall_0_0());
				}
				lv_required_0_0=ruleRequiredValidator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlobValidatorsRule());
					}
					set(
						$current,
						"required",
						lv_required_0_0,
						"io.github.jhipster.jdl.dsl.JDL.RequiredValidator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBlobValidatorsAccess().getMinbytesMinBytesValidatorParserRuleCall_1_0());
				}
				lv_minbytes_1_0=ruleMinBytesValidator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlobValidatorsRule());
					}
					set(
						$current,
						"minbytes",
						lv_minbytes_1_0,
						"io.github.jhipster.jdl.dsl.JDL.MinBytesValidator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getBlobValidatorsAccess().getMaxbytesMaxBytesValidatorParserRuleCall_2_0());
				}
				lv_maxbytes_2_0=ruleMaxBytesValidator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlobValidatorsRule());
					}
					set(
						$current,
						"maxbytes",
						lv_maxbytes_2_0,
						"io.github.jhipster.jdl.dsl.JDL.MaxBytesValidator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleRelationships
entryRuleRelationships returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationshipsRule()); }
	iv_ruleRelationships=ruleRelationships
	{ $current=$iv_ruleRelationships.current; }
	EOF;

// Rule Relationships
ruleRelationships returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='relationship'
		{
			newLeafNode(otherlv_0, grammarAccess.getRelationshipsAccess().getRelationshipKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationshipsAccess().getCardinalityCardinalityEnumRuleCall_1_0());
				}
				lv_cardinality_1_0=ruleCardinality
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationshipsRule());
					}
					set(
						$current,
						"cardinality",
						lv_cardinality_1_0,
						"io.github.jhipster.jdl.dsl.JDL.Cardinality");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getRelationshipsAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationshipsAccess().getRelationshipsRelationshipParserRuleCall_3_0());
				}
				lv_relationships_3_0=ruleRelationship
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationshipsRule());
					}
					add(
						$current,
						"relationships",
						lv_relationships_3_0,
						"io.github.jhipster.jdl.dsl.JDL.Relationship");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getRelationshipsAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleRelationship
entryRuleRelationship returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationshipRule()); }
	iv_ruleRelationship=ruleRelationship
	{ $current=$iv_ruleRelationship.current; }
	EOF;

// Rule Relationship
ruleRelationship returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationshipAccess().getFromEntityEntityParserRuleCall_0_0());
				}
				lv_fromEntity_0_0=ruleEntity
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationshipRule());
					}
					set(
						$current,
						"fromEntity",
						lv_fromEntity_0_0,
						"io.github.jhipster.jdl.dsl.JDL.Entity");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationshipAccess().getFromNameRelationshipNameParserRuleCall_1_0());
				}
				lv_fromName_1_0=ruleRelationshipName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationshipRule());
					}
					set(
						$current,
						"fromName",
						lv_fromName_1_0,
						"io.github.jhipster.jdl.dsl.JDL.RelationshipName");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_2='to'
		{
			newLeafNode(otherlv_2, grammarAccess.getRelationshipAccess().getToKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationshipAccess().getToEntityEntityParserRuleCall_3_0());
				}
				lv_toEntity_3_0=ruleEntity
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationshipRule());
					}
					set(
						$current,
						"toEntity",
						lv_toEntity_3_0,
						"io.github.jhipster.jdl.dsl.JDL.Entity");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationshipAccess().getToNameRelationshipNameParserRuleCall_4_0());
				}
				lv_toName_4_0=ruleRelationshipName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationshipRule());
					}
					set(
						$current,
						"toName",
						lv_toName_4_0,
						"io.github.jhipster.jdl.dsl.JDL.RelationshipName");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleRelationshipName
entryRuleRelationshipName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationshipNameRule()); }
	iv_ruleRelationshipName=ruleRelationshipName
	{ $current=$iv_ruleRelationshipName.current; }
	EOF;

// Rule RelationshipName
ruleRelationshipName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='{'
		{
			newLeafNode(otherlv_0, grammarAccess.getRelationshipNameAccess().getLeftCurlyBracketKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRelationshipNameAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRelationshipNameRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='}'
		{
			newLeafNode(otherlv_2, grammarAccess.getRelationshipNameAccess().getRightCurlyBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleGenerationSetting
entryRuleGenerationSetting returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGenerationSettingRule()); }
	iv_ruleGenerationSetting=ruleGenerationSetting
	{ $current=$iv_ruleGenerationSetting.current; }
	EOF;

// Rule GenerationSetting
ruleGenerationSetting returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getGenerationSettingAccess().getServiceGenerationSettingParserRuleCall_0());
		}
		this_ServiceGenerationSetting_0=ruleServiceGenerationSetting
		{
			$current = $this_ServiceGenerationSetting_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getGenerationSettingAccess().getDTOGenerationSettingParserRuleCall_1());
		}
		this_DTOGenerationSetting_1=ruleDTOGenerationSetting
		{
			$current = $this_DTOGenerationSetting_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getGenerationSettingAccess().getPaginateGenerationSettingParserRuleCall_2());
		}
		this_PaginateGenerationSetting_2=rulePaginateGenerationSetting
		{
			$current = $this_PaginateGenerationSetting_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getGenerationSettingAccess().getAngularSuffixGenerationSettingParserRuleCall_3());
		}
		this_AngularSuffixGenerationSetting_3=ruleAngularSuffixGenerationSetting
		{
			$current = $this_AngularSuffixGenerationSetting_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleServiceGenerationSetting
entryRuleServiceGenerationSetting returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getServiceGenerationSettingRule()); }
	iv_ruleServiceGenerationSetting=ruleServiceGenerationSetting
	{ $current=$iv_ruleServiceGenerationSetting.current; }
	EOF;

// Rule ServiceGenerationSetting
ruleServiceGenerationSetting returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='service'
		{
			newLeafNode(otherlv_0, grammarAccess.getServiceGenerationSettingAccess().getServiceKeyword_0());
		}
		(
			(
				lv_entities_1_0=RULE_ID
				{
					newLeafNode(lv_entities_1_0, grammarAccess.getServiceGenerationSettingAccess().getEntitiesIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getServiceGenerationSettingRule());
					}
					addWithLastConsumed(
						$current,
						"entities",
						lv_entities_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getServiceGenerationSettingAccess().getCommaKeyword_2_0());
			}
			(
				(
					lv_entities_3_0=RULE_ID
					{
						newLeafNode(lv_entities_3_0, grammarAccess.getServiceGenerationSettingAccess().getEntitiesIDTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getServiceGenerationSettingRule());
						}
						addWithLastConsumed(
							$current,
							"entities",
							lv_entities_3_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)*
		otherlv_4='with'
		{
			newLeafNode(otherlv_4, grammarAccess.getServiceGenerationSettingAccess().getWithKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getServiceGenerationSettingAccess().getServiceTypeServiceTypeEnumRuleCall_4_0());
				}
				lv_serviceType_5_0=ruleServiceType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getServiceGenerationSettingRule());
					}
					set(
						$current,
						"serviceType",
						lv_serviceType_5_0,
						"io.github.jhipster.jdl.dsl.JDL.ServiceType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDTOGenerationSetting
entryRuleDTOGenerationSetting returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDTOGenerationSettingRule()); }
	iv_ruleDTOGenerationSetting=ruleDTOGenerationSetting
	{ $current=$iv_ruleDTOGenerationSetting.current; }
	EOF;

// Rule DTOGenerationSetting
ruleDTOGenerationSetting returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='dto'
		{
			newLeafNode(otherlv_0, grammarAccess.getDTOGenerationSettingAccess().getDtoKeyword_0());
		}
		(
			(
				lv_entities_1_0=RULE_ID
				{
					newLeafNode(lv_entities_1_0, grammarAccess.getDTOGenerationSettingAccess().getEntitiesIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDTOGenerationSettingRule());
					}
					addWithLastConsumed(
						$current,
						"entities",
						lv_entities_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getDTOGenerationSettingAccess().getCommaKeyword_2_0());
			}
			(
				(
					lv_entities_3_0=RULE_ID
					{
						newLeafNode(lv_entities_3_0, grammarAccess.getDTOGenerationSettingAccess().getEntitiesIDTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDTOGenerationSettingRule());
						}
						addWithLastConsumed(
							$current,
							"entities",
							lv_entities_3_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)*
		otherlv_4='with'
		{
			newLeafNode(otherlv_4, grammarAccess.getDTOGenerationSettingAccess().getWithKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDTOGenerationSettingAccess().getDtoTypeDTOTypeEnumRuleCall_4_0());
				}
				lv_dtoType_5_0=ruleDTOType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDTOGenerationSettingRule());
					}
					set(
						$current,
						"dtoType",
						lv_dtoType_5_0,
						"io.github.jhipster.jdl.dsl.JDL.DTOType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePaginateGenerationSetting
entryRulePaginateGenerationSetting returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPaginateGenerationSettingRule()); }
	iv_rulePaginateGenerationSetting=rulePaginateGenerationSetting
	{ $current=$iv_rulePaginateGenerationSetting.current; }
	EOF;

// Rule PaginateGenerationSetting
rulePaginateGenerationSetting returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='paginate'
		{
			newLeafNode(otherlv_0, grammarAccess.getPaginateGenerationSettingAccess().getPaginateKeyword_0());
		}
		(
			(
				lv_entities_1_0=RULE_ID
				{
					newLeafNode(lv_entities_1_0, grammarAccess.getPaginateGenerationSettingAccess().getEntitiesIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPaginateGenerationSettingRule());
					}
					addWithLastConsumed(
						$current,
						"entities",
						lv_entities_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getPaginateGenerationSettingAccess().getCommaKeyword_2_0());
			}
			(
				(
					lv_entities_3_0=RULE_ID
					{
						newLeafNode(lv_entities_3_0, grammarAccess.getPaginateGenerationSettingAccess().getEntitiesIDTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPaginateGenerationSettingRule());
						}
						addWithLastConsumed(
							$current,
							"entities",
							lv_entities_3_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)*
		otherlv_4='with'
		{
			newLeafNode(otherlv_4, grammarAccess.getPaginateGenerationSettingAccess().getWithKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPaginateGenerationSettingAccess().getPaginateTypePaginateTypeEnumRuleCall_4_0());
				}
				lv_paginateType_5_0=rulePaginateType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPaginateGenerationSettingRule());
					}
					set(
						$current,
						"paginateType",
						lv_paginateType_5_0,
						"io.github.jhipster.jdl.dsl.JDL.PaginateType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAngularSuffixGenerationSetting
entryRuleAngularSuffixGenerationSetting returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAngularSuffixGenerationSettingRule()); }
	iv_ruleAngularSuffixGenerationSetting=ruleAngularSuffixGenerationSetting
	{ $current=$iv_ruleAngularSuffixGenerationSetting.current; }
	EOF;

// Rule AngularSuffixGenerationSetting
ruleAngularSuffixGenerationSetting returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='angularSuffix'
		{
			newLeafNode(otherlv_0, grammarAccess.getAngularSuffixGenerationSettingAccess().getAngularSuffixKeyword_0());
		}
		(
			(
				lv_entities_1_0=RULE_ID
				{
					newLeafNode(lv_entities_1_0, grammarAccess.getAngularSuffixGenerationSettingAccess().getEntitiesIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAngularSuffixGenerationSettingRule());
					}
					addWithLastConsumed(
						$current,
						"entities",
						lv_entities_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getAngularSuffixGenerationSettingAccess().getCommaKeyword_2_0());
			}
			(
				(
					lv_entities_3_0=RULE_ID
					{
						newLeafNode(lv_entities_3_0, grammarAccess.getAngularSuffixGenerationSettingAccess().getEntitiesIDTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAngularSuffixGenerationSettingRule());
						}
						addWithLastConsumed(
							$current,
							"entities",
							lv_entities_3_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)*
		otherlv_4='with'
		{
			newLeafNode(otherlv_4, grammarAccess.getAngularSuffixGenerationSettingAccess().getWithKeyword_3());
		}
		(
			(
				lv_id_5_0=RULE_ID
				{
					newLeafNode(lv_id_5_0, grammarAccess.getAngularSuffixGenerationSettingAccess().getIdIDTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAngularSuffixGenerationSettingRule());
					}
					setWithLastConsumed(
						$current,
						"id",
						lv_id_5_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Rule Cardinality
ruleCardinality returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='OneToMany'
			{
				$current = grammarAccess.getCardinalityAccess().getOneToManyEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getCardinalityAccess().getOneToManyEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='ManyToOne'
			{
				$current = grammarAccess.getCardinalityAccess().getManyToOneEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getCardinalityAccess().getManyToOneEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='OneToOne'
			{
				$current = grammarAccess.getCardinalityAccess().getOneToOneEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getCardinalityAccess().getOneToOneEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='ManyToMany'
			{
				$current = grammarAccess.getCardinalityAccess().getManyToManyEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getCardinalityAccess().getManyToManyEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule ServiceType
ruleServiceType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='serviceClass'
			{
				$current = grammarAccess.getServiceTypeAccess().getServiceClassEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getServiceTypeAccess().getServiceClassEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='serviceImpl'
			{
				$current = grammarAccess.getServiceTypeAccess().getServiceImplEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getServiceTypeAccess().getServiceImplEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule DTOType
ruleDTOType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='mapstruct'
		{
			$current = grammarAccess.getDTOTypeAccess().getMapstructEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getDTOTypeAccess().getMapstructEnumLiteralDeclaration());
		}
	)
;

// Rule PaginateType
rulePaginateType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='pagination'
			{
				$current = grammarAccess.getPaginateTypeAccess().getPaginationEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getPaginateTypeAccess().getPaginationEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='infiniteScroll'
			{
				$current = grammarAccess.getPaginateTypeAccess().getInfiniteScrollEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getPaginateTypeAccess().getInfiniteScrollEnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
