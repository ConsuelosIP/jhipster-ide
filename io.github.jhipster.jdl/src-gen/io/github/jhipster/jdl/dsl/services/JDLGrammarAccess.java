/*
 * generated by Xtext 2.10.0
 */
package io.github.jhipster.jdl.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class JDLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DomainModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.dsl.JDL.DomainModel");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsElementsParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//DomainModel:
		//	elements+=Elements*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Elements*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//Elements
		public RuleCall getElementsElementsParserRuleCall_0() { return cElementsElementsParserRuleCall_0; }
	}
	public class ElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.dsl.JDL.Elements");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRelationshipsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGenerationSettingParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Elements:
		//	Entity | Relationships | GenerationSetting;
		@Override public ParserRule getRule() { return rule; }
		
		//Entity | Relationships | GenerationSetting
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Entity
		public RuleCall getEntityParserRuleCall_0() { return cEntityParserRuleCall_0; }
		
		//Relationships
		public RuleCall getRelationshipsParserRuleCall_1() { return cRelationshipsParserRuleCall_1; }
		
		//GenerationSetting
		public RuleCall getGenerationSettingParserRuleCall_2() { return cGenerationSettingParserRuleCall_2; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.dsl.JDL.Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFieldsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFieldsFieldParserRuleCall_3_0 = (RuleCall)cFieldsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFieldsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFieldsFieldParserRuleCall_4_1_0 = (RuleCall)cFieldsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		/// * =========================================================================
		// * ENTITY
		// * ========================================================================= * / Entity:
		//	'entity' name=ID '{'
		//	fields+=Field (',' fields+=Field)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'entity' name=ID '{' fields+=Field (',' fields+=Field)* '}'
		public Group getGroup() { return cGroup; }
		
		//'entity'
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//fields+=Field
		public Assignment getFieldsAssignment_3() { return cFieldsAssignment_3; }
		
		//Field
		public RuleCall getFieldsFieldParserRuleCall_3_0() { return cFieldsFieldParserRuleCall_3_0; }
		
		//(',' fields+=Field)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//fields+=Field
		public Assignment getFieldsAssignment_4_1() { return cFieldsAssignment_4_1; }
		
		//Field
		public RuleCall getFieldsFieldParserRuleCall_4_1_0() { return cFieldsFieldParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.dsl.JDL.Field");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumericFieldParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanFieldParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDateFieldParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBinaryLargeObjectFieldParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cEnumFieldParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Field:
		//	StringField | NumericField | BooleanField | DateField | BinaryLargeObjectField | EnumField;
		@Override public ParserRule getRule() { return rule; }
		
		//StringField | NumericField | BooleanField | DateField | BinaryLargeObjectField | EnumField
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StringField
		public RuleCall getStringFieldParserRuleCall_0() { return cStringFieldParserRuleCall_0; }
		
		//NumericField
		public RuleCall getNumericFieldParserRuleCall_1() { return cNumericFieldParserRuleCall_1; }
		
		//BooleanField
		public RuleCall getBooleanFieldParserRuleCall_2() { return cBooleanFieldParserRuleCall_2; }
		
		//DateField
		public RuleCall getDateFieldParserRuleCall_3() { return cDateFieldParserRuleCall_3; }
		
		//BinaryLargeObjectField
		public RuleCall getBinaryLargeObjectFieldParserRuleCall_4() { return cBinaryLargeObjectFieldParserRuleCall_4; }
		
		//EnumField
		public RuleCall getEnumFieldParserRuleCall_5() { return cEnumFieldParserRuleCall_5; }
	}
	public class EnumFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.dsl.JDL.EnumField");
		private final Assignment cEnumTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cEnumTypeEnumTypeCrossReference_0 = (CrossReference)cEnumTypeAssignment.eContents().get(0);
		private final RuleCall cEnumTypeEnumTypeIDTerminalRuleCall_0_1 = (RuleCall)cEnumTypeEnumTypeCrossReference_0.eContents().get(1);
		
		//EnumField:
		//	enumType=[EnumType];
		@Override public ParserRule getRule() { return rule; }
		
		//enumType=[EnumType]
		public Assignment getEnumTypeAssignment() { return cEnumTypeAssignment; }
		
		//[EnumType]
		public CrossReference getEnumTypeEnumTypeCrossReference_0() { return cEnumTypeEnumTypeCrossReference_0; }
		
		//ID
		public RuleCall getEnumTypeEnumTypeIDTerminalRuleCall_0_1() { return cEnumTypeEnumTypeIDTerminalRuleCall_0_1; }
	}
	public class StringFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.dsl.JDL.StringField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValidatorsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValidatorsStringValidatorsParserRuleCall_2_0 = (RuleCall)cValidatorsAssignment_2.eContents().get(0);
		
		//StringField:
		//	name=ID 'String' validators=StringValidators?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'String' validators=StringValidators?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'String'
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }
		
		//validators=StringValidators?
		public Assignment getValidatorsAssignment_2() { return cValidatorsAssignment_2; }
		
		//StringValidators
		public RuleCall getValidatorsStringValidatorsParserRuleCall_2_0() { return cValidatorsStringValidatorsParserRuleCall_2_0; }
	}
	public class NumericFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.dsl.JDL.NumericField");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLongFieldParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBigDecimalFieldParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFloatFieldParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDoubleFieldParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//NumericField:
		//	IntegerField | LongField | BigDecimalField | FloatField | DoubleField;
		@Override public ParserRule getRule() { return rule; }
		
		//IntegerField | LongField | BigDecimalField | FloatField | DoubleField
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntegerField
		public RuleCall getIntegerFieldParserRuleCall_0() { return cIntegerFieldParserRuleCall_0; }
		
		//LongField
		public RuleCall getLongFieldParserRuleCall_1() { return cLongFieldParserRuleCall_1; }
		
		//BigDecimalField
		public RuleCall getBigDecimalFieldParserRuleCall_2() { return cBigDecimalFieldParserRuleCall_2; }
		
		//FloatField
		public RuleCall getFloatFieldParserRuleCall_3() { return cFloatFieldParserRuleCall_3; }
		
		//DoubleField
		public RuleCall getDoubleFieldParserRuleCall_4() { return cDoubleFieldParserRuleCall_4; }
	}
	public class IntegerFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.dsl.JDL.IntegerField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cIntegerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValidatorsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValidatorsNumericValidatorsParserRuleCall_2_0 = (RuleCall)cValidatorsAssignment_2.eContents().get(0);
		
		//IntegerField:
		//	name=ID 'Integer' validators=NumericValidators?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'Integer' validators=NumericValidators?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'Integer'
		public Keyword getIntegerKeyword_1() { return cIntegerKeyword_1; }
		
		//validators=NumericValidators?
		public Assignment getValidatorsAssignment_2() { return cValidatorsAssignment_2; }
		
		//NumericValidators
		public RuleCall getValidatorsNumericValidatorsParserRuleCall_2_0() { return cValidatorsNumericValidatorsParserRuleCall_2_0; }
	}
	public class LongFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.dsl.JDL.LongField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLongKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValidatorsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValidatorsNumericValidatorsParserRuleCall_2_0 = (RuleCall)cValidatorsAssignment_2.eContents().get(0);
		
		//LongField:
		//	name=ID 'Long' validators=NumericValidators?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'Long' validators=NumericValidators?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'Long'
		public Keyword getLongKeyword_1() { return cLongKeyword_1; }
		
		//validators=NumericValidators?
		public Assignment getValidatorsAssignment_2() { return cValidatorsAssignment_2; }
		
		//NumericValidators
		public RuleCall getValidatorsNumericValidatorsParserRuleCall_2_0() { return cValidatorsNumericValidatorsParserRuleCall_2_0; }
	}
	public class BigDecimalFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.dsl.JDL.BigDecimalField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cBigDecimalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValidatorsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValidatorsNumericValidatorsParserRuleCall_2_0 = (RuleCall)cValidatorsAssignment_2.eContents().get(0);
		
		//BigDecimalField:
		//	name=ID 'BigDecimal' validators=NumericValidators?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'BigDecimal' validators=NumericValidators?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'BigDecimal'
		public Keyword getBigDecimalKeyword_1() { return cBigDecimalKeyword_1; }
		
		//validators=NumericValidators?
		public Assignment getValidatorsAssignment_2() { return cValidatorsAssignment_2; }
		
		//NumericValidators
		public RuleCall getValidatorsNumericValidatorsParserRuleCall_2_0() { return cValidatorsNumericValidatorsParserRuleCall_2_0; }
	}
	public class FloatFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.dsl.JDL.FloatField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cFloatKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValidatorsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValidatorsNumericValidatorsParserRuleCall_2_0 = (RuleCall)cValidatorsAssignment_2.eContents().get(0);
		
		//FloatField:
		//	name=ID 'Float' validators=NumericValidators?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'Float' validators=NumericValidators?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'Float'
		public Keyword getFloatKeyword_1() { return cFloatKeyword_1; }
		
		//validators=NumericValidators?
		public Assignment getValidatorsAssignment_2() { return cValidatorsAssignment_2; }
		
		//NumericValidators
		public RuleCall getValidatorsNumericValidatorsParserRuleCall_2_0() { return cValidatorsNumericValidatorsParserRuleCall_2_0; }
	}
	public class DoubleFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.dsl.JDL.DoubleField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cDoubleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValidatorsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValidatorsNumericValidatorsParserRuleCall_2_0 = (RuleCall)cValidatorsAssignment_2.eContents().get(0);
		
		//DoubleField:
		//	name=ID 'Double' validators=NumericValidators?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'Double' validators=NumericValidators?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'Double'
		public Keyword getDoubleKeyword_1() { return cDoubleKeyword_1; }
		
		//validators=NumericValidators?
		public Assignment getValidatorsAssignment_2() { return cValidatorsAssignment_2; }
		
		//NumericValidators
		public RuleCall getValidatorsNumericValidatorsParserRuleCall_2_0() { return cValidatorsNumericValidatorsParserRuleCall_2_0; }
	}
	public class BooleanFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.dsl.JDL.BooleanField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cBooleanKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValidatorsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValidatorsRequiredValidatorParserRuleCall_2_0 = (RuleCall)cValidatorsAssignment_2.eContents().get(0);
		
		//BooleanField:
		//	name=ID 'Boolean' validators=RequiredValidator?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'Boolean' validators=RequiredValidator?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'Boolean'
		public Keyword getBooleanKeyword_1() { return cBooleanKeyword_1; }
		
		//validators=RequiredValidator?
		public Assignment getValidatorsAssignment_2() { return cValidatorsAssignment_2; }
		
		//RequiredValidator
		public RuleCall getValidatorsRequiredValidatorParserRuleCall_2_0() { return cValidatorsRequiredValidatorParserRuleCall_2_0; }
	}
	public class DateFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.dsl.JDL.DateField");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLocalDateFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cZonedDateTimeFieldParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DateField:
		//	LocalDateField | ZonedDateTimeField;
		@Override public ParserRule getRule() { return rule; }
		
		//LocalDateField | ZonedDateTimeField
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LocalDateField
		public RuleCall getLocalDateFieldParserRuleCall_0() { return cLocalDateFieldParserRuleCall_0; }
		
		//ZonedDateTimeField
		public RuleCall getZonedDateTimeFieldParserRuleCall_1() { return cZonedDateTimeFieldParserRuleCall_1; }
	}
	public class LocalDateFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.dsl.JDL.LocalDateField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLocalDateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValidatorsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValidatorsRequiredValidatorParserRuleCall_2_0 = (RuleCall)cValidatorsAssignment_2.eContents().get(0);
		
		//LocalDateField:
		//	name=ID 'LocalDate' validators=RequiredValidator?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'LocalDate' validators=RequiredValidator?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'LocalDate'
		public Keyword getLocalDateKeyword_1() { return cLocalDateKeyword_1; }
		
		//validators=RequiredValidator?
		public Assignment getValidatorsAssignment_2() { return cValidatorsAssignment_2; }
		
		//RequiredValidator
		public RuleCall getValidatorsRequiredValidatorParserRuleCall_2_0() { return cValidatorsRequiredValidatorParserRuleCall_2_0; }
	}
	public class ZonedDateTimeFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.dsl.JDL.ZonedDateTimeField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cZonedDateTimeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValidatorsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValidatorsRequiredValidatorParserRuleCall_2_0 = (RuleCall)cValidatorsAssignment_2.eContents().get(0);
		
		//ZonedDateTimeField:
		//	name=ID 'ZonedDateTime' validators=RequiredValidator?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'ZonedDateTime' validators=RequiredValidator?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'ZonedDateTime'
		public Keyword getZonedDateTimeKeyword_1() { return cZonedDateTimeKeyword_1; }
		
		//validators=RequiredValidator?
		public Assignment getValidatorsAssignment_2() { return cValidatorsAssignment_2; }
		
		//RequiredValidator
		public RuleCall getValidatorsRequiredValidatorParserRuleCall_2_0() { return cValidatorsRequiredValidatorParserRuleCall_2_0; }
	}
	public class BinaryLargeObjectFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.dsl.JDL.BinaryLargeObjectField");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBlobFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAnyBlobFieldParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cImageBlobFieldParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//BinaryLargeObjectField:
		//	BlobField | AnyBlobField | ImageBlobField;
		@Override public ParserRule getRule() { return rule; }
		
		//BlobField | AnyBlobField | ImageBlobField
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BlobField
		public RuleCall getBlobFieldParserRuleCall_0() { return cBlobFieldParserRuleCall_0; }
		
		//AnyBlobField
		public RuleCall getAnyBlobFieldParserRuleCall_1() { return cAnyBlobFieldParserRuleCall_1; }
		
		//ImageBlobField
		public RuleCall getImageBlobFieldParserRuleCall_2() { return cImageBlobFieldParserRuleCall_2; }
	}
	public class BlobFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.dsl.JDL.BlobField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cBlobKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValidatorsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValidatorsBlobValidatorsParserRuleCall_2_0 = (RuleCall)cValidatorsAssignment_2.eContents().get(0);
		
		//BlobField:
		//	name=ID 'Blob' validators=BlobValidators?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'Blob' validators=BlobValidators?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'Blob'
		public Keyword getBlobKeyword_1() { return cBlobKeyword_1; }
		
		//validators=BlobValidators?
		public Assignment getValidatorsAssignment_2() { return cValidatorsAssignment_2; }
		
		//BlobValidators
		public RuleCall getValidatorsBlobValidatorsParserRuleCall_2_0() { return cValidatorsBlobValidatorsParserRuleCall_2_0; }
	}
	public class AnyBlobFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.dsl.JDL.AnyBlobField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cAnyBlobKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValidatorsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValidatorsBlobValidatorsParserRuleCall_2_0 = (RuleCall)cValidatorsAssignment_2.eContents().get(0);
		
		//AnyBlobField:
		//	name=ID 'AnyBlob' validators=BlobValidators?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'AnyBlob' validators=BlobValidators?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'AnyBlob'
		public Keyword getAnyBlobKeyword_1() { return cAnyBlobKeyword_1; }
		
		//validators=BlobValidators?
		public Assignment getValidatorsAssignment_2() { return cValidatorsAssignment_2; }
		
		//BlobValidators
		public RuleCall getValidatorsBlobValidatorsParserRuleCall_2_0() { return cValidatorsBlobValidatorsParserRuleCall_2_0; }
	}
	public class ImageBlobFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.dsl.JDL.ImageBlobField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cImageBlobKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValidatorsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValidatorsBlobValidatorsParserRuleCall_2_0 = (RuleCall)cValidatorsAssignment_2.eContents().get(0);
		
		//ImageBlobField:
		//	name=ID 'ImageBlob' validators=BlobValidators?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'ImageBlob' validators=BlobValidators?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'ImageBlob'
		public Keyword getImageBlobKeyword_1() { return cImageBlobKeyword_1; }
		
		//validators=BlobValidators?
		public Assignment getValidatorsAssignment_2() { return cValidatorsAssignment_2; }
		
		//BlobValidators
		public RuleCall getValidatorsBlobValidatorsParserRuleCall_2_0() { return cValidatorsBlobValidatorsParserRuleCall_2_0; }
	}
	public class RequiredValidatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.dsl.JDL.RequiredValidator");
		private final Assignment cRequiredAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cRequiredRequiredKeyword_0 = (Keyword)cRequiredAssignment.eContents().get(0);
		
		/// * =========================================================================
		// * VALIDATORS
		// * ========================================================================= * / RequiredValidator:
		//	required?='required';
		@Override public ParserRule getRule() { return rule; }
		
		//required?='required'
		public Assignment getRequiredAssignment() { return cRequiredAssignment; }
		
		//'required'
		public Keyword getRequiredRequiredKeyword_0() { return cRequiredRequiredKeyword_0; }
	}
	public class MinLengthValidatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.dsl.JDL.MinLengthValidator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMinlengthKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MinLengthValidator:
		//	'minlength' '(' value=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'minlength' '(' value=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'minlength'
		public Keyword getMinlengthKeyword_0() { return cMinlengthKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class MaxLengthValidatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.dsl.JDL.MaxLengthValidator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMaxlengthKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MaxLengthValidator:
		//	'maxlength' '(' value=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'maxlength' '(' value=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'maxlength'
		public Keyword getMaxlengthKeyword_0() { return cMaxlengthKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class PatternValidatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.dsl.JDL.PatternValidator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPatternKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PatternValidator:
		//	'pattern' '(' value=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'pattern' '(' value=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//'pattern'
		public Keyword getPatternKeyword_0() { return cPatternKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class MinValidatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.dsl.JDL.MinValidator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMinKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MinValidator:
		//	'min' '(' value=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'min' '(' value=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'min'
		public Keyword getMinKeyword_0() { return cMinKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class MaxValidatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.dsl.JDL.MaxValidator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMaxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MaxValidator:
		//	'max' '(' value=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'max' '(' value=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'max'
		public Keyword getMaxKeyword_0() { return cMaxKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class MinBytesValidatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.dsl.JDL.MinBytesValidator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMinbytesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MinBytesValidator:
		//	'minbytes' '(' value=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'minbytes' '(' value=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'minbytes'
		public Keyword getMinbytesKeyword_0() { return cMinbytesKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class MaxBytesValidatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.dsl.JDL.MaxBytesValidator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMaxbytesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MaxBytesValidator:
		//	'maxbytes' '(' value=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'maxbytes' '(' value=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'maxbytes'
		public Keyword getMaxbytesKeyword_0() { return cMaxbytesKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class StringValidatorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.dsl.JDL.StringValidators");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRequiredAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRequiredRequiredValidatorParserRuleCall_0_0 = (RuleCall)cRequiredAssignment_0.eContents().get(0);
		private final Assignment cMinLengthAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMinLengthMinLengthValidatorParserRuleCall_1_0 = (RuleCall)cMinLengthAssignment_1.eContents().get(0);
		private final Assignment cMaxlengthAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMaxlengthMaxLengthValidatorParserRuleCall_2_0 = (RuleCall)cMaxlengthAssignment_2.eContents().get(0);
		private final Assignment cPatternAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPatternPatternValidatorParserRuleCall_3_0 = (RuleCall)cPatternAssignment_3.eContents().get(0);
		
		//StringValidators:
		//	required=RequiredValidator minLength=MinLengthValidator?
		//	maxlength=MaxLengthValidator? pattern=PatternValidator?;
		@Override public ParserRule getRule() { return rule; }
		
		//required=RequiredValidator minLength=MinLengthValidator? maxlength=MaxLengthValidator? pattern=PatternValidator?
		public Group getGroup() { return cGroup; }
		
		//required=RequiredValidator
		public Assignment getRequiredAssignment_0() { return cRequiredAssignment_0; }
		
		//RequiredValidator
		public RuleCall getRequiredRequiredValidatorParserRuleCall_0_0() { return cRequiredRequiredValidatorParserRuleCall_0_0; }
		
		//minLength=MinLengthValidator?
		public Assignment getMinLengthAssignment_1() { return cMinLengthAssignment_1; }
		
		//MinLengthValidator
		public RuleCall getMinLengthMinLengthValidatorParserRuleCall_1_0() { return cMinLengthMinLengthValidatorParserRuleCall_1_0; }
		
		//maxlength=MaxLengthValidator?
		public Assignment getMaxlengthAssignment_2() { return cMaxlengthAssignment_2; }
		
		//MaxLengthValidator
		public RuleCall getMaxlengthMaxLengthValidatorParserRuleCall_2_0() { return cMaxlengthMaxLengthValidatorParserRuleCall_2_0; }
		
		//pattern=PatternValidator?
		public Assignment getPatternAssignment_3() { return cPatternAssignment_3; }
		
		//PatternValidator
		public RuleCall getPatternPatternValidatorParserRuleCall_3_0() { return cPatternPatternValidatorParserRuleCall_3_0; }
	}
	public class NumericValidatorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.dsl.JDL.NumericValidators");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRequiredAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRequiredRequiredValidatorParserRuleCall_0_0 = (RuleCall)cRequiredAssignment_0.eContents().get(0);
		private final Assignment cMinlengthAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMinlengthMinValidatorParserRuleCall_1_0 = (RuleCall)cMinlengthAssignment_1.eContents().get(0);
		private final Assignment cMaxlengthAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMaxlengthMaxValidatorParserRuleCall_2_0 = (RuleCall)cMaxlengthAssignment_2.eContents().get(0);
		
		//NumericValidators:
		//	required=RequiredValidator minlength=MinValidator? maxlength=MaxValidator?;
		@Override public ParserRule getRule() { return rule; }
		
		//required=RequiredValidator minlength=MinValidator? maxlength=MaxValidator?
		public Group getGroup() { return cGroup; }
		
		//required=RequiredValidator
		public Assignment getRequiredAssignment_0() { return cRequiredAssignment_0; }
		
		//RequiredValidator
		public RuleCall getRequiredRequiredValidatorParserRuleCall_0_0() { return cRequiredRequiredValidatorParserRuleCall_0_0; }
		
		//minlength=MinValidator?
		public Assignment getMinlengthAssignment_1() { return cMinlengthAssignment_1; }
		
		//MinValidator
		public RuleCall getMinlengthMinValidatorParserRuleCall_1_0() { return cMinlengthMinValidatorParserRuleCall_1_0; }
		
		//maxlength=MaxValidator?
		public Assignment getMaxlengthAssignment_2() { return cMaxlengthAssignment_2; }
		
		//MaxValidator
		public RuleCall getMaxlengthMaxValidatorParserRuleCall_2_0() { return cMaxlengthMaxValidatorParserRuleCall_2_0; }
	}
	public class BlobValidatorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.dsl.JDL.BlobValidators");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRequiredAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRequiredRequiredValidatorParserRuleCall_0_0 = (RuleCall)cRequiredAssignment_0.eContents().get(0);
		private final Assignment cMinbytesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMinbytesMinBytesValidatorParserRuleCall_1_0 = (RuleCall)cMinbytesAssignment_1.eContents().get(0);
		private final Assignment cMaxbytesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMaxbytesMaxBytesValidatorParserRuleCall_2_0 = (RuleCall)cMaxbytesAssignment_2.eContents().get(0);
		
		//BlobValidators:
		//	required=RequiredValidator minbytes=MinBytesValidator? maxbytes=MaxBytesValidator?;
		@Override public ParserRule getRule() { return rule; }
		
		//required=RequiredValidator minbytes=MinBytesValidator? maxbytes=MaxBytesValidator?
		public Group getGroup() { return cGroup; }
		
		//required=RequiredValidator
		public Assignment getRequiredAssignment_0() { return cRequiredAssignment_0; }
		
		//RequiredValidator
		public RuleCall getRequiredRequiredValidatorParserRuleCall_0_0() { return cRequiredRequiredValidatorParserRuleCall_0_0; }
		
		//minbytes=MinBytesValidator?
		public Assignment getMinbytesAssignment_1() { return cMinbytesAssignment_1; }
		
		//MinBytesValidator
		public RuleCall getMinbytesMinBytesValidatorParserRuleCall_1_0() { return cMinbytesMinBytesValidatorParserRuleCall_1_0; }
		
		//maxbytes=MaxBytesValidator?
		public Assignment getMaxbytesAssignment_2() { return cMaxbytesAssignment_2; }
		
		//MaxBytesValidator
		public RuleCall getMaxbytesMaxBytesValidatorParserRuleCall_2_0() { return cMaxbytesMaxBytesValidatorParserRuleCall_2_0; }
	}
	public class RelationshipsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.dsl.JDL.Relationships");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRelationshipKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCardinalityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCardinalityCardinalityEnumRuleCall_1_0 = (RuleCall)cCardinalityAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRelationshipsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRelationshipsRelationshipParserRuleCall_3_0 = (RuleCall)cRelationshipsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// * =========================================================================
		// * RELATIONSHIP
		// * ========================================================================= * / Relationships:
		//	'relationship' cardinality=Cardinality '{'
		//	relationships+=Relationship*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'relationship' cardinality=Cardinality '{' relationships+=Relationship* '}'
		public Group getGroup() { return cGroup; }
		
		//'relationship'
		public Keyword getRelationshipKeyword_0() { return cRelationshipKeyword_0; }
		
		//cardinality=Cardinality
		public Assignment getCardinalityAssignment_1() { return cCardinalityAssignment_1; }
		
		//Cardinality
		public RuleCall getCardinalityCardinalityEnumRuleCall_1_0() { return cCardinalityCardinalityEnumRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//relationships+=Relationship*
		public Assignment getRelationshipsAssignment_3() { return cRelationshipsAssignment_3; }
		
		//Relationship
		public RuleCall getRelationshipsRelationshipParserRuleCall_3_0() { return cRelationshipsRelationshipParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class RelationshipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.dsl.JDL.Relationship");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFromEntityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFromEntityEntityParserRuleCall_0_0 = (RuleCall)cFromEntityAssignment_0.eContents().get(0);
		private final Assignment cFromNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFromNameRelationshipNameParserRuleCall_1_0 = (RuleCall)cFromNameAssignment_1.eContents().get(0);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cToEntityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cToEntityEntityParserRuleCall_3_0 = (RuleCall)cToEntityAssignment_3.eContents().get(0);
		private final Assignment cToNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cToNameRelationshipNameParserRuleCall_4_0 = (RuleCall)cToNameAssignment_4.eContents().get(0);
		
		//Relationship:
		//	fromEntity=Entity fromName=RelationshipName? 'to' toEntity=Entity toName=RelationshipName?;
		@Override public ParserRule getRule() { return rule; }
		
		//fromEntity=Entity fromName=RelationshipName? 'to' toEntity=Entity toName=RelationshipName?
		public Group getGroup() { return cGroup; }
		
		//fromEntity=Entity
		public Assignment getFromEntityAssignment_0() { return cFromEntityAssignment_0; }
		
		//Entity
		public RuleCall getFromEntityEntityParserRuleCall_0_0() { return cFromEntityEntityParserRuleCall_0_0; }
		
		//fromName=RelationshipName?
		public Assignment getFromNameAssignment_1() { return cFromNameAssignment_1; }
		
		//RelationshipName
		public RuleCall getFromNameRelationshipNameParserRuleCall_1_0() { return cFromNameRelationshipNameParserRuleCall_1_0; }
		
		//'to'
		public Keyword getToKeyword_2() { return cToKeyword_2; }
		
		//toEntity=Entity
		public Assignment getToEntityAssignment_3() { return cToEntityAssignment_3; }
		
		//Entity
		public RuleCall getToEntityEntityParserRuleCall_3_0() { return cToEntityEntityParserRuleCall_3_0; }
		
		//toName=RelationshipName?
		public Assignment getToNameAssignment_4() { return cToNameAssignment_4; }
		
		//RelationshipName
		public RuleCall getToNameRelationshipNameParserRuleCall_4_0() { return cToNameRelationshipNameParserRuleCall_4_0; }
	}
	public class RelationshipNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.dsl.JDL.RelationshipName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//RelationshipName:
		//	'{' name=ID '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' name=ID '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class EnumTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.dsl.JDL.EnumType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValuesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValuesIDTerminalRuleCall_3_0 = (RuleCall)cValuesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValuesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValuesIDTerminalRuleCall_4_1_0 = (RuleCall)cValuesAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		/// * =========================================================================
		// * ENUM
		// * ========================================================================= * / EnumType:
		//	'enum' name=ID '{'
		//	values+=ID (',' values+=ID)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'enum' name=ID '{' values+=ID (',' values+=ID)* '}'
		public Group getGroup() { return cGroup; }
		
		//'enum'
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//values+=ID
		public Assignment getValuesAssignment_3() { return cValuesAssignment_3; }
		
		//ID
		public RuleCall getValuesIDTerminalRuleCall_3_0() { return cValuesIDTerminalRuleCall_3_0; }
		
		//(',' values+=ID)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//values+=ID
		public Assignment getValuesAssignment_4_1() { return cValuesAssignment_4_1; }
		
		//ID
		public RuleCall getValuesIDTerminalRuleCall_4_1_0() { return cValuesIDTerminalRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class GenerationSettingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.dsl.JDL.GenerationSetting");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cServiceGenerationSettingParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDTOGenerationSettingParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPaginateGenerationSettingParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAngularSuffixGenerationSettingParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		/// * =========================================================================
		// * GENERATION SETTING
		// * ========================================================================= * / GenerationSetting:
		//	ServiceGenerationSetting | DTOGenerationSetting | PaginateGenerationSetting | AngularSuffixGenerationSetting;
		@Override public ParserRule getRule() { return rule; }
		
		//ServiceGenerationSetting | DTOGenerationSetting | PaginateGenerationSetting | AngularSuffixGenerationSetting
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ServiceGenerationSetting
		public RuleCall getServiceGenerationSettingParserRuleCall_0() { return cServiceGenerationSettingParserRuleCall_0; }
		
		//DTOGenerationSetting
		public RuleCall getDTOGenerationSettingParserRuleCall_1() { return cDTOGenerationSettingParserRuleCall_1; }
		
		//PaginateGenerationSetting
		public RuleCall getPaginateGenerationSettingParserRuleCall_2() { return cPaginateGenerationSettingParserRuleCall_2; }
		
		//AngularSuffixGenerationSetting
		public RuleCall getAngularSuffixGenerationSettingParserRuleCall_3() { return cAngularSuffixGenerationSettingParserRuleCall_3; }
	}
	public class ServiceGenerationSettingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.dsl.JDL.ServiceGenerationSetting");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEntitiesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEntitiesIDTerminalRuleCall_1_0 = (RuleCall)cEntitiesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cEntitiesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEntitiesIDTerminalRuleCall_2_1_0 = (RuleCall)cEntitiesAssignment_2_1.eContents().get(0);
		private final Keyword cWithKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cServiceTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cServiceTypeServiceTypeEnumRuleCall_4_0 = (RuleCall)cServiceTypeAssignment_4.eContents().get(0);
		
		//ServiceGenerationSetting:
		//	'service' entities+=ID (',' entities+=ID)* 'with' serviceType=ServiceType;
		@Override public ParserRule getRule() { return rule; }
		
		//'service' entities+=ID (',' entities+=ID)* 'with' serviceType=ServiceType
		public Group getGroup() { return cGroup; }
		
		//'service'
		public Keyword getServiceKeyword_0() { return cServiceKeyword_0; }
		
		//entities+=ID
		public Assignment getEntitiesAssignment_1() { return cEntitiesAssignment_1; }
		
		//ID
		public RuleCall getEntitiesIDTerminalRuleCall_1_0() { return cEntitiesIDTerminalRuleCall_1_0; }
		
		//(',' entities+=ID)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//entities+=ID
		public Assignment getEntitiesAssignment_2_1() { return cEntitiesAssignment_2_1; }
		
		//ID
		public RuleCall getEntitiesIDTerminalRuleCall_2_1_0() { return cEntitiesIDTerminalRuleCall_2_1_0; }
		
		//'with'
		public Keyword getWithKeyword_3() { return cWithKeyword_3; }
		
		//serviceType=ServiceType
		public Assignment getServiceTypeAssignment_4() { return cServiceTypeAssignment_4; }
		
		//ServiceType
		public RuleCall getServiceTypeServiceTypeEnumRuleCall_4_0() { return cServiceTypeServiceTypeEnumRuleCall_4_0; }
	}
	public class DTOGenerationSettingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.dsl.JDL.DTOGenerationSetting");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDtoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEntitiesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEntitiesIDTerminalRuleCall_1_0 = (RuleCall)cEntitiesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cEntitiesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEntitiesIDTerminalRuleCall_2_1_0 = (RuleCall)cEntitiesAssignment_2_1.eContents().get(0);
		private final Keyword cWithKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDtoTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDtoTypeDTOTypeEnumRuleCall_4_0 = (RuleCall)cDtoTypeAssignment_4.eContents().get(0);
		
		//DTOGenerationSetting:
		//	'dto' entities+=ID (',' entities+=ID)* 'with' dtoType=DTOType;
		@Override public ParserRule getRule() { return rule; }
		
		//'dto' entities+=ID (',' entities+=ID)* 'with' dtoType=DTOType
		public Group getGroup() { return cGroup; }
		
		//'dto'
		public Keyword getDtoKeyword_0() { return cDtoKeyword_0; }
		
		//entities+=ID
		public Assignment getEntitiesAssignment_1() { return cEntitiesAssignment_1; }
		
		//ID
		public RuleCall getEntitiesIDTerminalRuleCall_1_0() { return cEntitiesIDTerminalRuleCall_1_0; }
		
		//(',' entities+=ID)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//entities+=ID
		public Assignment getEntitiesAssignment_2_1() { return cEntitiesAssignment_2_1; }
		
		//ID
		public RuleCall getEntitiesIDTerminalRuleCall_2_1_0() { return cEntitiesIDTerminalRuleCall_2_1_0; }
		
		//'with'
		public Keyword getWithKeyword_3() { return cWithKeyword_3; }
		
		//dtoType=DTOType
		public Assignment getDtoTypeAssignment_4() { return cDtoTypeAssignment_4; }
		
		//DTOType
		public RuleCall getDtoTypeDTOTypeEnumRuleCall_4_0() { return cDtoTypeDTOTypeEnumRuleCall_4_0; }
	}
	public class PaginateGenerationSettingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.dsl.JDL.PaginateGenerationSetting");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPaginateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEntitiesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEntitiesIDTerminalRuleCall_1_0 = (RuleCall)cEntitiesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cEntitiesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEntitiesIDTerminalRuleCall_2_1_0 = (RuleCall)cEntitiesAssignment_2_1.eContents().get(0);
		private final Keyword cWithKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPaginateTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPaginateTypePaginateTypeEnumRuleCall_4_0 = (RuleCall)cPaginateTypeAssignment_4.eContents().get(0);
		
		//PaginateGenerationSetting:
		//	'paginate' entities+=ID (',' entities+=ID)* 'with' paginateType=PaginateType;
		@Override public ParserRule getRule() { return rule; }
		
		//'paginate' entities+=ID (',' entities+=ID)* 'with' paginateType=PaginateType
		public Group getGroup() { return cGroup; }
		
		//'paginate'
		public Keyword getPaginateKeyword_0() { return cPaginateKeyword_0; }
		
		//entities+=ID
		public Assignment getEntitiesAssignment_1() { return cEntitiesAssignment_1; }
		
		//ID
		public RuleCall getEntitiesIDTerminalRuleCall_1_0() { return cEntitiesIDTerminalRuleCall_1_0; }
		
		//(',' entities+=ID)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//entities+=ID
		public Assignment getEntitiesAssignment_2_1() { return cEntitiesAssignment_2_1; }
		
		//ID
		public RuleCall getEntitiesIDTerminalRuleCall_2_1_0() { return cEntitiesIDTerminalRuleCall_2_1_0; }
		
		//'with'
		public Keyword getWithKeyword_3() { return cWithKeyword_3; }
		
		//paginateType=PaginateType
		public Assignment getPaginateTypeAssignment_4() { return cPaginateTypeAssignment_4; }
		
		//PaginateType
		public RuleCall getPaginateTypePaginateTypeEnumRuleCall_4_0() { return cPaginateTypePaginateTypeEnumRuleCall_4_0; }
	}
	public class AngularSuffixGenerationSettingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.dsl.JDL.AngularSuffixGenerationSetting");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAngularSuffixKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEntitiesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEntitiesIDTerminalRuleCall_1_0 = (RuleCall)cEntitiesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cEntitiesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEntitiesIDTerminalRuleCall_2_1_0 = (RuleCall)cEntitiesAssignment_2_1.eContents().get(0);
		private final Keyword cWithKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIdAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIdIDTerminalRuleCall_4_0 = (RuleCall)cIdAssignment_4.eContents().get(0);
		
		//AngularSuffixGenerationSetting:
		//	'angularSuffix' entities+=ID (',' entities+=ID)* 'with' id=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'angularSuffix' entities+=ID (',' entities+=ID)* 'with' id=ID
		public Group getGroup() { return cGroup; }
		
		//'angularSuffix'
		public Keyword getAngularSuffixKeyword_0() { return cAngularSuffixKeyword_0; }
		
		//entities+=ID
		public Assignment getEntitiesAssignment_1() { return cEntitiesAssignment_1; }
		
		//ID
		public RuleCall getEntitiesIDTerminalRuleCall_1_0() { return cEntitiesIDTerminalRuleCall_1_0; }
		
		//(',' entities+=ID)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//entities+=ID
		public Assignment getEntitiesAssignment_2_1() { return cEntitiesAssignment_2_1; }
		
		//ID
		public RuleCall getEntitiesIDTerminalRuleCall_2_1_0() { return cEntitiesIDTerminalRuleCall_2_1_0; }
		
		//'with'
		public Keyword getWithKeyword_3() { return cWithKeyword_3; }
		
		//id=ID
		public Assignment getIdAssignment_4() { return cIdAssignment_4; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_4_0() { return cIdIDTerminalRuleCall_4_0; }
	}
	
	public class CardinalityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.dsl.JDL.Cardinality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOneToManyEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOneToManyOneToManyKeyword_0_0 = (Keyword)cOneToManyEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cManyToOneEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cManyToOneManyToOneKeyword_1_0 = (Keyword)cManyToOneEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cOneToOneEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cOneToOneOneToOneKeyword_2_0 = (Keyword)cOneToOneEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cManyToManyEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cManyToManyManyToManyKeyword_3_0 = (Keyword)cManyToManyEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Cardinality:
		//	OneToMany | ManyToOne | OneToOne | ManyToMany;
		public EnumRule getRule() { return rule; }
		
		//OneToMany | ManyToOne | OneToOne | ManyToMany
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OneToMany
		public EnumLiteralDeclaration getOneToManyEnumLiteralDeclaration_0() { return cOneToManyEnumLiteralDeclaration_0; }
		
		//"OneToMany"
		public Keyword getOneToManyOneToManyKeyword_0_0() { return cOneToManyOneToManyKeyword_0_0; }
		
		//ManyToOne
		public EnumLiteralDeclaration getManyToOneEnumLiteralDeclaration_1() { return cManyToOneEnumLiteralDeclaration_1; }
		
		//"ManyToOne"
		public Keyword getManyToOneManyToOneKeyword_1_0() { return cManyToOneManyToOneKeyword_1_0; }
		
		//OneToOne
		public EnumLiteralDeclaration getOneToOneEnumLiteralDeclaration_2() { return cOneToOneEnumLiteralDeclaration_2; }
		
		//"OneToOne"
		public Keyword getOneToOneOneToOneKeyword_2_0() { return cOneToOneOneToOneKeyword_2_0; }
		
		//ManyToMany
		public EnumLiteralDeclaration getManyToManyEnumLiteralDeclaration_3() { return cManyToManyEnumLiteralDeclaration_3; }
		
		//"ManyToMany"
		public Keyword getManyToManyManyToManyKeyword_3_0() { return cManyToManyManyToManyKeyword_3_0; }
	}
	public class ServiceTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.dsl.JDL.ServiceType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cServiceClassEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cServiceClassServiceClassKeyword_0_0 = (Keyword)cServiceClassEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cServiceImplEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cServiceImplServiceImplKeyword_1_0 = (Keyword)cServiceImplEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ServiceType:
		//	serviceClass | serviceImpl;
		public EnumRule getRule() { return rule; }
		
		//serviceClass | serviceImpl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//serviceClass
		public EnumLiteralDeclaration getServiceClassEnumLiteralDeclaration_0() { return cServiceClassEnumLiteralDeclaration_0; }
		
		//"serviceClass"
		public Keyword getServiceClassServiceClassKeyword_0_0() { return cServiceClassServiceClassKeyword_0_0; }
		
		//serviceImpl
		public EnumLiteralDeclaration getServiceImplEnumLiteralDeclaration_1() { return cServiceImplEnumLiteralDeclaration_1; }
		
		//"serviceImpl"
		public Keyword getServiceImplServiceImplKeyword_1_0() { return cServiceImplServiceImplKeyword_1_0; }
	}
	public class DTOTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.dsl.JDL.DTOType");
		private final EnumLiteralDeclaration cMapstructEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cMapstructMapstructKeyword_0 = (Keyword)cMapstructEnumLiteralDeclaration.eContents().get(0);
		
		//enum DTOType:
		//	mapstruct;
		public EnumRule getRule() { return rule; }
		
		//mapstruct
		public EnumLiteralDeclaration getMapstructEnumLiteralDeclaration() { return cMapstructEnumLiteralDeclaration; }
		
		//"mapstruct"
		public Keyword getMapstructMapstructKeyword_0() { return cMapstructMapstructKeyword_0; }
	}
	public class PaginateTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.dsl.JDL.PaginateType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPaginationEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPaginationPaginationKeyword_0_0 = (Keyword)cPaginationEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cInfiniteScrollEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cInfiniteScrollInfiniteScrollKeyword_1_0 = (Keyword)cInfiniteScrollEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum PaginateType:
		//	pagination | infiniteScroll;
		public EnumRule getRule() { return rule; }
		
		//pagination | infiniteScroll
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//pagination
		public EnumLiteralDeclaration getPaginationEnumLiteralDeclaration_0() { return cPaginationEnumLiteralDeclaration_0; }
		
		//"pagination"
		public Keyword getPaginationPaginationKeyword_0_0() { return cPaginationPaginationKeyword_0_0; }
		
		//infiniteScroll
		public EnumLiteralDeclaration getInfiniteScrollEnumLiteralDeclaration_1() { return cInfiniteScrollEnumLiteralDeclaration_1; }
		
		//"infiniteScroll"
		public Keyword getInfiniteScrollInfiniteScrollKeyword_1_0() { return cInfiniteScrollInfiniteScrollKeyword_1_0; }
	}
	
	private final DomainModelElements pDomainModel;
	private final ElementsElements pElements;
	private final EntityElements pEntity;
	private final FieldElements pField;
	private final EnumFieldElements pEnumField;
	private final StringFieldElements pStringField;
	private final NumericFieldElements pNumericField;
	private final IntegerFieldElements pIntegerField;
	private final LongFieldElements pLongField;
	private final BigDecimalFieldElements pBigDecimalField;
	private final FloatFieldElements pFloatField;
	private final DoubleFieldElements pDoubleField;
	private final BooleanFieldElements pBooleanField;
	private final DateFieldElements pDateField;
	private final LocalDateFieldElements pLocalDateField;
	private final ZonedDateTimeFieldElements pZonedDateTimeField;
	private final BinaryLargeObjectFieldElements pBinaryLargeObjectField;
	private final BlobFieldElements pBlobField;
	private final AnyBlobFieldElements pAnyBlobField;
	private final ImageBlobFieldElements pImageBlobField;
	private final RequiredValidatorElements pRequiredValidator;
	private final MinLengthValidatorElements pMinLengthValidator;
	private final MaxLengthValidatorElements pMaxLengthValidator;
	private final PatternValidatorElements pPatternValidator;
	private final MinValidatorElements pMinValidator;
	private final MaxValidatorElements pMaxValidator;
	private final MinBytesValidatorElements pMinBytesValidator;
	private final MaxBytesValidatorElements pMaxBytesValidator;
	private final StringValidatorsElements pStringValidators;
	private final NumericValidatorsElements pNumericValidators;
	private final BlobValidatorsElements pBlobValidators;
	private final RelationshipsElements pRelationships;
	private final RelationshipElements pRelationship;
	private final RelationshipNameElements pRelationshipName;
	private final CardinalityElements eCardinality;
	private final EnumTypeElements pEnumType;
	private final GenerationSettingElements pGenerationSetting;
	private final ServiceGenerationSettingElements pServiceGenerationSetting;
	private final ServiceTypeElements eServiceType;
	private final DTOGenerationSettingElements pDTOGenerationSetting;
	private final DTOTypeElements eDTOType;
	private final PaginateGenerationSettingElements pPaginateGenerationSetting;
	private final PaginateTypeElements ePaginateType;
	private final AngularSuffixGenerationSettingElements pAngularSuffixGenerationSetting;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public JDLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDomainModel = new DomainModelElements();
		this.pElements = new ElementsElements();
		this.pEntity = new EntityElements();
		this.pField = new FieldElements();
		this.pEnumField = new EnumFieldElements();
		this.pStringField = new StringFieldElements();
		this.pNumericField = new NumericFieldElements();
		this.pIntegerField = new IntegerFieldElements();
		this.pLongField = new LongFieldElements();
		this.pBigDecimalField = new BigDecimalFieldElements();
		this.pFloatField = new FloatFieldElements();
		this.pDoubleField = new DoubleFieldElements();
		this.pBooleanField = new BooleanFieldElements();
		this.pDateField = new DateFieldElements();
		this.pLocalDateField = new LocalDateFieldElements();
		this.pZonedDateTimeField = new ZonedDateTimeFieldElements();
		this.pBinaryLargeObjectField = new BinaryLargeObjectFieldElements();
		this.pBlobField = new BlobFieldElements();
		this.pAnyBlobField = new AnyBlobFieldElements();
		this.pImageBlobField = new ImageBlobFieldElements();
		this.pRequiredValidator = new RequiredValidatorElements();
		this.pMinLengthValidator = new MinLengthValidatorElements();
		this.pMaxLengthValidator = new MaxLengthValidatorElements();
		this.pPatternValidator = new PatternValidatorElements();
		this.pMinValidator = new MinValidatorElements();
		this.pMaxValidator = new MaxValidatorElements();
		this.pMinBytesValidator = new MinBytesValidatorElements();
		this.pMaxBytesValidator = new MaxBytesValidatorElements();
		this.pStringValidators = new StringValidatorsElements();
		this.pNumericValidators = new NumericValidatorsElements();
		this.pBlobValidators = new BlobValidatorsElements();
		this.pRelationships = new RelationshipsElements();
		this.pRelationship = new RelationshipElements();
		this.pRelationshipName = new RelationshipNameElements();
		this.eCardinality = new CardinalityElements();
		this.pEnumType = new EnumTypeElements();
		this.pGenerationSetting = new GenerationSettingElements();
		this.pServiceGenerationSetting = new ServiceGenerationSettingElements();
		this.eServiceType = new ServiceTypeElements();
		this.pDTOGenerationSetting = new DTOGenerationSettingElements();
		this.eDTOType = new DTOTypeElements();
		this.pPaginateGenerationSetting = new PaginateGenerationSettingElements();
		this.ePaginateType = new PaginateTypeElements();
		this.pAngularSuffixGenerationSetting = new AngularSuffixGenerationSettingElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("io.github.jhipster.jdl.dsl.JDL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//DomainModel:
	//	elements+=Elements*;
	public DomainModelElements getDomainModelAccess() {
		return pDomainModel;
	}
	
	public ParserRule getDomainModelRule() {
		return getDomainModelAccess().getRule();
	}
	
	//Elements:
	//	Entity | Relationships | GenerationSetting;
	public ElementsElements getElementsAccess() {
		return pElements;
	}
	
	public ParserRule getElementsRule() {
		return getElementsAccess().getRule();
	}
	
	/// * =========================================================================
	// * ENTITY
	// * ========================================================================= * / Entity:
	//	'entity' name=ID '{'
	//	fields+=Field (',' fields+=Field)*
	//	'}';
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//Field:
	//	StringField | NumericField | BooleanField | DateField | BinaryLargeObjectField | EnumField;
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	//EnumField:
	//	enumType=[EnumType];
	public EnumFieldElements getEnumFieldAccess() {
		return pEnumField;
	}
	
	public ParserRule getEnumFieldRule() {
		return getEnumFieldAccess().getRule();
	}
	
	//StringField:
	//	name=ID 'String' validators=StringValidators?;
	public StringFieldElements getStringFieldAccess() {
		return pStringField;
	}
	
	public ParserRule getStringFieldRule() {
		return getStringFieldAccess().getRule();
	}
	
	//NumericField:
	//	IntegerField | LongField | BigDecimalField | FloatField | DoubleField;
	public NumericFieldElements getNumericFieldAccess() {
		return pNumericField;
	}
	
	public ParserRule getNumericFieldRule() {
		return getNumericFieldAccess().getRule();
	}
	
	//IntegerField:
	//	name=ID 'Integer' validators=NumericValidators?;
	public IntegerFieldElements getIntegerFieldAccess() {
		return pIntegerField;
	}
	
	public ParserRule getIntegerFieldRule() {
		return getIntegerFieldAccess().getRule();
	}
	
	//LongField:
	//	name=ID 'Long' validators=NumericValidators?;
	public LongFieldElements getLongFieldAccess() {
		return pLongField;
	}
	
	public ParserRule getLongFieldRule() {
		return getLongFieldAccess().getRule();
	}
	
	//BigDecimalField:
	//	name=ID 'BigDecimal' validators=NumericValidators?;
	public BigDecimalFieldElements getBigDecimalFieldAccess() {
		return pBigDecimalField;
	}
	
	public ParserRule getBigDecimalFieldRule() {
		return getBigDecimalFieldAccess().getRule();
	}
	
	//FloatField:
	//	name=ID 'Float' validators=NumericValidators?;
	public FloatFieldElements getFloatFieldAccess() {
		return pFloatField;
	}
	
	public ParserRule getFloatFieldRule() {
		return getFloatFieldAccess().getRule();
	}
	
	//DoubleField:
	//	name=ID 'Double' validators=NumericValidators?;
	public DoubleFieldElements getDoubleFieldAccess() {
		return pDoubleField;
	}
	
	public ParserRule getDoubleFieldRule() {
		return getDoubleFieldAccess().getRule();
	}
	
	//BooleanField:
	//	name=ID 'Boolean' validators=RequiredValidator?;
	public BooleanFieldElements getBooleanFieldAccess() {
		return pBooleanField;
	}
	
	public ParserRule getBooleanFieldRule() {
		return getBooleanFieldAccess().getRule();
	}
	
	//DateField:
	//	LocalDateField | ZonedDateTimeField;
	public DateFieldElements getDateFieldAccess() {
		return pDateField;
	}
	
	public ParserRule getDateFieldRule() {
		return getDateFieldAccess().getRule();
	}
	
	//LocalDateField:
	//	name=ID 'LocalDate' validators=RequiredValidator?;
	public LocalDateFieldElements getLocalDateFieldAccess() {
		return pLocalDateField;
	}
	
	public ParserRule getLocalDateFieldRule() {
		return getLocalDateFieldAccess().getRule();
	}
	
	//ZonedDateTimeField:
	//	name=ID 'ZonedDateTime' validators=RequiredValidator?;
	public ZonedDateTimeFieldElements getZonedDateTimeFieldAccess() {
		return pZonedDateTimeField;
	}
	
	public ParserRule getZonedDateTimeFieldRule() {
		return getZonedDateTimeFieldAccess().getRule();
	}
	
	//BinaryLargeObjectField:
	//	BlobField | AnyBlobField | ImageBlobField;
	public BinaryLargeObjectFieldElements getBinaryLargeObjectFieldAccess() {
		return pBinaryLargeObjectField;
	}
	
	public ParserRule getBinaryLargeObjectFieldRule() {
		return getBinaryLargeObjectFieldAccess().getRule();
	}
	
	//BlobField:
	//	name=ID 'Blob' validators=BlobValidators?;
	public BlobFieldElements getBlobFieldAccess() {
		return pBlobField;
	}
	
	public ParserRule getBlobFieldRule() {
		return getBlobFieldAccess().getRule();
	}
	
	//AnyBlobField:
	//	name=ID 'AnyBlob' validators=BlobValidators?;
	public AnyBlobFieldElements getAnyBlobFieldAccess() {
		return pAnyBlobField;
	}
	
	public ParserRule getAnyBlobFieldRule() {
		return getAnyBlobFieldAccess().getRule();
	}
	
	//ImageBlobField:
	//	name=ID 'ImageBlob' validators=BlobValidators?;
	public ImageBlobFieldElements getImageBlobFieldAccess() {
		return pImageBlobField;
	}
	
	public ParserRule getImageBlobFieldRule() {
		return getImageBlobFieldAccess().getRule();
	}
	
	/// * =========================================================================
	// * VALIDATORS
	// * ========================================================================= * / RequiredValidator:
	//	required?='required';
	public RequiredValidatorElements getRequiredValidatorAccess() {
		return pRequiredValidator;
	}
	
	public ParserRule getRequiredValidatorRule() {
		return getRequiredValidatorAccess().getRule();
	}
	
	//MinLengthValidator:
	//	'minlength' '(' value=INT ')';
	public MinLengthValidatorElements getMinLengthValidatorAccess() {
		return pMinLengthValidator;
	}
	
	public ParserRule getMinLengthValidatorRule() {
		return getMinLengthValidatorAccess().getRule();
	}
	
	//MaxLengthValidator:
	//	'maxlength' '(' value=INT ')';
	public MaxLengthValidatorElements getMaxLengthValidatorAccess() {
		return pMaxLengthValidator;
	}
	
	public ParserRule getMaxLengthValidatorRule() {
		return getMaxLengthValidatorAccess().getRule();
	}
	
	//PatternValidator:
	//	'pattern' '(' value=STRING ')';
	public PatternValidatorElements getPatternValidatorAccess() {
		return pPatternValidator;
	}
	
	public ParserRule getPatternValidatorRule() {
		return getPatternValidatorAccess().getRule();
	}
	
	//MinValidator:
	//	'min' '(' value=INT ')';
	public MinValidatorElements getMinValidatorAccess() {
		return pMinValidator;
	}
	
	public ParserRule getMinValidatorRule() {
		return getMinValidatorAccess().getRule();
	}
	
	//MaxValidator:
	//	'max' '(' value=INT ')';
	public MaxValidatorElements getMaxValidatorAccess() {
		return pMaxValidator;
	}
	
	public ParserRule getMaxValidatorRule() {
		return getMaxValidatorAccess().getRule();
	}
	
	//MinBytesValidator:
	//	'minbytes' '(' value=INT ')';
	public MinBytesValidatorElements getMinBytesValidatorAccess() {
		return pMinBytesValidator;
	}
	
	public ParserRule getMinBytesValidatorRule() {
		return getMinBytesValidatorAccess().getRule();
	}
	
	//MaxBytesValidator:
	//	'maxbytes' '(' value=INT ')';
	public MaxBytesValidatorElements getMaxBytesValidatorAccess() {
		return pMaxBytesValidator;
	}
	
	public ParserRule getMaxBytesValidatorRule() {
		return getMaxBytesValidatorAccess().getRule();
	}
	
	//StringValidators:
	//	required=RequiredValidator minLength=MinLengthValidator?
	//	maxlength=MaxLengthValidator? pattern=PatternValidator?;
	public StringValidatorsElements getStringValidatorsAccess() {
		return pStringValidators;
	}
	
	public ParserRule getStringValidatorsRule() {
		return getStringValidatorsAccess().getRule();
	}
	
	//NumericValidators:
	//	required=RequiredValidator minlength=MinValidator? maxlength=MaxValidator?;
	public NumericValidatorsElements getNumericValidatorsAccess() {
		return pNumericValidators;
	}
	
	public ParserRule getNumericValidatorsRule() {
		return getNumericValidatorsAccess().getRule();
	}
	
	//BlobValidators:
	//	required=RequiredValidator minbytes=MinBytesValidator? maxbytes=MaxBytesValidator?;
	public BlobValidatorsElements getBlobValidatorsAccess() {
		return pBlobValidators;
	}
	
	public ParserRule getBlobValidatorsRule() {
		return getBlobValidatorsAccess().getRule();
	}
	
	/// * =========================================================================
	// * RELATIONSHIP
	// * ========================================================================= * / Relationships:
	//	'relationship' cardinality=Cardinality '{'
	//	relationships+=Relationship*
	//	'}';
	public RelationshipsElements getRelationshipsAccess() {
		return pRelationships;
	}
	
	public ParserRule getRelationshipsRule() {
		return getRelationshipsAccess().getRule();
	}
	
	//Relationship:
	//	fromEntity=Entity fromName=RelationshipName? 'to' toEntity=Entity toName=RelationshipName?;
	public RelationshipElements getRelationshipAccess() {
		return pRelationship;
	}
	
	public ParserRule getRelationshipRule() {
		return getRelationshipAccess().getRule();
	}
	
	//RelationshipName:
	//	'{' name=ID '}';
	public RelationshipNameElements getRelationshipNameAccess() {
		return pRelationshipName;
	}
	
	public ParserRule getRelationshipNameRule() {
		return getRelationshipNameAccess().getRule();
	}
	
	//enum Cardinality:
	//	OneToMany | ManyToOne | OneToOne | ManyToMany;
	public CardinalityElements getCardinalityAccess() {
		return eCardinality;
	}
	
	public EnumRule getCardinalityRule() {
		return getCardinalityAccess().getRule();
	}
	
	/// * =========================================================================
	// * ENUM
	// * ========================================================================= * / EnumType:
	//	'enum' name=ID '{'
	//	values+=ID (',' values+=ID)*
	//	'}';
	public EnumTypeElements getEnumTypeAccess() {
		return pEnumType;
	}
	
	public ParserRule getEnumTypeRule() {
		return getEnumTypeAccess().getRule();
	}
	
	/// * =========================================================================
	// * GENERATION SETTING
	// * ========================================================================= * / GenerationSetting:
	//	ServiceGenerationSetting | DTOGenerationSetting | PaginateGenerationSetting | AngularSuffixGenerationSetting;
	public GenerationSettingElements getGenerationSettingAccess() {
		return pGenerationSetting;
	}
	
	public ParserRule getGenerationSettingRule() {
		return getGenerationSettingAccess().getRule();
	}
	
	//ServiceGenerationSetting:
	//	'service' entities+=ID (',' entities+=ID)* 'with' serviceType=ServiceType;
	public ServiceGenerationSettingElements getServiceGenerationSettingAccess() {
		return pServiceGenerationSetting;
	}
	
	public ParserRule getServiceGenerationSettingRule() {
		return getServiceGenerationSettingAccess().getRule();
	}
	
	//enum ServiceType:
	//	serviceClass | serviceImpl;
	public ServiceTypeElements getServiceTypeAccess() {
		return eServiceType;
	}
	
	public EnumRule getServiceTypeRule() {
		return getServiceTypeAccess().getRule();
	}
	
	//DTOGenerationSetting:
	//	'dto' entities+=ID (',' entities+=ID)* 'with' dtoType=DTOType;
	public DTOGenerationSettingElements getDTOGenerationSettingAccess() {
		return pDTOGenerationSetting;
	}
	
	public ParserRule getDTOGenerationSettingRule() {
		return getDTOGenerationSettingAccess().getRule();
	}
	
	//enum DTOType:
	//	mapstruct;
	public DTOTypeElements getDTOTypeAccess() {
		return eDTOType;
	}
	
	public EnumRule getDTOTypeRule() {
		return getDTOTypeAccess().getRule();
	}
	
	//PaginateGenerationSetting:
	//	'paginate' entities+=ID (',' entities+=ID)* 'with' paginateType=PaginateType;
	public PaginateGenerationSettingElements getPaginateGenerationSettingAccess() {
		return pPaginateGenerationSetting;
	}
	
	public ParserRule getPaginateGenerationSettingRule() {
		return getPaginateGenerationSettingAccess().getRule();
	}
	
	//enum PaginateType:
	//	pagination | infiniteScroll;
	public PaginateTypeElements getPaginateTypeAccess() {
		return ePaginateType;
	}
	
	public EnumRule getPaginateTypeRule() {
		return getPaginateTypeAccess().getRule();
	}
	
	//AngularSuffixGenerationSetting:
	//	'angularSuffix' entities+=ID (',' entities+=ID)* 'with' id=ID;
	public AngularSuffixGenerationSettingElements getAngularSuffixGenerationSettingAccess() {
		return pAngularSuffixGenerationSetting;
	}
	
	public ParserRule getAngularSuffixGenerationSettingRule() {
		return getAngularSuffixGenerationSettingAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
