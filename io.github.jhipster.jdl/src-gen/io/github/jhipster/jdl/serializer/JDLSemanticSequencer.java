/*
 * generated by Xtext 2.10.0
 */
package io.github.jhipster.jdl.serializer;

import com.google.inject.Inject;
import io.github.jhipster.jdl.jdl.JdlBlobValidators;
import io.github.jhipster.jdl.jdl.JdlDomainModel;
import io.github.jhipster.jdl.jdl.JdlEntity;
import io.github.jhipster.jdl.jdl.JdlEntityExclusion;
import io.github.jhipster.jdl.jdl.JdlEntityField;
import io.github.jhipster.jdl.jdl.JdlEntityInclusion;
import io.github.jhipster.jdl.jdl.JdlEnumType;
import io.github.jhipster.jdl.jdl.JdlFieldType;
import io.github.jhipster.jdl.jdl.JdlGenerationSetting;
import io.github.jhipster.jdl.jdl.JdlMaxBytesValidator;
import io.github.jhipster.jdl.jdl.JdlMaxLengthValidator;
import io.github.jhipster.jdl.jdl.JdlMaxValidator;
import io.github.jhipster.jdl.jdl.JdlMinBytesValidator;
import io.github.jhipster.jdl.jdl.JdlMinLengthValidator;
import io.github.jhipster.jdl.jdl.JdlMinValidator;
import io.github.jhipster.jdl.jdl.JdlNumericValidators;
import io.github.jhipster.jdl.jdl.JdlPackage;
import io.github.jhipster.jdl.jdl.JdlPaginateType;
import io.github.jhipster.jdl.jdl.JdlPatternValidator;
import io.github.jhipster.jdl.jdl.JdlRelationship;
import io.github.jhipster.jdl.jdl.JdlRelationshipName;
import io.github.jhipster.jdl.jdl.JdlRelationships;
import io.github.jhipster.jdl.jdl.JdlRequiredValidator;
import io.github.jhipster.jdl.jdl.JdlStringValidators;
import io.github.jhipster.jdl.jdl.JdlWildcardPredicate;
import io.github.jhipster.jdl.services.JDLGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class JDLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private JDLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == JdlPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case JdlPackage.JDL_BLOB_VALIDATORS:
				sequence_JdlBlobValidators(context, (JdlBlobValidators) semanticObject); 
				return; 
			case JdlPackage.JDL_DOMAIN_MODEL:
				sequence_JdlDomainModel(context, (JdlDomainModel) semanticObject); 
				return; 
			case JdlPackage.JDL_ENTITY:
				sequence_JdlEntity(context, (JdlEntity) semanticObject); 
				return; 
			case JdlPackage.JDL_ENTITY_EXCLUSION:
				sequence_JdlEntityExclusion(context, (JdlEntityExclusion) semanticObject); 
				return; 
			case JdlPackage.JDL_ENTITY_FIELD:
				if (rule == grammarAccess.getJdlFieldTypeRule()) {
					sequence_JdlBooleanField_JdlDateField_JdlEnumField_JdlNumericField_JdlStringField(context, (JdlEntityField) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJdlBooleanFieldRule()) {
					sequence_JdlBooleanField(context, (JdlEntityField) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJdlDateFieldRule()) {
					sequence_JdlDateField(context, (JdlEntityField) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJdlEntityFieldRule()) {
					sequence_JdlEntityField(context, (JdlEntityField) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJdlEnumFieldRule()) {
					sequence_JdlEnumField(context, (JdlEntityField) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJdlNumericFieldRule()) {
					sequence_JdlNumericField(context, (JdlEntityField) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJdlStringFieldRule()) {
					sequence_JdlStringField(context, (JdlEntityField) semanticObject); 
					return; 
				}
				else break;
			case JdlPackage.JDL_ENTITY_INCLUSION:
				sequence_JdlEntityInclusion(context, (JdlEntityInclusion) semanticObject); 
				return; 
			case JdlPackage.JDL_ENUM_TYPE:
				sequence_JdlEnumType(context, (JdlEnumType) semanticObject); 
				return; 
			case JdlPackage.JDL_FIELD_TYPE:
				sequence_JdlBlobField(context, (JdlFieldType) semanticObject); 
				return; 
			case JdlPackage.JDL_GENERATION_SETTING:
				if (rule == grammarAccess.getJdlGenerationSettingTypeRule()) {
					sequence_JdlAngularSuffixGenerationSetting_JdlDtoGenerationSetting_JdlMicroserviceGenerationSetting_JdlPaginateGenerationSetting_JdlSearchGenerationSetting_JdlServiceGenerationSetting(context, (JdlGenerationSetting) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJdlAngularSuffixGenerationSettingRule()) {
					sequence_JdlAngularSuffixGenerationSetting(context, (JdlGenerationSetting) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJdlDtoGenerationSettingRule()) {
					sequence_JdlDtoGenerationSetting(context, (JdlGenerationSetting) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJdlFeatureRule()
						|| rule == grammarAccess.getJdlGenerationSettingRule()) {
					sequence_JdlGenerationSetting(context, (JdlGenerationSetting) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJdlMicroserviceGenerationSettingRule()) {
					sequence_JdlMicroserviceGenerationSetting(context, (JdlGenerationSetting) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJdlPaginateGenerationSettingRule()) {
					sequence_JdlPaginateGenerationSetting(context, (JdlGenerationSetting) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJdlSearchGenerationSettingRule()) {
					sequence_JdlSearchGenerationSetting(context, (JdlGenerationSetting) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJdlServiceGenerationSettingRule()) {
					sequence_JdlServiceGenerationSetting(context, (JdlGenerationSetting) semanticObject); 
					return; 
				}
				else break;
			case JdlPackage.JDL_MAX_BYTES_VALIDATOR:
				sequence_JdlMaxBytesValidator(context, (JdlMaxBytesValidator) semanticObject); 
				return; 
			case JdlPackage.JDL_MAX_LENGTH_VALIDATOR:
				sequence_JdlMaxLengthValidator(context, (JdlMaxLengthValidator) semanticObject); 
				return; 
			case JdlPackage.JDL_MAX_VALIDATOR:
				sequence_JdlMaxValidator(context, (JdlMaxValidator) semanticObject); 
				return; 
			case JdlPackage.JDL_MIN_BYTES_VALIDATOR:
				sequence_JdlMinBytesValidator(context, (JdlMinBytesValidator) semanticObject); 
				return; 
			case JdlPackage.JDL_MIN_LENGTH_VALIDATOR:
				sequence_JdlMinLengthValidator(context, (JdlMinLengthValidator) semanticObject); 
				return; 
			case JdlPackage.JDL_MIN_VALIDATOR:
				sequence_JdlMinValidator(context, (JdlMinValidator) semanticObject); 
				return; 
			case JdlPackage.JDL_NUMERIC_VALIDATORS:
				sequence_JdlNumericValidators(context, (JdlNumericValidators) semanticObject); 
				return; 
			case JdlPackage.JDL_PAGINATE_TYPE:
				sequence_JdlPaginateType(context, (JdlPaginateType) semanticObject); 
				return; 
			case JdlPackage.JDL_PATTERN_VALIDATOR:
				sequence_JdlPatternValidator(context, (JdlPatternValidator) semanticObject); 
				return; 
			case JdlPackage.JDL_RELATIONSHIP:
				sequence_JdlRelationship(context, (JdlRelationship) semanticObject); 
				return; 
			case JdlPackage.JDL_RELATIONSHIP_NAME:
				sequence_JdlRelationshipName(context, (JdlRelationshipName) semanticObject); 
				return; 
			case JdlPackage.JDL_RELATIONSHIPS:
				sequence_JdlRelationships(context, (JdlRelationships) semanticObject); 
				return; 
			case JdlPackage.JDL_REQUIRED_VALIDATOR:
				sequence_JdlRequiredValidator(context, (JdlRequiredValidator) semanticObject); 
				return; 
			case JdlPackage.JDL_STRING_VALIDATORS:
				sequence_JdlStringValidators(context, (JdlStringValidators) semanticObject); 
				return; 
			case JdlPackage.JDL_WILDCARD_PREDICATE:
				sequence_JdlWildcardPredicate(context, (JdlWildcardPredicate) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     JdlGenerationSettingType returns JdlGenerationSetting
	 *
	 * Constraint:
	 *     (
	 *         (serviceGenerationSetting?='service' includes=JdlEntityInclusion serviceType=JdlServiceType) | 
	 *         (microserviceGenerationSetting?='microservice' includes=JdlEntityInclusion appname=ID) | 
	 *         (searchGenerationSetting?='search' includes=JdlEntityInclusion service=ID) | 
	 *         (dtoGenerationSetting?='dto' includes=JdlEntityInclusion dtoType=JdlDtoType) | 
	 *         (paginateGenerationSetting?='paginate' includes=JdlEntityInclusion paginateType=JdlPaginateType) | 
	 *         (angularSuffixGenerationSetting?='angularSuffix' includes=JdlEntityInclusion id=ID)
	 *     )
	 */
	protected void sequence_JdlAngularSuffixGenerationSetting_JdlDtoGenerationSetting_JdlMicroserviceGenerationSetting_JdlPaginateGenerationSetting_JdlSearchGenerationSetting_JdlServiceGenerationSetting(ISerializationContext context, JdlGenerationSetting semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JdlAngularSuffixGenerationSetting returns JdlGenerationSetting
	 *
	 * Constraint:
	 *     (angularSuffixGenerationSetting?='angularSuffix' includes=JdlEntityInclusion id=ID)
	 */
	protected void sequence_JdlAngularSuffixGenerationSetting(ISerializationContext context, JdlGenerationSetting semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JdlPackage.Literals.JDL_GENERATION_SETTING__ANGULAR_SUFFIX_GENERATION_SETTING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JdlPackage.Literals.JDL_GENERATION_SETTING__ANGULAR_SUFFIX_GENERATION_SETTING));
			if (transientValues.isValueTransient(semanticObject, JdlPackage.Literals.JDL_GENERATION_SETTING__INCLUDES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JdlPackage.Literals.JDL_GENERATION_SETTING__INCLUDES));
			if (transientValues.isValueTransient(semanticObject, JdlPackage.Literals.JDL_GENERATION_SETTING__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JdlPackage.Literals.JDL_GENERATION_SETTING__ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJdlAngularSuffixGenerationSettingAccess().getAngularSuffixGenerationSettingAngularSuffixKeyword_0_0(), semanticObject.isAngularSuffixGenerationSetting());
		feeder.accept(grammarAccess.getJdlAngularSuffixGenerationSettingAccess().getIncludesJdlEntityInclusionParserRuleCall_1_0(), semanticObject.getIncludes());
		feeder.accept(grammarAccess.getJdlAngularSuffixGenerationSettingAccess().getIdIDTerminalRuleCall_2_0(), semanticObject.getId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JdlFieldType returns JdlFieldType
	 *     JdlBlobField returns JdlFieldType
	 *
	 * Constraint:
	 *     (blobFieldType=JdlBlobFieldType validators=JdlBlobValidators?)
	 */
	protected void sequence_JdlBlobField(ISerializationContext context, JdlFieldType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JdlBlobValidators returns JdlBlobValidators
	 *
	 * Constraint:
	 *     (required=JdlRequiredValidator minbytes=JdlMinBytesValidator? maxbytes=JdlMaxBytesValidator?)
	 */
	protected void sequence_JdlBlobValidators(ISerializationContext context, JdlBlobValidators semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JdlFieldType returns JdlEntityField
	 *
	 * Constraint:
	 *     (
	 *         (enumType=[JdlEnumType|ID] validators=JdlRequiredValidator?) | 
	 *         (stringType?='String' validators=JdlStringValidators?) | 
	 *         (numericFieldType=JdlNumericFieldType validators=JdlNumericValidators?) | 
	 *         (booleanType?='Boolean' validators=JdlRequiredValidator?) | 
	 *         ((localDateType?='LocalDate' | zonedDateTimeType?='ZonedDateTime') validators=JdlRequiredValidator?)
	 *     )
	 */
	protected void sequence_JdlBooleanField_JdlDateField_JdlEnumField_JdlNumericField_JdlStringField(ISerializationContext context, JdlEntityField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JdlBooleanField returns JdlEntityField
	 *
	 * Constraint:
	 *     (booleanType?='Boolean' validators=JdlRequiredValidator?)
	 */
	protected void sequence_JdlBooleanField(ISerializationContext context, JdlEntityField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JdlDateField returns JdlEntityField
	 *
	 * Constraint:
	 *     ((localDateType?='LocalDate' | zonedDateTimeType?='ZonedDateTime') validators=JdlRequiredValidator?)
	 */
	protected void sequence_JdlDateField(ISerializationContext context, JdlEntityField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JdlDomainModel returns JdlDomainModel
	 *
	 * Constraint:
	 *     features+=JdlFeature+
	 */
	protected void sequence_JdlDomainModel(ISerializationContext context, JdlDomainModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JdlDtoGenerationSetting returns JdlGenerationSetting
	 *
	 * Constraint:
	 *     (dtoGenerationSetting?='dto' includes=JdlEntityInclusion dtoType=JdlDtoType)
	 */
	protected void sequence_JdlDtoGenerationSetting(ISerializationContext context, JdlGenerationSetting semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JdlPackage.Literals.JDL_GENERATION_SETTING__DTO_GENERATION_SETTING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JdlPackage.Literals.JDL_GENERATION_SETTING__DTO_GENERATION_SETTING));
			if (transientValues.isValueTransient(semanticObject, JdlPackage.Literals.JDL_GENERATION_SETTING__INCLUDES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JdlPackage.Literals.JDL_GENERATION_SETTING__INCLUDES));
			if (transientValues.isValueTransient(semanticObject, JdlPackage.Literals.JDL_GENERATION_SETTING__DTO_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JdlPackage.Literals.JDL_GENERATION_SETTING__DTO_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJdlDtoGenerationSettingAccess().getDtoGenerationSettingDtoKeyword_0_0(), semanticObject.isDtoGenerationSetting());
		feeder.accept(grammarAccess.getJdlDtoGenerationSettingAccess().getIncludesJdlEntityInclusionParserRuleCall_1_0(), semanticObject.getIncludes());
		feeder.accept(grammarAccess.getJdlDtoGenerationSettingAccess().getDtoTypeJdlDtoTypeEnumRuleCall_2_0(), semanticObject.getDtoType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JdlEntityExclusion returns JdlEntityExclusion
	 *
	 * Constraint:
	 *     (entities+=[JdlEntity|ID] entities+=[JdlEntity|ID]*)
	 */
	protected void sequence_JdlEntityExclusion(ISerializationContext context, JdlEntityExclusion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JdlEntityField returns JdlEntityField
	 *
	 * Constraint:
	 *     (name=ID type=JdlFieldType)
	 */
	protected void sequence_JdlEntityField(ISerializationContext context, JdlEntityField semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JdlPackage.Literals.JDL_ENTITY_FIELD__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JdlPackage.Literals.JDL_ENTITY_FIELD__NAME));
			if (transientValues.isValueTransient(semanticObject, JdlPackage.Literals.JDL_ENTITY_FIELD__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JdlPackage.Literals.JDL_ENTITY_FIELD__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJdlEntityFieldAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getJdlEntityFieldAccess().getTypeJdlFieldTypeParserRuleCall_1_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JdlEntityInclusion returns JdlEntityInclusion
	 *
	 * Constraint:
	 *     (predicate=JdlWildcardPredicate | (entities+=[JdlEntity|ID] entities+=[JdlEntity|ID]*))
	 */
	protected void sequence_JdlEntityInclusion(ISerializationContext context, JdlEntityInclusion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JdlFeature returns JdlEntity
	 *     JdlEntity returns JdlEntity
	 *
	 * Constraint:
	 *     (name=ID (fields+=JdlEntityField fields+=JdlEntityField*)?)
	 */
	protected void sequence_JdlEntity(ISerializationContext context, JdlEntity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JdlEnumField returns JdlEntityField
	 *
	 * Constraint:
	 *     (enumType=[JdlEnumType|ID] validators=JdlRequiredValidator?)
	 */
	protected void sequence_JdlEnumField(ISerializationContext context, JdlEntityField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JdlFeature returns JdlEnumType
	 *     JdlEnumType returns JdlEnumType
	 *
	 * Constraint:
	 *     (name=ID values+=ID values+=ID*)
	 */
	protected void sequence_JdlEnumType(ISerializationContext context, JdlEnumType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JdlFeature returns JdlGenerationSetting
	 *     JdlGenerationSetting returns JdlGenerationSetting
	 *
	 * Constraint:
	 *     (setting=JdlGenerationSettingType excludes=JdlEntityExclusion?)
	 */
	protected void sequence_JdlGenerationSetting(ISerializationContext context, JdlGenerationSetting semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JdlMaxBytesValidator returns JdlMaxBytesValidator
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_JdlMaxBytesValidator(ISerializationContext context, JdlMaxBytesValidator semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JdlPackage.Literals.JDL_MAX_BYTES_VALIDATOR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JdlPackage.Literals.JDL_MAX_BYTES_VALIDATOR__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJdlMaxBytesValidatorAccess().getValueINTTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JdlMaxLengthValidator returns JdlMaxLengthValidator
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_JdlMaxLengthValidator(ISerializationContext context, JdlMaxLengthValidator semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JdlPackage.Literals.JDL_MAX_LENGTH_VALIDATOR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JdlPackage.Literals.JDL_MAX_LENGTH_VALIDATOR__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJdlMaxLengthValidatorAccess().getValueINTTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JdlMaxValidator returns JdlMaxValidator
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_JdlMaxValidator(ISerializationContext context, JdlMaxValidator semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JdlPackage.Literals.JDL_MAX_VALIDATOR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JdlPackage.Literals.JDL_MAX_VALIDATOR__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJdlMaxValidatorAccess().getValueINTTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JdlMicroserviceGenerationSetting returns JdlGenerationSetting
	 *
	 * Constraint:
	 *     (microserviceGenerationSetting?='microservice' includes=JdlEntityInclusion appname=ID)
	 */
	protected void sequence_JdlMicroserviceGenerationSetting(ISerializationContext context, JdlGenerationSetting semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JdlPackage.Literals.JDL_GENERATION_SETTING__MICROSERVICE_GENERATION_SETTING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JdlPackage.Literals.JDL_GENERATION_SETTING__MICROSERVICE_GENERATION_SETTING));
			if (transientValues.isValueTransient(semanticObject, JdlPackage.Literals.JDL_GENERATION_SETTING__INCLUDES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JdlPackage.Literals.JDL_GENERATION_SETTING__INCLUDES));
			if (transientValues.isValueTransient(semanticObject, JdlPackage.Literals.JDL_GENERATION_SETTING__APPNAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JdlPackage.Literals.JDL_GENERATION_SETTING__APPNAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJdlMicroserviceGenerationSettingAccess().getMicroserviceGenerationSettingMicroserviceKeyword_0_0(), semanticObject.isMicroserviceGenerationSetting());
		feeder.accept(grammarAccess.getJdlMicroserviceGenerationSettingAccess().getIncludesJdlEntityInclusionParserRuleCall_1_0(), semanticObject.getIncludes());
		feeder.accept(grammarAccess.getJdlMicroserviceGenerationSettingAccess().getAppnameIDTerminalRuleCall_2_0(), semanticObject.getAppname());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JdlMinBytesValidator returns JdlMinBytesValidator
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_JdlMinBytesValidator(ISerializationContext context, JdlMinBytesValidator semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JdlPackage.Literals.JDL_MIN_BYTES_VALIDATOR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JdlPackage.Literals.JDL_MIN_BYTES_VALIDATOR__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJdlMinBytesValidatorAccess().getValueINTTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JdlMinLengthValidator returns JdlMinLengthValidator
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_JdlMinLengthValidator(ISerializationContext context, JdlMinLengthValidator semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JdlPackage.Literals.JDL_MIN_LENGTH_VALIDATOR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JdlPackage.Literals.JDL_MIN_LENGTH_VALIDATOR__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJdlMinLengthValidatorAccess().getValueINTTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JdlMinValidator returns JdlMinValidator
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_JdlMinValidator(ISerializationContext context, JdlMinValidator semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JdlPackage.Literals.JDL_MIN_VALIDATOR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JdlPackage.Literals.JDL_MIN_VALIDATOR__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJdlMinValidatorAccess().getValueINTTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JdlNumericField returns JdlEntityField
	 *
	 * Constraint:
	 *     (numericFieldType=JdlNumericFieldType validators=JdlNumericValidators?)
	 */
	protected void sequence_JdlNumericField(ISerializationContext context, JdlEntityField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JdlNumericValidators returns JdlNumericValidators
	 *
	 * Constraint:
	 *     (required=JdlRequiredValidator minlength=JdlMinValidator? maxlength=JdlMaxValidator?)
	 */
	protected void sequence_JdlNumericValidators(ISerializationContext context, JdlNumericValidators semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JdlPaginateGenerationSetting returns JdlGenerationSetting
	 *
	 * Constraint:
	 *     (paginateGenerationSetting?='paginate' includes=JdlEntityInclusion paginateType=JdlPaginateType)
	 */
	protected void sequence_JdlPaginateGenerationSetting(ISerializationContext context, JdlGenerationSetting semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JdlPackage.Literals.JDL_GENERATION_SETTING__PAGINATE_GENERATION_SETTING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JdlPackage.Literals.JDL_GENERATION_SETTING__PAGINATE_GENERATION_SETTING));
			if (transientValues.isValueTransient(semanticObject, JdlPackage.Literals.JDL_GENERATION_SETTING__INCLUDES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JdlPackage.Literals.JDL_GENERATION_SETTING__INCLUDES));
			if (transientValues.isValueTransient(semanticObject, JdlPackage.Literals.JDL_GENERATION_SETTING__PAGINATE_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JdlPackage.Literals.JDL_GENERATION_SETTING__PAGINATE_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJdlPaginateGenerationSettingAccess().getPaginateGenerationSettingPaginateKeyword_0_0(), semanticObject.isPaginateGenerationSetting());
		feeder.accept(grammarAccess.getJdlPaginateGenerationSettingAccess().getIncludesJdlEntityInclusionParserRuleCall_1_0(), semanticObject.getIncludes());
		feeder.accept(grammarAccess.getJdlPaginateGenerationSettingAccess().getPaginateTypeJdlPaginateTypeParserRuleCall_2_0(), semanticObject.getPaginateType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JdlPaginateType returns JdlPaginateType
	 *
	 * Constraint:
	 *     (pagination?='pager' | pagination?='pagination' | infiniteScroll?='infinite-scroll')
	 */
	protected void sequence_JdlPaginateType(ISerializationContext context, JdlPaginateType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JdlPatternValidator returns JdlPatternValidator
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_JdlPatternValidator(ISerializationContext context, JdlPatternValidator semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JdlPackage.Literals.JDL_PATTERN_VALIDATOR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JdlPackage.Literals.JDL_PATTERN_VALIDATOR__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJdlPatternValidatorAccess().getValueSTRINGTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JdlRelationshipName returns JdlRelationshipName
	 *
	 * Constraint:
	 *     (name=ID role=ID?)
	 */
	protected void sequence_JdlRelationshipName(ISerializationContext context, JdlRelationshipName semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JdlRelationship returns JdlRelationship
	 *
	 * Constraint:
	 *     (fromEntity=[JdlEntity|ID] fromName=JdlRelationshipName? toEntity=[JdlEntity|ID] toName=JdlRelationshipName?)
	 */
	protected void sequence_JdlRelationship(ISerializationContext context, JdlRelationship semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JdlFeature returns JdlRelationships
	 *     JdlRelationships returns JdlRelationships
	 *
	 * Constraint:
	 *     (cardinality=JdlCardinality relationships+=JdlRelationship* relationships+=JdlRelationship*)
	 */
	protected void sequence_JdlRelationships(ISerializationContext context, JdlRelationships semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JdlRequiredValidator returns JdlRequiredValidator
	 *
	 * Constraint:
	 *     required?='required'
	 */
	protected void sequence_JdlRequiredValidator(ISerializationContext context, JdlRequiredValidator semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JdlPackage.Literals.JDL_REQUIRED_VALIDATOR__REQUIRED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JdlPackage.Literals.JDL_REQUIRED_VALIDATOR__REQUIRED));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJdlRequiredValidatorAccess().getRequiredRequiredKeyword_0(), semanticObject.isRequired());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JdlSearchGenerationSetting returns JdlGenerationSetting
	 *
	 * Constraint:
	 *     (searchGenerationSetting?='search' includes=JdlEntityInclusion service=ID)
	 */
	protected void sequence_JdlSearchGenerationSetting(ISerializationContext context, JdlGenerationSetting semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JdlPackage.Literals.JDL_GENERATION_SETTING__SEARCH_GENERATION_SETTING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JdlPackage.Literals.JDL_GENERATION_SETTING__SEARCH_GENERATION_SETTING));
			if (transientValues.isValueTransient(semanticObject, JdlPackage.Literals.JDL_GENERATION_SETTING__INCLUDES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JdlPackage.Literals.JDL_GENERATION_SETTING__INCLUDES));
			if (transientValues.isValueTransient(semanticObject, JdlPackage.Literals.JDL_GENERATION_SETTING__SERVICE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JdlPackage.Literals.JDL_GENERATION_SETTING__SERVICE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJdlSearchGenerationSettingAccess().getSearchGenerationSettingSearchKeyword_0_0(), semanticObject.isSearchGenerationSetting());
		feeder.accept(grammarAccess.getJdlSearchGenerationSettingAccess().getIncludesJdlEntityInclusionParserRuleCall_1_0(), semanticObject.getIncludes());
		feeder.accept(grammarAccess.getJdlSearchGenerationSettingAccess().getServiceIDTerminalRuleCall_2_0(), semanticObject.getService());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JdlServiceGenerationSetting returns JdlGenerationSetting
	 *
	 * Constraint:
	 *     (serviceGenerationSetting?='service' includes=JdlEntityInclusion serviceType=JdlServiceType)
	 */
	protected void sequence_JdlServiceGenerationSetting(ISerializationContext context, JdlGenerationSetting semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JdlPackage.Literals.JDL_GENERATION_SETTING__SERVICE_GENERATION_SETTING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JdlPackage.Literals.JDL_GENERATION_SETTING__SERVICE_GENERATION_SETTING));
			if (transientValues.isValueTransient(semanticObject, JdlPackage.Literals.JDL_GENERATION_SETTING__INCLUDES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JdlPackage.Literals.JDL_GENERATION_SETTING__INCLUDES));
			if (transientValues.isValueTransient(semanticObject, JdlPackage.Literals.JDL_GENERATION_SETTING__SERVICE_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JdlPackage.Literals.JDL_GENERATION_SETTING__SERVICE_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJdlServiceGenerationSettingAccess().getServiceGenerationSettingServiceKeyword_0_0(), semanticObject.isServiceGenerationSetting());
		feeder.accept(grammarAccess.getJdlServiceGenerationSettingAccess().getIncludesJdlEntityInclusionParserRuleCall_1_0(), semanticObject.getIncludes());
		feeder.accept(grammarAccess.getJdlServiceGenerationSettingAccess().getServiceTypeJdlServiceTypeEnumRuleCall_2_0(), semanticObject.getServiceType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JdlStringField returns JdlEntityField
	 *
	 * Constraint:
	 *     (stringType?='String' validators=JdlStringValidators?)
	 */
	protected void sequence_JdlStringField(ISerializationContext context, JdlEntityField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JdlStringValidators returns JdlStringValidators
	 *
	 * Constraint:
	 *     (required?=JdlRequiredValidator minLength=JdlMinLengthValidator? maxlength=JdlMaxLengthValidator? pattern=JdlPatternValidator?)
	 */
	protected void sequence_JdlStringValidators(ISerializationContext context, JdlStringValidators semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JdlWildcardPredicate returns JdlWildcardPredicate
	 *
	 * Constraint:
	 *     (wildcard?='*' | all?='all')
	 */
	protected void sequence_JdlWildcardPredicate(ISerializationContext context, JdlWildcardPredicate semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
