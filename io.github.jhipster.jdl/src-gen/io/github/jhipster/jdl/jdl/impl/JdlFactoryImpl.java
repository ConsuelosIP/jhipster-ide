/**
 * generated by Xtext 2.10.0
 */
package io.github.jhipster.jdl.jdl.impl;

import io.github.jhipster.jdl.jdl.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class JdlFactoryImpl extends EFactoryImpl implements JdlFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static JdlFactory init()
  {
    try
    {
      JdlFactory theJdlFactory = (JdlFactory)EPackage.Registry.INSTANCE.getEFactory(JdlPackage.eNS_URI);
      if (theJdlFactory != null)
      {
        return theJdlFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new JdlFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JdlFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case JdlPackage.JDL_DOMAIN_MODEL: return createJdlDomainModel();
      case JdlPackage.JDL_FEATURE: return createJdlFeature();
      case JdlPackage.JDL_ENTITY: return createJdlEntity();
      case JdlPackage.JDL_ENTITY_FIELD: return createJdlEntityField();
      case JdlPackage.JDL_FIELD_TYPE: return createJdlFieldType();
      case JdlPackage.JDL_STRING_VALIDATORS: return createJdlStringValidators();
      case JdlPackage.JDL_NUMERIC_VALIDATORS: return createJdlNumericValidators();
      case JdlPackage.JDL_BLOB_VALIDATORS: return createJdlBlobValidators();
      case JdlPackage.JDL_REQUIRED_VALIDATOR: return createJdlRequiredValidator();
      case JdlPackage.JDL_MIN_LENGTH_VALIDATOR: return createJdlMinLengthValidator();
      case JdlPackage.JDL_MAX_LENGTH_VALIDATOR: return createJdlMaxLengthValidator();
      case JdlPackage.JDL_PATTERN_VALIDATOR: return createJdlPatternValidator();
      case JdlPackage.JDL_MIN_VALIDATOR: return createJdlMinValidator();
      case JdlPackage.JDL_MAX_VALIDATOR: return createJdlMaxValidator();
      case JdlPackage.JDL_MIN_BYTES_VALIDATOR: return createJdlMinBytesValidator();
      case JdlPackage.JDL_MAX_BYTES_VALIDATOR: return createJdlMaxBytesValidator();
      case JdlPackage.JDL_RELATIONSHIPS: return createJdlRelationships();
      case JdlPackage.JDL_RELATIONSHIP: return createJdlRelationship();
      case JdlPackage.JDL_RELATIONSHIP_NAME: return createJdlRelationshipName();
      case JdlPackage.JDL_ENUM_TYPE: return createJdlEnumType();
      case JdlPackage.JDL_GENERATION_SETTING: return createJdlGenerationSetting();
      case JdlPackage.JDL_GENERATION_SETTING_TYPE: return createJdlGenerationSettingType();
      case JdlPackage.JDL_ENTITY_INCLUSION: return createJdlEntityInclusion();
      case JdlPackage.JDL_ENTITY_EXCLUSION: return createJdlEntityExclusion();
      case JdlPackage.JDL_WILDCARD_PREDICATE: return createJdlWildcardPredicate();
      case JdlPackage.JDL_PAGINATE_TYPE: return createJdlPaginateType();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case JdlPackage.JDL_NUMERIC_FIELD_TYPE:
        return createJdlNumericFieldTypeFromString(eDataType, initialValue);
      case JdlPackage.JDL_BLOB_FIELD_TYPE:
        return createJdlBlobFieldTypeFromString(eDataType, initialValue);
      case JdlPackage.JDL_CARDINALITY:
        return createJdlCardinalityFromString(eDataType, initialValue);
      case JdlPackage.JDL_SERVICE_TYPE:
        return createJdlServiceTypeFromString(eDataType, initialValue);
      case JdlPackage.JDL_DTO_TYPE:
        return createJdlDtoTypeFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case JdlPackage.JDL_NUMERIC_FIELD_TYPE:
        return convertJdlNumericFieldTypeToString(eDataType, instanceValue);
      case JdlPackage.JDL_BLOB_FIELD_TYPE:
        return convertJdlBlobFieldTypeToString(eDataType, instanceValue);
      case JdlPackage.JDL_CARDINALITY:
        return convertJdlCardinalityToString(eDataType, instanceValue);
      case JdlPackage.JDL_SERVICE_TYPE:
        return convertJdlServiceTypeToString(eDataType, instanceValue);
      case JdlPackage.JDL_DTO_TYPE:
        return convertJdlDtoTypeToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JdlDomainModel createJdlDomainModel()
  {
    JdlDomainModelImpl jdlDomainModel = new JdlDomainModelImpl();
    return jdlDomainModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JdlFeature createJdlFeature()
  {
    JdlFeatureImpl jdlFeature = new JdlFeatureImpl();
    return jdlFeature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JdlEntity createJdlEntity()
  {
    JdlEntityImpl jdlEntity = new JdlEntityImpl();
    return jdlEntity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JdlEntityField createJdlEntityField()
  {
    JdlEntityFieldImpl jdlEntityField = new JdlEntityFieldImpl();
    return jdlEntityField;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JdlFieldType createJdlFieldType()
  {
    JdlFieldTypeImpl jdlFieldType = new JdlFieldTypeImpl();
    return jdlFieldType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JdlStringValidators createJdlStringValidators()
  {
    JdlStringValidatorsImpl jdlStringValidators = new JdlStringValidatorsImpl();
    return jdlStringValidators;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JdlNumericValidators createJdlNumericValidators()
  {
    JdlNumericValidatorsImpl jdlNumericValidators = new JdlNumericValidatorsImpl();
    return jdlNumericValidators;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JdlBlobValidators createJdlBlobValidators()
  {
    JdlBlobValidatorsImpl jdlBlobValidators = new JdlBlobValidatorsImpl();
    return jdlBlobValidators;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JdlRequiredValidator createJdlRequiredValidator()
  {
    JdlRequiredValidatorImpl jdlRequiredValidator = new JdlRequiredValidatorImpl();
    return jdlRequiredValidator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JdlMinLengthValidator createJdlMinLengthValidator()
  {
    JdlMinLengthValidatorImpl jdlMinLengthValidator = new JdlMinLengthValidatorImpl();
    return jdlMinLengthValidator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JdlMaxLengthValidator createJdlMaxLengthValidator()
  {
    JdlMaxLengthValidatorImpl jdlMaxLengthValidator = new JdlMaxLengthValidatorImpl();
    return jdlMaxLengthValidator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JdlPatternValidator createJdlPatternValidator()
  {
    JdlPatternValidatorImpl jdlPatternValidator = new JdlPatternValidatorImpl();
    return jdlPatternValidator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JdlMinValidator createJdlMinValidator()
  {
    JdlMinValidatorImpl jdlMinValidator = new JdlMinValidatorImpl();
    return jdlMinValidator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JdlMaxValidator createJdlMaxValidator()
  {
    JdlMaxValidatorImpl jdlMaxValidator = new JdlMaxValidatorImpl();
    return jdlMaxValidator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JdlMinBytesValidator createJdlMinBytesValidator()
  {
    JdlMinBytesValidatorImpl jdlMinBytesValidator = new JdlMinBytesValidatorImpl();
    return jdlMinBytesValidator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JdlMaxBytesValidator createJdlMaxBytesValidator()
  {
    JdlMaxBytesValidatorImpl jdlMaxBytesValidator = new JdlMaxBytesValidatorImpl();
    return jdlMaxBytesValidator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JdlRelationships createJdlRelationships()
  {
    JdlRelationshipsImpl jdlRelationships = new JdlRelationshipsImpl();
    return jdlRelationships;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JdlRelationship createJdlRelationship()
  {
    JdlRelationshipImpl jdlRelationship = new JdlRelationshipImpl();
    return jdlRelationship;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JdlRelationshipName createJdlRelationshipName()
  {
    JdlRelationshipNameImpl jdlRelationshipName = new JdlRelationshipNameImpl();
    return jdlRelationshipName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JdlEnumType createJdlEnumType()
  {
    JdlEnumTypeImpl jdlEnumType = new JdlEnumTypeImpl();
    return jdlEnumType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JdlGenerationSetting createJdlGenerationSetting()
  {
    JdlGenerationSettingImpl jdlGenerationSetting = new JdlGenerationSettingImpl();
    return jdlGenerationSetting;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JdlGenerationSettingType createJdlGenerationSettingType()
  {
    JdlGenerationSettingTypeImpl jdlGenerationSettingType = new JdlGenerationSettingTypeImpl();
    return jdlGenerationSettingType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JdlEntityInclusion createJdlEntityInclusion()
  {
    JdlEntityInclusionImpl jdlEntityInclusion = new JdlEntityInclusionImpl();
    return jdlEntityInclusion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JdlEntityExclusion createJdlEntityExclusion()
  {
    JdlEntityExclusionImpl jdlEntityExclusion = new JdlEntityExclusionImpl();
    return jdlEntityExclusion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JdlWildcardPredicate createJdlWildcardPredicate()
  {
    JdlWildcardPredicateImpl jdlWildcardPredicate = new JdlWildcardPredicateImpl();
    return jdlWildcardPredicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JdlPaginateType createJdlPaginateType()
  {
    JdlPaginateTypeImpl jdlPaginateType = new JdlPaginateTypeImpl();
    return jdlPaginateType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JdlNumericFieldType createJdlNumericFieldTypeFromString(EDataType eDataType, String initialValue)
  {
    JdlNumericFieldType result = JdlNumericFieldType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertJdlNumericFieldTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JdlBlobFieldType createJdlBlobFieldTypeFromString(EDataType eDataType, String initialValue)
  {
    JdlBlobFieldType result = JdlBlobFieldType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertJdlBlobFieldTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JdlCardinality createJdlCardinalityFromString(EDataType eDataType, String initialValue)
  {
    JdlCardinality result = JdlCardinality.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertJdlCardinalityToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JdlServiceType createJdlServiceTypeFromString(EDataType eDataType, String initialValue)
  {
    JdlServiceType result = JdlServiceType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertJdlServiceTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JdlDtoType createJdlDtoTypeFromString(EDataType eDataType, String initialValue)
  {
    JdlDtoType result = JdlDtoType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertJdlDtoTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JdlPackage getJdlPackage()
  {
    return (JdlPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static JdlPackage getPackage()
  {
    return JdlPackage.eINSTANCE;
  }

} //JdlFactoryImpl
