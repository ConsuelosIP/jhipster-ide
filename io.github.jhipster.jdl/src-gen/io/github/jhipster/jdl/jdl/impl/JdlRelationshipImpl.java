/**
 * generated by Xtext 2.10.0
 */
package io.github.jhipster.jdl.jdl.impl;

import io.github.jhipster.jdl.jdl.JdlEntity;
import io.github.jhipster.jdl.jdl.JdlPackage;
import io.github.jhipster.jdl.jdl.JdlRelationship;
import io.github.jhipster.jdl.jdl.JdlRelationshipName;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Relationship</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link io.github.jhipster.jdl.jdl.impl.JdlRelationshipImpl#getFromEntity <em>From Entity</em>}</li>
 *   <li>{@link io.github.jhipster.jdl.jdl.impl.JdlRelationshipImpl#getFromName <em>From Name</em>}</li>
 *   <li>{@link io.github.jhipster.jdl.jdl.impl.JdlRelationshipImpl#getToEntity <em>To Entity</em>}</li>
 *   <li>{@link io.github.jhipster.jdl.jdl.impl.JdlRelationshipImpl#getToName <em>To Name</em>}</li>
 * </ul>
 *
 * @generated
 */
public class JdlRelationshipImpl extends MinimalEObjectImpl.Container implements JdlRelationship
{
  /**
   * The cached value of the '{@link #getFromEntity() <em>From Entity</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFromEntity()
   * @generated
   * @ordered
   */
  protected JdlEntity fromEntity;

  /**
   * The cached value of the '{@link #getFromName() <em>From Name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFromName()
   * @generated
   * @ordered
   */
  protected JdlRelationshipName fromName;

  /**
   * The cached value of the '{@link #getToEntity() <em>To Entity</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getToEntity()
   * @generated
   * @ordered
   */
  protected JdlEntity toEntity;

  /**
   * The cached value of the '{@link #getToName() <em>To Name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getToName()
   * @generated
   * @ordered
   */
  protected JdlRelationshipName toName;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected JdlRelationshipImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return JdlPackage.Literals.JDL_RELATIONSHIP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JdlEntity getFromEntity()
  {
    if (fromEntity != null && fromEntity.eIsProxy())
    {
      InternalEObject oldFromEntity = (InternalEObject)fromEntity;
      fromEntity = (JdlEntity)eResolveProxy(oldFromEntity);
      if (fromEntity != oldFromEntity)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, JdlPackage.JDL_RELATIONSHIP__FROM_ENTITY, oldFromEntity, fromEntity));
      }
    }
    return fromEntity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JdlEntity basicGetFromEntity()
  {
    return fromEntity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFromEntity(JdlEntity newFromEntity)
  {
    JdlEntity oldFromEntity = fromEntity;
    fromEntity = newFromEntity;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JdlPackage.JDL_RELATIONSHIP__FROM_ENTITY, oldFromEntity, fromEntity));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JdlRelationshipName getFromName()
  {
    return fromName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFromName(JdlRelationshipName newFromName, NotificationChain msgs)
  {
    JdlRelationshipName oldFromName = fromName;
    fromName = newFromName;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JdlPackage.JDL_RELATIONSHIP__FROM_NAME, oldFromName, newFromName);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFromName(JdlRelationshipName newFromName)
  {
    if (newFromName != fromName)
    {
      NotificationChain msgs = null;
      if (fromName != null)
        msgs = ((InternalEObject)fromName).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JdlPackage.JDL_RELATIONSHIP__FROM_NAME, null, msgs);
      if (newFromName != null)
        msgs = ((InternalEObject)newFromName).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JdlPackage.JDL_RELATIONSHIP__FROM_NAME, null, msgs);
      msgs = basicSetFromName(newFromName, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JdlPackage.JDL_RELATIONSHIP__FROM_NAME, newFromName, newFromName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JdlEntity getToEntity()
  {
    if (toEntity != null && toEntity.eIsProxy())
    {
      InternalEObject oldToEntity = (InternalEObject)toEntity;
      toEntity = (JdlEntity)eResolveProxy(oldToEntity);
      if (toEntity != oldToEntity)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, JdlPackage.JDL_RELATIONSHIP__TO_ENTITY, oldToEntity, toEntity));
      }
    }
    return toEntity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JdlEntity basicGetToEntity()
  {
    return toEntity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setToEntity(JdlEntity newToEntity)
  {
    JdlEntity oldToEntity = toEntity;
    toEntity = newToEntity;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JdlPackage.JDL_RELATIONSHIP__TO_ENTITY, oldToEntity, toEntity));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JdlRelationshipName getToName()
  {
    return toName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetToName(JdlRelationshipName newToName, NotificationChain msgs)
  {
    JdlRelationshipName oldToName = toName;
    toName = newToName;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JdlPackage.JDL_RELATIONSHIP__TO_NAME, oldToName, newToName);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setToName(JdlRelationshipName newToName)
  {
    if (newToName != toName)
    {
      NotificationChain msgs = null;
      if (toName != null)
        msgs = ((InternalEObject)toName).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JdlPackage.JDL_RELATIONSHIP__TO_NAME, null, msgs);
      if (newToName != null)
        msgs = ((InternalEObject)newToName).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JdlPackage.JDL_RELATIONSHIP__TO_NAME, null, msgs);
      msgs = basicSetToName(newToName, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JdlPackage.JDL_RELATIONSHIP__TO_NAME, newToName, newToName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case JdlPackage.JDL_RELATIONSHIP__FROM_NAME:
        return basicSetFromName(null, msgs);
      case JdlPackage.JDL_RELATIONSHIP__TO_NAME:
        return basicSetToName(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case JdlPackage.JDL_RELATIONSHIP__FROM_ENTITY:
        if (resolve) return getFromEntity();
        return basicGetFromEntity();
      case JdlPackage.JDL_RELATIONSHIP__FROM_NAME:
        return getFromName();
      case JdlPackage.JDL_RELATIONSHIP__TO_ENTITY:
        if (resolve) return getToEntity();
        return basicGetToEntity();
      case JdlPackage.JDL_RELATIONSHIP__TO_NAME:
        return getToName();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case JdlPackage.JDL_RELATIONSHIP__FROM_ENTITY:
        setFromEntity((JdlEntity)newValue);
        return;
      case JdlPackage.JDL_RELATIONSHIP__FROM_NAME:
        setFromName((JdlRelationshipName)newValue);
        return;
      case JdlPackage.JDL_RELATIONSHIP__TO_ENTITY:
        setToEntity((JdlEntity)newValue);
        return;
      case JdlPackage.JDL_RELATIONSHIP__TO_NAME:
        setToName((JdlRelationshipName)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case JdlPackage.JDL_RELATIONSHIP__FROM_ENTITY:
        setFromEntity((JdlEntity)null);
        return;
      case JdlPackage.JDL_RELATIONSHIP__FROM_NAME:
        setFromName((JdlRelationshipName)null);
        return;
      case JdlPackage.JDL_RELATIONSHIP__TO_ENTITY:
        setToEntity((JdlEntity)null);
        return;
      case JdlPackage.JDL_RELATIONSHIP__TO_NAME:
        setToName((JdlRelationshipName)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case JdlPackage.JDL_RELATIONSHIP__FROM_ENTITY:
        return fromEntity != null;
      case JdlPackage.JDL_RELATIONSHIP__FROM_NAME:
        return fromName != null;
      case JdlPackage.JDL_RELATIONSHIP__TO_ENTITY:
        return toEntity != null;
      case JdlPackage.JDL_RELATIONSHIP__TO_NAME:
        return toName != null;
    }
    return super.eIsSet(featureID);
  }

} //JdlRelationshipImpl
