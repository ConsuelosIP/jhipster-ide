/**
 * generated by Xtext 2.10.0
 */
package io.github.jhipster.jdl.jdl.impl;

import io.github.jhipster.jdl.jdl.JdlMaxValidator;
import io.github.jhipster.jdl.jdl.JdlMinValidator;
import io.github.jhipster.jdl.jdl.JdlNumericValidators;
import io.github.jhipster.jdl.jdl.JdlPackage;
import io.github.jhipster.jdl.jdl.JdlRequiredValidator;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Numeric Validators</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link io.github.jhipster.jdl.jdl.impl.JdlNumericValidatorsImpl#getRequired <em>Required</em>}</li>
 *   <li>{@link io.github.jhipster.jdl.jdl.impl.JdlNumericValidatorsImpl#getMinlength <em>Minlength</em>}</li>
 *   <li>{@link io.github.jhipster.jdl.jdl.impl.JdlNumericValidatorsImpl#getMaxlength <em>Maxlength</em>}</li>
 * </ul>
 *
 * @generated
 */
public class JdlNumericValidatorsImpl extends MinimalEObjectImpl.Container implements JdlNumericValidators
{
  /**
   * The cached value of the '{@link #getRequired() <em>Required</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRequired()
   * @generated
   * @ordered
   */
  protected JdlRequiredValidator required;

  /**
   * The cached value of the '{@link #getMinlength() <em>Minlength</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMinlength()
   * @generated
   * @ordered
   */
  protected JdlMinValidator minlength;

  /**
   * The cached value of the '{@link #getMaxlength() <em>Maxlength</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMaxlength()
   * @generated
   * @ordered
   */
  protected JdlMaxValidator maxlength;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected JdlNumericValidatorsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return JdlPackage.Literals.JDL_NUMERIC_VALIDATORS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JdlRequiredValidator getRequired()
  {
    return required;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRequired(JdlRequiredValidator newRequired, NotificationChain msgs)
  {
    JdlRequiredValidator oldRequired = required;
    required = newRequired;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JdlPackage.JDL_NUMERIC_VALIDATORS__REQUIRED, oldRequired, newRequired);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRequired(JdlRequiredValidator newRequired)
  {
    if (newRequired != required)
    {
      NotificationChain msgs = null;
      if (required != null)
        msgs = ((InternalEObject)required).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JdlPackage.JDL_NUMERIC_VALIDATORS__REQUIRED, null, msgs);
      if (newRequired != null)
        msgs = ((InternalEObject)newRequired).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JdlPackage.JDL_NUMERIC_VALIDATORS__REQUIRED, null, msgs);
      msgs = basicSetRequired(newRequired, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JdlPackage.JDL_NUMERIC_VALIDATORS__REQUIRED, newRequired, newRequired));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JdlMinValidator getMinlength()
  {
    return minlength;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMinlength(JdlMinValidator newMinlength, NotificationChain msgs)
  {
    JdlMinValidator oldMinlength = minlength;
    minlength = newMinlength;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JdlPackage.JDL_NUMERIC_VALIDATORS__MINLENGTH, oldMinlength, newMinlength);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMinlength(JdlMinValidator newMinlength)
  {
    if (newMinlength != minlength)
    {
      NotificationChain msgs = null;
      if (minlength != null)
        msgs = ((InternalEObject)minlength).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JdlPackage.JDL_NUMERIC_VALIDATORS__MINLENGTH, null, msgs);
      if (newMinlength != null)
        msgs = ((InternalEObject)newMinlength).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JdlPackage.JDL_NUMERIC_VALIDATORS__MINLENGTH, null, msgs);
      msgs = basicSetMinlength(newMinlength, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JdlPackage.JDL_NUMERIC_VALIDATORS__MINLENGTH, newMinlength, newMinlength));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JdlMaxValidator getMaxlength()
  {
    return maxlength;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMaxlength(JdlMaxValidator newMaxlength, NotificationChain msgs)
  {
    JdlMaxValidator oldMaxlength = maxlength;
    maxlength = newMaxlength;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JdlPackage.JDL_NUMERIC_VALIDATORS__MAXLENGTH, oldMaxlength, newMaxlength);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMaxlength(JdlMaxValidator newMaxlength)
  {
    if (newMaxlength != maxlength)
    {
      NotificationChain msgs = null;
      if (maxlength != null)
        msgs = ((InternalEObject)maxlength).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JdlPackage.JDL_NUMERIC_VALIDATORS__MAXLENGTH, null, msgs);
      if (newMaxlength != null)
        msgs = ((InternalEObject)newMaxlength).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JdlPackage.JDL_NUMERIC_VALIDATORS__MAXLENGTH, null, msgs);
      msgs = basicSetMaxlength(newMaxlength, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JdlPackage.JDL_NUMERIC_VALIDATORS__MAXLENGTH, newMaxlength, newMaxlength));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case JdlPackage.JDL_NUMERIC_VALIDATORS__REQUIRED:
        return basicSetRequired(null, msgs);
      case JdlPackage.JDL_NUMERIC_VALIDATORS__MINLENGTH:
        return basicSetMinlength(null, msgs);
      case JdlPackage.JDL_NUMERIC_VALIDATORS__MAXLENGTH:
        return basicSetMaxlength(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case JdlPackage.JDL_NUMERIC_VALIDATORS__REQUIRED:
        return getRequired();
      case JdlPackage.JDL_NUMERIC_VALIDATORS__MINLENGTH:
        return getMinlength();
      case JdlPackage.JDL_NUMERIC_VALIDATORS__MAXLENGTH:
        return getMaxlength();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case JdlPackage.JDL_NUMERIC_VALIDATORS__REQUIRED:
        setRequired((JdlRequiredValidator)newValue);
        return;
      case JdlPackage.JDL_NUMERIC_VALIDATORS__MINLENGTH:
        setMinlength((JdlMinValidator)newValue);
        return;
      case JdlPackage.JDL_NUMERIC_VALIDATORS__MAXLENGTH:
        setMaxlength((JdlMaxValidator)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case JdlPackage.JDL_NUMERIC_VALIDATORS__REQUIRED:
        setRequired((JdlRequiredValidator)null);
        return;
      case JdlPackage.JDL_NUMERIC_VALIDATORS__MINLENGTH:
        setMinlength((JdlMinValidator)null);
        return;
      case JdlPackage.JDL_NUMERIC_VALIDATORS__MAXLENGTH:
        setMaxlength((JdlMaxValidator)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case JdlPackage.JDL_NUMERIC_VALIDATORS__REQUIRED:
        return required != null;
      case JdlPackage.JDL_NUMERIC_VALIDATORS__MINLENGTH:
        return minlength != null;
      case JdlPackage.JDL_NUMERIC_VALIDATORS__MAXLENGTH:
        return maxlength != null;
    }
    return super.eIsSet(featureID);
  }

} //JdlNumericValidatorsImpl
