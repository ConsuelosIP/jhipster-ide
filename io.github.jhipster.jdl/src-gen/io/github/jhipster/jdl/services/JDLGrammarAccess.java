/*
 * generated by Xtext 2.10.0
 */
package io.github.jhipster.jdl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class JDLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class JdlDomainModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.JDL.JdlDomainModel");
		private final Assignment cFeaturesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFeaturesJdlFeatureParserRuleCall_0 = (RuleCall)cFeaturesAssignment.eContents().get(0);
		
		/// * =========================================================================
		// * ROOT ELEMENTS
		// * ========================================================================= * / JdlDomainModel:
		//	features+=JdlFeature*;
		@Override public ParserRule getRule() { return rule; }
		
		//features+=JdlFeature*
		public Assignment getFeaturesAssignment() { return cFeaturesAssignment; }
		
		//JdlFeature
		public RuleCall getFeaturesJdlFeatureParserRuleCall_0() { return cFeaturesJdlFeatureParserRuleCall_0; }
	}
	public class JdlFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.JDL.JdlFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJdlEntityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJdlEnumTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cJdlRelationshipsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cJdlGenerationSettingParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//JdlFeature:
		//	JdlEntity | JdlEnumType | JdlRelationships | JdlGenerationSetting;
		@Override public ParserRule getRule() { return rule; }
		
		//JdlEntity | JdlEnumType | JdlRelationships | JdlGenerationSetting
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//JdlEntity
		public RuleCall getJdlEntityParserRuleCall_0() { return cJdlEntityParserRuleCall_0; }
		
		//JdlEnumType
		public RuleCall getJdlEnumTypeParserRuleCall_1() { return cJdlEnumTypeParserRuleCall_1; }
		
		//JdlRelationships
		public RuleCall getJdlRelationshipsParserRuleCall_2() { return cJdlRelationshipsParserRuleCall_2; }
		
		//JdlGenerationSetting
		public RuleCall getJdlGenerationSettingParserRuleCall_3() { return cJdlGenerationSettingParserRuleCall_3; }
	}
	public class JdlEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.JDL.JdlEntity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cFieldsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cFieldsJdlEntityFieldParserRuleCall_2_1_0_0 = (RuleCall)cFieldsAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cFieldsAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cFieldsJdlEntityFieldParserRuleCall_2_1_1_1_0 = (RuleCall)cFieldsAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		/// * =========================================================================
		// * ENTITY
		// * ========================================================================= * / JdlEntity:
		//	'entity' name=ID ('{' (fields+=JdlEntityField (',' fields+=JdlEntityField)*)?
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'entity' name=ID ('{' (fields+=JdlEntityField (',' fields+=JdlEntityField)*)? '}')?
		public Group getGroup() { return cGroup; }
		
		//'entity'
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('{' (fields+=JdlEntityField (',' fields+=JdlEntityField)*)? '}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//(fields+=JdlEntityField (',' fields+=JdlEntityField)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//fields+=JdlEntityField
		public Assignment getFieldsAssignment_2_1_0() { return cFieldsAssignment_2_1_0; }
		
		//JdlEntityField
		public RuleCall getFieldsJdlEntityFieldParserRuleCall_2_1_0_0() { return cFieldsJdlEntityFieldParserRuleCall_2_1_0_0; }
		
		//(',' fields+=JdlEntityField)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }
		
		//fields+=JdlEntityField
		public Assignment getFieldsAssignment_2_1_1_1() { return cFieldsAssignment_2_1_1_1; }
		
		//JdlEntityField
		public RuleCall getFieldsJdlEntityFieldParserRuleCall_2_1_1_1_0() { return cFieldsJdlEntityFieldParserRuleCall_2_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}
	public class JdlEntityFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.JDL.JdlEntityField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeJdlFieldTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//JdlEntityField:
		//	name=ID type=JdlFieldType;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID type=JdlFieldType
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//type=JdlFieldType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//JdlFieldType
		public RuleCall getTypeJdlFieldTypeParserRuleCall_1_0() { return cTypeJdlFieldTypeParserRuleCall_1_0; }
	}
	public class JdlFieldTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.JDL.JdlFieldType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJdlEnumFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJdlStringFieldParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cJdlNumericFieldParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cJdlBooleanFieldParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cJdlDateFieldParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cJdlBlobFieldParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//JdlFieldType:
		//	JdlEnumField | JdlStringField | JdlNumericField | JdlBooleanField | JdlDateField | JdlBlobField;
		@Override public ParserRule getRule() { return rule; }
		
		//JdlEnumField | JdlStringField | JdlNumericField | JdlBooleanField | JdlDateField | JdlBlobField
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//JdlEnumField
		public RuleCall getJdlEnumFieldParserRuleCall_0() { return cJdlEnumFieldParserRuleCall_0; }
		
		//JdlStringField
		public RuleCall getJdlStringFieldParserRuleCall_1() { return cJdlStringFieldParserRuleCall_1; }
		
		//JdlNumericField
		public RuleCall getJdlNumericFieldParserRuleCall_2() { return cJdlNumericFieldParserRuleCall_2; }
		
		//JdlBooleanField
		public RuleCall getJdlBooleanFieldParserRuleCall_3() { return cJdlBooleanFieldParserRuleCall_3; }
		
		//JdlDateField
		public RuleCall getJdlDateFieldParserRuleCall_4() { return cJdlDateFieldParserRuleCall_4; }
		
		//JdlBlobField
		public RuleCall getJdlBlobFieldParserRuleCall_5() { return cJdlBlobFieldParserRuleCall_5; }
	}
	public class JdlEnumFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.JDL.JdlEnumField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEnumTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cEnumTypeJdlEnumTypeCrossReference_0_0 = (CrossReference)cEnumTypeAssignment_0.eContents().get(0);
		private final RuleCall cEnumTypeJdlEnumTypeIDTerminalRuleCall_0_0_1 = (RuleCall)cEnumTypeJdlEnumTypeCrossReference_0_0.eContents().get(1);
		private final Assignment cValidatorsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValidatorsJdlRequiredValidatorParserRuleCall_1_0 = (RuleCall)cValidatorsAssignment_1.eContents().get(0);
		
		//JdlEnumField JdlEntityField:
		//	enumType=[JdlEnumType] validators=JdlRequiredValidator?
		@Override public ParserRule getRule() { return rule; }
		
		//enumType=[JdlEnumType] validators=JdlRequiredValidator?
		public Group getGroup() { return cGroup; }
		
		//enumType=[JdlEnumType]
		public Assignment getEnumTypeAssignment_0() { return cEnumTypeAssignment_0; }
		
		//[JdlEnumType]
		public CrossReference getEnumTypeJdlEnumTypeCrossReference_0_0() { return cEnumTypeJdlEnumTypeCrossReference_0_0; }
		
		//ID
		public RuleCall getEnumTypeJdlEnumTypeIDTerminalRuleCall_0_0_1() { return cEnumTypeJdlEnumTypeIDTerminalRuleCall_0_0_1; }
		
		//validators=JdlRequiredValidator?
		public Assignment getValidatorsAssignment_1() { return cValidatorsAssignment_1; }
		
		//JdlRequiredValidator
		public RuleCall getValidatorsJdlRequiredValidatorParserRuleCall_1_0() { return cValidatorsJdlRequiredValidatorParserRuleCall_1_0; }
	}
	public class JdlStringFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.JDL.JdlStringField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStringTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cStringTypeStringKeyword_0_0 = (Keyword)cStringTypeAssignment_0.eContents().get(0);
		private final Assignment cValidatorsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValidatorsJdlStringValidatorsParserRuleCall_1_0 = (RuleCall)cValidatorsAssignment_1.eContents().get(0);
		
		//JdlStringField JdlEntityField:
		//	stringType?='String' validators=JdlStringValidators?
		@Override public ParserRule getRule() { return rule; }
		
		//stringType?='String' validators=JdlStringValidators?
		public Group getGroup() { return cGroup; }
		
		//stringType?='String'
		public Assignment getStringTypeAssignment_0() { return cStringTypeAssignment_0; }
		
		//'String'
		public Keyword getStringTypeStringKeyword_0_0() { return cStringTypeStringKeyword_0_0; }
		
		//validators=JdlStringValidators?
		public Assignment getValidatorsAssignment_1() { return cValidatorsAssignment_1; }
		
		//JdlStringValidators
		public RuleCall getValidatorsJdlStringValidatorsParserRuleCall_1_0() { return cValidatorsJdlStringValidatorsParserRuleCall_1_0; }
	}
	public class JdlNumericFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.JDL.JdlNumericField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNumericFieldTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNumericFieldTypeJdlNumericFieldTypeEnumRuleCall_0_0 = (RuleCall)cNumericFieldTypeAssignment_0.eContents().get(0);
		private final Assignment cValidatorsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValidatorsJdlNumericValidatorsParserRuleCall_1_0 = (RuleCall)cValidatorsAssignment_1.eContents().get(0);
		
		//JdlNumericField JdlEntityField:
		//	numericFieldType=JdlNumericFieldType validators=JdlNumericValidators?
		@Override public ParserRule getRule() { return rule; }
		
		//numericFieldType=JdlNumericFieldType validators=JdlNumericValidators?
		public Group getGroup() { return cGroup; }
		
		//numericFieldType=JdlNumericFieldType
		public Assignment getNumericFieldTypeAssignment_0() { return cNumericFieldTypeAssignment_0; }
		
		//JdlNumericFieldType
		public RuleCall getNumericFieldTypeJdlNumericFieldTypeEnumRuleCall_0_0() { return cNumericFieldTypeJdlNumericFieldTypeEnumRuleCall_0_0; }
		
		//validators=JdlNumericValidators?
		public Assignment getValidatorsAssignment_1() { return cValidatorsAssignment_1; }
		
		//JdlNumericValidators
		public RuleCall getValidatorsJdlNumericValidatorsParserRuleCall_1_0() { return cValidatorsJdlNumericValidatorsParserRuleCall_1_0; }
	}
	public class JdlBooleanFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.JDL.JdlBooleanField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBooleanTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cBooleanTypeBooleanKeyword_0_0 = (Keyword)cBooleanTypeAssignment_0.eContents().get(0);
		private final Assignment cValidatorsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValidatorsJdlRequiredValidatorParserRuleCall_1_0 = (RuleCall)cValidatorsAssignment_1.eContents().get(0);
		
		//JdlBooleanField JdlEntityField:
		//	booleanType?='Boolean' validators=JdlRequiredValidator?
		@Override public ParserRule getRule() { return rule; }
		
		//booleanType?='Boolean' validators=JdlRequiredValidator?
		public Group getGroup() { return cGroup; }
		
		//booleanType?='Boolean'
		public Assignment getBooleanTypeAssignment_0() { return cBooleanTypeAssignment_0; }
		
		//'Boolean'
		public Keyword getBooleanTypeBooleanKeyword_0_0() { return cBooleanTypeBooleanKeyword_0_0; }
		
		//validators=JdlRequiredValidator?
		public Assignment getValidatorsAssignment_1() { return cValidatorsAssignment_1; }
		
		//JdlRequiredValidator
		public RuleCall getValidatorsJdlRequiredValidatorParserRuleCall_1_0() { return cValidatorsJdlRequiredValidatorParserRuleCall_1_0; }
	}
	public class JdlDateFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.JDL.JdlDateField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cLocalDateTypeAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cLocalDateTypeLocalDateKeyword_0_0_0 = (Keyword)cLocalDateTypeAssignment_0_0.eContents().get(0);
		private final Assignment cZonedDateTimeTypeAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cZonedDateTimeTypeZonedDateTimeKeyword_0_1_0 = (Keyword)cZonedDateTimeTypeAssignment_0_1.eContents().get(0);
		private final Assignment cValidatorsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValidatorsJdlRequiredValidatorParserRuleCall_1_0 = (RuleCall)cValidatorsAssignment_1.eContents().get(0);
		
		//JdlDateField JdlEntityField:
		//	(localDateType?='LocalDate' | zonedDateTimeType?='ZonedDateTime') validators=JdlRequiredValidator?
		@Override public ParserRule getRule() { return rule; }
		
		//(localDateType?='LocalDate' | zonedDateTimeType?='ZonedDateTime') validators=JdlRequiredValidator?
		public Group getGroup() { return cGroup; }
		
		//(localDateType?='LocalDate' | zonedDateTimeType?='ZonedDateTime')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//localDateType?='LocalDate'
		public Assignment getLocalDateTypeAssignment_0_0() { return cLocalDateTypeAssignment_0_0; }
		
		//'LocalDate'
		public Keyword getLocalDateTypeLocalDateKeyword_0_0_0() { return cLocalDateTypeLocalDateKeyword_0_0_0; }
		
		//zonedDateTimeType?='ZonedDateTime'
		public Assignment getZonedDateTimeTypeAssignment_0_1() { return cZonedDateTimeTypeAssignment_0_1; }
		
		//'ZonedDateTime'
		public Keyword getZonedDateTimeTypeZonedDateTimeKeyword_0_1_0() { return cZonedDateTimeTypeZonedDateTimeKeyword_0_1_0; }
		
		//validators=JdlRequiredValidator?
		public Assignment getValidatorsAssignment_1() { return cValidatorsAssignment_1; }
		
		//JdlRequiredValidator
		public RuleCall getValidatorsJdlRequiredValidatorParserRuleCall_1_0() { return cValidatorsJdlRequiredValidatorParserRuleCall_1_0; }
	}
	public class JdlBlobFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.JDL.JdlBlobField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBlobFieldTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBlobFieldTypeJdlBlobFieldTypeEnumRuleCall_0_0 = (RuleCall)cBlobFieldTypeAssignment_0.eContents().get(0);
		private final Assignment cValidatorsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValidatorsJdlBlobValidatorsParserRuleCall_1_0 = (RuleCall)cValidatorsAssignment_1.eContents().get(0);
		
		//JdlBlobField JdlFieldType:
		//	blobFieldType=JdlBlobFieldType validators=JdlBlobValidators?
		@Override public ParserRule getRule() { return rule; }
		
		//blobFieldType=JdlBlobFieldType validators=JdlBlobValidators?
		public Group getGroup() { return cGroup; }
		
		//blobFieldType=JdlBlobFieldType
		public Assignment getBlobFieldTypeAssignment_0() { return cBlobFieldTypeAssignment_0; }
		
		//JdlBlobFieldType
		public RuleCall getBlobFieldTypeJdlBlobFieldTypeEnumRuleCall_0_0() { return cBlobFieldTypeJdlBlobFieldTypeEnumRuleCall_0_0; }
		
		//validators=JdlBlobValidators?
		public Assignment getValidatorsAssignment_1() { return cValidatorsAssignment_1; }
		
		//JdlBlobValidators
		public RuleCall getValidatorsJdlBlobValidatorsParserRuleCall_1_0() { return cValidatorsJdlBlobValidatorsParserRuleCall_1_0; }
	}
	public class JdlStringValidatorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.JDL.JdlStringValidators");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRequiredAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRequiredJdlRequiredValidatorParserRuleCall_0_0 = (RuleCall)cRequiredAssignment_0.eContents().get(0);
		private final Assignment cMinLengthAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMinLengthJdlMinLengthValidatorParserRuleCall_1_0 = (RuleCall)cMinLengthAssignment_1.eContents().get(0);
		private final Assignment cMaxlengthAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMaxlengthJdlMaxLengthValidatorParserRuleCall_2_0 = (RuleCall)cMaxlengthAssignment_2.eContents().get(0);
		private final Assignment cPatternAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPatternJdlPatternValidatorParserRuleCall_3_0 = (RuleCall)cPatternAssignment_3.eContents().get(0);
		
		/// * =========================================================================
		// * VALIDATORS
		// * ========================================================================= * / JdlStringValidators:
		//	required?=JdlRequiredValidator minLength=JdlMinLengthValidator?
		//	maxlength=JdlMaxLengthValidator? pattern=JdlPatternValidator?;
		@Override public ParserRule getRule() { return rule; }
		
		//required?=JdlRequiredValidator minLength=JdlMinLengthValidator? maxlength=JdlMaxLengthValidator?
		//pattern=JdlPatternValidator?
		public Group getGroup() { return cGroup; }
		
		//required?=JdlRequiredValidator
		public Assignment getRequiredAssignment_0() { return cRequiredAssignment_0; }
		
		//JdlRequiredValidator
		public RuleCall getRequiredJdlRequiredValidatorParserRuleCall_0_0() { return cRequiredJdlRequiredValidatorParserRuleCall_0_0; }
		
		//minLength=JdlMinLengthValidator?
		public Assignment getMinLengthAssignment_1() { return cMinLengthAssignment_1; }
		
		//JdlMinLengthValidator
		public RuleCall getMinLengthJdlMinLengthValidatorParserRuleCall_1_0() { return cMinLengthJdlMinLengthValidatorParserRuleCall_1_0; }
		
		//maxlength=JdlMaxLengthValidator?
		public Assignment getMaxlengthAssignment_2() { return cMaxlengthAssignment_2; }
		
		//JdlMaxLengthValidator
		public RuleCall getMaxlengthJdlMaxLengthValidatorParserRuleCall_2_0() { return cMaxlengthJdlMaxLengthValidatorParserRuleCall_2_0; }
		
		//pattern=JdlPatternValidator?
		public Assignment getPatternAssignment_3() { return cPatternAssignment_3; }
		
		//JdlPatternValidator
		public RuleCall getPatternJdlPatternValidatorParserRuleCall_3_0() { return cPatternJdlPatternValidatorParserRuleCall_3_0; }
	}
	public class JdlNumericValidatorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.JDL.JdlNumericValidators");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRequiredAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRequiredJdlRequiredValidatorParserRuleCall_0_0 = (RuleCall)cRequiredAssignment_0.eContents().get(0);
		private final Assignment cMinlengthAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMinlengthJdlMinValidatorParserRuleCall_1_0 = (RuleCall)cMinlengthAssignment_1.eContents().get(0);
		private final Assignment cMaxlengthAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMaxlengthJdlMaxValidatorParserRuleCall_2_0 = (RuleCall)cMaxlengthAssignment_2.eContents().get(0);
		
		//JdlNumericValidators:
		//	required=JdlRequiredValidator minlength=JdlMinValidator? maxlength=JdlMaxValidator?;
		@Override public ParserRule getRule() { return rule; }
		
		//required=JdlRequiredValidator minlength=JdlMinValidator? maxlength=JdlMaxValidator?
		public Group getGroup() { return cGroup; }
		
		//required=JdlRequiredValidator
		public Assignment getRequiredAssignment_0() { return cRequiredAssignment_0; }
		
		//JdlRequiredValidator
		public RuleCall getRequiredJdlRequiredValidatorParserRuleCall_0_0() { return cRequiredJdlRequiredValidatorParserRuleCall_0_0; }
		
		//minlength=JdlMinValidator?
		public Assignment getMinlengthAssignment_1() { return cMinlengthAssignment_1; }
		
		//JdlMinValidator
		public RuleCall getMinlengthJdlMinValidatorParserRuleCall_1_0() { return cMinlengthJdlMinValidatorParserRuleCall_1_0; }
		
		//maxlength=JdlMaxValidator?
		public Assignment getMaxlengthAssignment_2() { return cMaxlengthAssignment_2; }
		
		//JdlMaxValidator
		public RuleCall getMaxlengthJdlMaxValidatorParserRuleCall_2_0() { return cMaxlengthJdlMaxValidatorParserRuleCall_2_0; }
	}
	public class JdlBlobValidatorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.JDL.JdlBlobValidators");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRequiredAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRequiredJdlRequiredValidatorParserRuleCall_0_0 = (RuleCall)cRequiredAssignment_0.eContents().get(0);
		private final Assignment cMinbytesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMinbytesJdlMinBytesValidatorParserRuleCall_1_0 = (RuleCall)cMinbytesAssignment_1.eContents().get(0);
		private final Assignment cMaxbytesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMaxbytesJdlMaxBytesValidatorParserRuleCall_2_0 = (RuleCall)cMaxbytesAssignment_2.eContents().get(0);
		
		//JdlBlobValidators:
		//	required=JdlRequiredValidator minbytes=JdlMinBytesValidator? maxbytes=JdlMaxBytesValidator?;
		@Override public ParserRule getRule() { return rule; }
		
		//required=JdlRequiredValidator minbytes=JdlMinBytesValidator? maxbytes=JdlMaxBytesValidator?
		public Group getGroup() { return cGroup; }
		
		//required=JdlRequiredValidator
		public Assignment getRequiredAssignment_0() { return cRequiredAssignment_0; }
		
		//JdlRequiredValidator
		public RuleCall getRequiredJdlRequiredValidatorParserRuleCall_0_0() { return cRequiredJdlRequiredValidatorParserRuleCall_0_0; }
		
		//minbytes=JdlMinBytesValidator?
		public Assignment getMinbytesAssignment_1() { return cMinbytesAssignment_1; }
		
		//JdlMinBytesValidator
		public RuleCall getMinbytesJdlMinBytesValidatorParserRuleCall_1_0() { return cMinbytesJdlMinBytesValidatorParserRuleCall_1_0; }
		
		//maxbytes=JdlMaxBytesValidator?
		public Assignment getMaxbytesAssignment_2() { return cMaxbytesAssignment_2; }
		
		//JdlMaxBytesValidator
		public RuleCall getMaxbytesJdlMaxBytesValidatorParserRuleCall_2_0() { return cMaxbytesJdlMaxBytesValidatorParserRuleCall_2_0; }
	}
	public class JdlRequiredValidatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.JDL.JdlRequiredValidator");
		private final Assignment cRequiredAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cRequiredRequiredKeyword_0 = (Keyword)cRequiredAssignment.eContents().get(0);
		
		//JdlRequiredValidator:
		//	required?='required';
		@Override public ParserRule getRule() { return rule; }
		
		//required?='required'
		public Assignment getRequiredAssignment() { return cRequiredAssignment; }
		
		//'required'
		public Keyword getRequiredRequiredKeyword_0() { return cRequiredRequiredKeyword_0; }
	}
	public class JdlMinLengthValidatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.JDL.JdlMinLengthValidator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMinlengthKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//JdlMinLengthValidator:
		//	'minlength' '(' value=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'minlength' '(' value=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'minlength'
		public Keyword getMinlengthKeyword_0() { return cMinlengthKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class JdlMaxLengthValidatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.JDL.JdlMaxLengthValidator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMaxlengthKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//JdlMaxLengthValidator:
		//	'maxlength' '(' value=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'maxlength' '(' value=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'maxlength'
		public Keyword getMaxlengthKeyword_0() { return cMaxlengthKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class JdlPatternValidatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.JDL.JdlPatternValidator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPatternKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//JdlPatternValidator:
		//	'pattern' '(' value=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'pattern' '(' value=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//'pattern'
		public Keyword getPatternKeyword_0() { return cPatternKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class JdlMinValidatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.JDL.JdlMinValidator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMinKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//JdlMinValidator:
		//	'min' '(' value=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'min' '(' value=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'min'
		public Keyword getMinKeyword_0() { return cMinKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class JdlMaxValidatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.JDL.JdlMaxValidator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMaxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//JdlMaxValidator:
		//	'max' '(' value=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'max' '(' value=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'max'
		public Keyword getMaxKeyword_0() { return cMaxKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class JdlMinBytesValidatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.JDL.JdlMinBytesValidator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMinbytesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//JdlMinBytesValidator:
		//	'minbytes' '(' value=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'minbytes' '(' value=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'minbytes'
		public Keyword getMinbytesKeyword_0() { return cMinbytesKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class JdlMaxBytesValidatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.JDL.JdlMaxBytesValidator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMaxbytesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//JdlMaxBytesValidator:
		//	'maxbytes' '(' value=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'maxbytes' '(' value=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'maxbytes'
		public Keyword getMaxbytesKeyword_0() { return cMaxbytesKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class JdlRelationshipsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.JDL.JdlRelationships");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRelationshipKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCardinalityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCardinalityJdlCardinalityEnumRuleCall_1_0 = (RuleCall)cCardinalityAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRelationshipsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRelationshipsJdlRelationshipParserRuleCall_3_0 = (RuleCall)cRelationshipsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRelationshipsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cRelationshipsJdlRelationshipParserRuleCall_4_1_0 = (RuleCall)cRelationshipsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		/// * =========================================================================
		// * RELATIONSHIP
		// * ========================================================================= * / JdlRelationships:
		//	'relationship' cardinality=JdlCardinality '{'
		//	relationships+=JdlRelationship* (',' relationships+=JdlRelationship)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'relationship' cardinality=JdlCardinality '{' relationships+=JdlRelationship* (',' relationships+=JdlRelationship)* '}'
		public Group getGroup() { return cGroup; }
		
		//'relationship'
		public Keyword getRelationshipKeyword_0() { return cRelationshipKeyword_0; }
		
		//cardinality=JdlCardinality
		public Assignment getCardinalityAssignment_1() { return cCardinalityAssignment_1; }
		
		//JdlCardinality
		public RuleCall getCardinalityJdlCardinalityEnumRuleCall_1_0() { return cCardinalityJdlCardinalityEnumRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//relationships+=JdlRelationship*
		public Assignment getRelationshipsAssignment_3() { return cRelationshipsAssignment_3; }
		
		//JdlRelationship
		public RuleCall getRelationshipsJdlRelationshipParserRuleCall_3_0() { return cRelationshipsJdlRelationshipParserRuleCall_3_0; }
		
		//(',' relationships+=JdlRelationship)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//relationships+=JdlRelationship
		public Assignment getRelationshipsAssignment_4_1() { return cRelationshipsAssignment_4_1; }
		
		//JdlRelationship
		public RuleCall getRelationshipsJdlRelationshipParserRuleCall_4_1_0() { return cRelationshipsJdlRelationshipParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class JdlRelationshipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.JDL.JdlRelationship");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFromEntityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFromEntityJdlEntityCrossReference_0_0 = (CrossReference)cFromEntityAssignment_0.eContents().get(0);
		private final RuleCall cFromEntityJdlEntityIDTerminalRuleCall_0_0_1 = (RuleCall)cFromEntityJdlEntityCrossReference_0_0.eContents().get(1);
		private final Assignment cFromNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFromNameJdlRelationshipNameParserRuleCall_1_0 = (RuleCall)cFromNameAssignment_1.eContents().get(0);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cToEntityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cToEntityJdlEntityCrossReference_3_0 = (CrossReference)cToEntityAssignment_3.eContents().get(0);
		private final RuleCall cToEntityJdlEntityIDTerminalRuleCall_3_0_1 = (RuleCall)cToEntityJdlEntityCrossReference_3_0.eContents().get(1);
		private final Assignment cToNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cToNameJdlRelationshipNameParserRuleCall_4_0 = (RuleCall)cToNameAssignment_4.eContents().get(0);
		
		//JdlRelationship:
		//	fromEntity=[JdlEntity] fromName=JdlRelationshipName? 'to' toEntity=[JdlEntity] toName=JdlRelationshipName?;
		@Override public ParserRule getRule() { return rule; }
		
		//fromEntity=[JdlEntity] fromName=JdlRelationshipName? 'to' toEntity=[JdlEntity] toName=JdlRelationshipName?
		public Group getGroup() { return cGroup; }
		
		//fromEntity=[JdlEntity]
		public Assignment getFromEntityAssignment_0() { return cFromEntityAssignment_0; }
		
		//[JdlEntity]
		public CrossReference getFromEntityJdlEntityCrossReference_0_0() { return cFromEntityJdlEntityCrossReference_0_0; }
		
		//ID
		public RuleCall getFromEntityJdlEntityIDTerminalRuleCall_0_0_1() { return cFromEntityJdlEntityIDTerminalRuleCall_0_0_1; }
		
		//fromName=JdlRelationshipName?
		public Assignment getFromNameAssignment_1() { return cFromNameAssignment_1; }
		
		//JdlRelationshipName
		public RuleCall getFromNameJdlRelationshipNameParserRuleCall_1_0() { return cFromNameJdlRelationshipNameParserRuleCall_1_0; }
		
		//'to'
		public Keyword getToKeyword_2() { return cToKeyword_2; }
		
		//toEntity=[JdlEntity]
		public Assignment getToEntityAssignment_3() { return cToEntityAssignment_3; }
		
		//[JdlEntity]
		public CrossReference getToEntityJdlEntityCrossReference_3_0() { return cToEntityJdlEntityCrossReference_3_0; }
		
		//ID
		public RuleCall getToEntityJdlEntityIDTerminalRuleCall_3_0_1() { return cToEntityJdlEntityIDTerminalRuleCall_3_0_1; }
		
		//toName=JdlRelationshipName?
		public Assignment getToNameAssignment_4() { return cToNameAssignment_4; }
		
		//JdlRelationshipName
		public RuleCall getToNameJdlRelationshipNameParserRuleCall_4_0() { return cToNameJdlRelationshipNameParserRuleCall_4_0; }
	}
	public class JdlRelationshipNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.JDL.JdlRelationshipName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRoleAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRoleIDTerminalRuleCall_2_1_0 = (RuleCall)cRoleAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//JdlRelationshipName:
		//	'{' name=ID ('(' role=ID ')')? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' name=ID ('(' role=ID ')')? '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('(' role=ID ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//role=ID
		public Assignment getRoleAssignment_2_1() { return cRoleAssignment_2_1; }
		
		//ID
		public RuleCall getRoleIDTerminalRuleCall_2_1_0() { return cRoleIDTerminalRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class JdlEnumTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.JDL.JdlEnumType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValuesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValuesIDTerminalRuleCall_3_0 = (RuleCall)cValuesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValuesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValuesIDTerminalRuleCall_4_1_0 = (RuleCall)cValuesAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		/// * =========================================================================
		// * ENUM
		// * ========================================================================= * / JdlEnumType:
		//	'enum' name=ID '{'
		//	values+=ID (',' values+=ID)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'enum' name=ID '{' values+=ID (',' values+=ID)* '}'
		public Group getGroup() { return cGroup; }
		
		//'enum'
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//values+=ID
		public Assignment getValuesAssignment_3() { return cValuesAssignment_3; }
		
		//ID
		public RuleCall getValuesIDTerminalRuleCall_3_0() { return cValuesIDTerminalRuleCall_3_0; }
		
		//(',' values+=ID)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//values+=ID
		public Assignment getValuesAssignment_4_1() { return cValuesAssignment_4_1; }
		
		//ID
		public RuleCall getValuesIDTerminalRuleCall_4_1_0() { return cValuesIDTerminalRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class JdlGenerationSettingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.JDL.JdlGenerationSetting");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSettingAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSettingJdlGenerationSettingTypeParserRuleCall_0_0 = (RuleCall)cSettingAssignment_0.eContents().get(0);
		private final Assignment cExcludesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExcludesJdlEntityExclusionParserRuleCall_1_0 = (RuleCall)cExcludesAssignment_1.eContents().get(0);
		
		/// * =========================================================================
		// * GENERATION SETTING
		// * ========================================================================= * / JdlGenerationSetting:
		//	setting=JdlGenerationSettingType excludes=JdlEntityExclusion?;
		@Override public ParserRule getRule() { return rule; }
		
		//setting=JdlGenerationSettingType excludes=JdlEntityExclusion?
		public Group getGroup() { return cGroup; }
		
		//setting=JdlGenerationSettingType
		public Assignment getSettingAssignment_0() { return cSettingAssignment_0; }
		
		//JdlGenerationSettingType
		public RuleCall getSettingJdlGenerationSettingTypeParserRuleCall_0_0() { return cSettingJdlGenerationSettingTypeParserRuleCall_0_0; }
		
		//excludes=JdlEntityExclusion?
		public Assignment getExcludesAssignment_1() { return cExcludesAssignment_1; }
		
		//JdlEntityExclusion
		public RuleCall getExcludesJdlEntityExclusionParserRuleCall_1_0() { return cExcludesJdlEntityExclusionParserRuleCall_1_0; }
	}
	public class JdlGenerationSettingTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.JDL.JdlGenerationSettingType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJdlServiceGenerationSettingParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJdlMicroserviceGenerationSettingParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cJdlSearchGenerationSettingParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cJdlDtoGenerationSettingParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cJdlPaginateGenerationSettingParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cJdlAngularSuffixGenerationSettingParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//JdlGenerationSettingType:
		//	JdlServiceGenerationSetting | JdlMicroserviceGenerationSetting | JdlSearchGenerationSetting | JdlDtoGenerationSetting
		//	| JdlPaginateGenerationSetting | JdlAngularSuffixGenerationSetting;
		@Override public ParserRule getRule() { return rule; }
		
		//JdlServiceGenerationSetting | JdlMicroserviceGenerationSetting | JdlSearchGenerationSetting | JdlDtoGenerationSetting |
		//JdlPaginateGenerationSetting | JdlAngularSuffixGenerationSetting
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//JdlServiceGenerationSetting
		public RuleCall getJdlServiceGenerationSettingParserRuleCall_0() { return cJdlServiceGenerationSettingParserRuleCall_0; }
		
		//JdlMicroserviceGenerationSetting
		public RuleCall getJdlMicroserviceGenerationSettingParserRuleCall_1() { return cJdlMicroserviceGenerationSettingParserRuleCall_1; }
		
		//JdlSearchGenerationSetting
		public RuleCall getJdlSearchGenerationSettingParserRuleCall_2() { return cJdlSearchGenerationSettingParserRuleCall_2; }
		
		//JdlDtoGenerationSetting
		public RuleCall getJdlDtoGenerationSettingParserRuleCall_3() { return cJdlDtoGenerationSettingParserRuleCall_3; }
		
		//JdlPaginateGenerationSetting
		public RuleCall getJdlPaginateGenerationSettingParserRuleCall_4() { return cJdlPaginateGenerationSettingParserRuleCall_4; }
		
		//JdlAngularSuffixGenerationSetting
		public RuleCall getJdlAngularSuffixGenerationSettingParserRuleCall_5() { return cJdlAngularSuffixGenerationSettingParserRuleCall_5; }
	}
	public class JdlServiceGenerationSettingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.JDL.JdlServiceGenerationSetting");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cServiceGenerationSettingAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cServiceGenerationSettingServiceKeyword_0_0 = (Keyword)cServiceGenerationSettingAssignment_0.eContents().get(0);
		private final Assignment cIncludesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIncludesJdlEntityInclusionParserRuleCall_1_0 = (RuleCall)cIncludesAssignment_1.eContents().get(0);
		private final Assignment cServiceTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cServiceTypeJdlServiceTypeEnumRuleCall_2_0 = (RuleCall)cServiceTypeAssignment_2.eContents().get(0);
		
		//JdlServiceGenerationSetting JdlGenerationSetting:
		//	serviceGenerationSetting?='service' includes=JdlEntityInclusion serviceType=JdlServiceType
		@Override public ParserRule getRule() { return rule; }
		
		//serviceGenerationSetting?='service' includes=JdlEntityInclusion serviceType=JdlServiceType
		public Group getGroup() { return cGroup; }
		
		//serviceGenerationSetting?='service'
		public Assignment getServiceGenerationSettingAssignment_0() { return cServiceGenerationSettingAssignment_0; }
		
		//'service'
		public Keyword getServiceGenerationSettingServiceKeyword_0_0() { return cServiceGenerationSettingServiceKeyword_0_0; }
		
		//includes=JdlEntityInclusion
		public Assignment getIncludesAssignment_1() { return cIncludesAssignment_1; }
		
		//JdlEntityInclusion
		public RuleCall getIncludesJdlEntityInclusionParserRuleCall_1_0() { return cIncludesJdlEntityInclusionParserRuleCall_1_0; }
		
		//serviceType=JdlServiceType
		public Assignment getServiceTypeAssignment_2() { return cServiceTypeAssignment_2; }
		
		//JdlServiceType
		public RuleCall getServiceTypeJdlServiceTypeEnumRuleCall_2_0() { return cServiceTypeJdlServiceTypeEnumRuleCall_2_0; }
	}
	public class JdlMicroserviceGenerationSettingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.JDL.JdlMicroserviceGenerationSetting");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMicroserviceGenerationSettingAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cMicroserviceGenerationSettingMicroserviceKeyword_0_0 = (Keyword)cMicroserviceGenerationSettingAssignment_0.eContents().get(0);
		private final Assignment cIncludesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIncludesJdlEntityInclusionParserRuleCall_1_0 = (RuleCall)cIncludesAssignment_1.eContents().get(0);
		private final Assignment cAppnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAppnameIDTerminalRuleCall_2_0 = (RuleCall)cAppnameAssignment_2.eContents().get(0);
		
		//JdlMicroserviceGenerationSetting JdlGenerationSetting:
		//	microserviceGenerationSetting?='microservice' includes=JdlEntityInclusion appname=ID
		@Override public ParserRule getRule() { return rule; }
		
		//microserviceGenerationSetting?='microservice' includes=JdlEntityInclusion appname=ID
		public Group getGroup() { return cGroup; }
		
		//microserviceGenerationSetting?='microservice'
		public Assignment getMicroserviceGenerationSettingAssignment_0() { return cMicroserviceGenerationSettingAssignment_0; }
		
		//'microservice'
		public Keyword getMicroserviceGenerationSettingMicroserviceKeyword_0_0() { return cMicroserviceGenerationSettingMicroserviceKeyword_0_0; }
		
		//includes=JdlEntityInclusion
		public Assignment getIncludesAssignment_1() { return cIncludesAssignment_1; }
		
		//JdlEntityInclusion
		public RuleCall getIncludesJdlEntityInclusionParserRuleCall_1_0() { return cIncludesJdlEntityInclusionParserRuleCall_1_0; }
		
		//appname=ID
		public Assignment getAppnameAssignment_2() { return cAppnameAssignment_2; }
		
		//ID
		public RuleCall getAppnameIDTerminalRuleCall_2_0() { return cAppnameIDTerminalRuleCall_2_0; }
	}
	public class JdlSearchGenerationSettingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.JDL.JdlSearchGenerationSetting");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSearchGenerationSettingAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cSearchGenerationSettingSearchKeyword_0_0 = (Keyword)cSearchGenerationSettingAssignment_0.eContents().get(0);
		private final Assignment cIncludesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIncludesJdlEntityInclusionParserRuleCall_1_0 = (RuleCall)cIncludesAssignment_1.eContents().get(0);
		private final Assignment cServiceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cServiceIDTerminalRuleCall_2_0 = (RuleCall)cServiceAssignment_2.eContents().get(0);
		
		//JdlSearchGenerationSetting JdlGenerationSetting:
		//	searchGenerationSetting?='search' includes=JdlEntityInclusion service=ID
		@Override public ParserRule getRule() { return rule; }
		
		//searchGenerationSetting?='search' includes=JdlEntityInclusion service=ID
		public Group getGroup() { return cGroup; }
		
		//searchGenerationSetting?='search'
		public Assignment getSearchGenerationSettingAssignment_0() { return cSearchGenerationSettingAssignment_0; }
		
		//'search'
		public Keyword getSearchGenerationSettingSearchKeyword_0_0() { return cSearchGenerationSettingSearchKeyword_0_0; }
		
		//includes=JdlEntityInclusion
		public Assignment getIncludesAssignment_1() { return cIncludesAssignment_1; }
		
		//JdlEntityInclusion
		public RuleCall getIncludesJdlEntityInclusionParserRuleCall_1_0() { return cIncludesJdlEntityInclusionParserRuleCall_1_0; }
		
		//service=ID
		public Assignment getServiceAssignment_2() { return cServiceAssignment_2; }
		
		//ID
		public RuleCall getServiceIDTerminalRuleCall_2_0() { return cServiceIDTerminalRuleCall_2_0; }
	}
	public class JdlDtoGenerationSettingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.JDL.JdlDtoGenerationSetting");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDtoGenerationSettingAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cDtoGenerationSettingDtoKeyword_0_0 = (Keyword)cDtoGenerationSettingAssignment_0.eContents().get(0);
		private final Assignment cIncludesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIncludesJdlEntityInclusionParserRuleCall_1_0 = (RuleCall)cIncludesAssignment_1.eContents().get(0);
		private final Assignment cDtoTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDtoTypeJdlDtoTypeEnumRuleCall_2_0 = (RuleCall)cDtoTypeAssignment_2.eContents().get(0);
		
		//JdlDtoGenerationSetting JdlGenerationSetting:
		//	dtoGenerationSetting?='dto' includes=JdlEntityInclusion dtoType=JdlDtoType
		@Override public ParserRule getRule() { return rule; }
		
		//dtoGenerationSetting?='dto' includes=JdlEntityInclusion dtoType=JdlDtoType
		public Group getGroup() { return cGroup; }
		
		//dtoGenerationSetting?='dto'
		public Assignment getDtoGenerationSettingAssignment_0() { return cDtoGenerationSettingAssignment_0; }
		
		//'dto'
		public Keyword getDtoGenerationSettingDtoKeyword_0_0() { return cDtoGenerationSettingDtoKeyword_0_0; }
		
		//includes=JdlEntityInclusion
		public Assignment getIncludesAssignment_1() { return cIncludesAssignment_1; }
		
		//JdlEntityInclusion
		public RuleCall getIncludesJdlEntityInclusionParserRuleCall_1_0() { return cIncludesJdlEntityInclusionParserRuleCall_1_0; }
		
		//dtoType=JdlDtoType
		public Assignment getDtoTypeAssignment_2() { return cDtoTypeAssignment_2; }
		
		//JdlDtoType
		public RuleCall getDtoTypeJdlDtoTypeEnumRuleCall_2_0() { return cDtoTypeJdlDtoTypeEnumRuleCall_2_0; }
	}
	public class JdlPaginateGenerationSettingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.JDL.JdlPaginateGenerationSetting");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPaginateGenerationSettingAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPaginateGenerationSettingPaginateKeyword_0_0 = (Keyword)cPaginateGenerationSettingAssignment_0.eContents().get(0);
		private final Assignment cIncludesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIncludesJdlEntityInclusionParserRuleCall_1_0 = (RuleCall)cIncludesAssignment_1.eContents().get(0);
		private final Assignment cPaginateTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPaginateTypeJdlPaginateTypeParserRuleCall_2_0 = (RuleCall)cPaginateTypeAssignment_2.eContents().get(0);
		
		//JdlPaginateGenerationSetting JdlGenerationSetting:
		//	paginateGenerationSetting?='paginate' includes=JdlEntityInclusion paginateType=JdlPaginateType
		@Override public ParserRule getRule() { return rule; }
		
		//paginateGenerationSetting?='paginate' includes=JdlEntityInclusion paginateType=JdlPaginateType
		public Group getGroup() { return cGroup; }
		
		//paginateGenerationSetting?='paginate'
		public Assignment getPaginateGenerationSettingAssignment_0() { return cPaginateGenerationSettingAssignment_0; }
		
		//'paginate'
		public Keyword getPaginateGenerationSettingPaginateKeyword_0_0() { return cPaginateGenerationSettingPaginateKeyword_0_0; }
		
		//includes=JdlEntityInclusion
		public Assignment getIncludesAssignment_1() { return cIncludesAssignment_1; }
		
		//JdlEntityInclusion
		public RuleCall getIncludesJdlEntityInclusionParserRuleCall_1_0() { return cIncludesJdlEntityInclusionParserRuleCall_1_0; }
		
		//paginateType=JdlPaginateType
		public Assignment getPaginateTypeAssignment_2() { return cPaginateTypeAssignment_2; }
		
		//JdlPaginateType
		public RuleCall getPaginateTypeJdlPaginateTypeParserRuleCall_2_0() { return cPaginateTypeJdlPaginateTypeParserRuleCall_2_0; }
	}
	public class JdlAngularSuffixGenerationSettingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.JDL.JdlAngularSuffixGenerationSetting");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAngularSuffixGenerationSettingAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAngularSuffixGenerationSettingAngularSuffixKeyword_0_0 = (Keyword)cAngularSuffixGenerationSettingAssignment_0.eContents().get(0);
		private final Assignment cIncludesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIncludesJdlEntityInclusionParserRuleCall_1_0 = (RuleCall)cIncludesAssignment_1.eContents().get(0);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdIDTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		
		//JdlAngularSuffixGenerationSetting JdlGenerationSetting:
		//	angularSuffixGenerationSetting?='angularSuffix' includes=JdlEntityInclusion id=ID
		@Override public ParserRule getRule() { return rule; }
		
		//angularSuffixGenerationSetting?='angularSuffix' includes=JdlEntityInclusion id=ID
		public Group getGroup() { return cGroup; }
		
		//angularSuffixGenerationSetting?='angularSuffix'
		public Assignment getAngularSuffixGenerationSettingAssignment_0() { return cAngularSuffixGenerationSettingAssignment_0; }
		
		//'angularSuffix'
		public Keyword getAngularSuffixGenerationSettingAngularSuffixKeyword_0_0() { return cAngularSuffixGenerationSettingAngularSuffixKeyword_0_0; }
		
		//includes=JdlEntityInclusion
		public Assignment getIncludesAssignment_1() { return cIncludesAssignment_1; }
		
		//JdlEntityInclusion
		public RuleCall getIncludesJdlEntityInclusionParserRuleCall_1_0() { return cIncludesJdlEntityInclusionParserRuleCall_1_0; }
		
		//id=ID
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_2_0() { return cIdIDTerminalRuleCall_2_0; }
	}
	public class JdlEntityInclusionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.JDL.JdlEntityInclusion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cPredicateAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cPredicateJdlWildcardPredicateParserRuleCall_0_0_0 = (RuleCall)cPredicateAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment cEntitiesAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final CrossReference cEntitiesJdlEntityCrossReference_0_1_0_0 = (CrossReference)cEntitiesAssignment_0_1_0.eContents().get(0);
		private final RuleCall cEntitiesJdlEntityIDTerminalRuleCall_0_1_0_0_1 = (RuleCall)cEntitiesJdlEntityCrossReference_0_1_0_0.eContents().get(1);
		private final Group cGroup_0_1_1 = (Group)cGroup_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_1_0 = (Keyword)cGroup_0_1_1.eContents().get(0);
		private final Assignment cEntitiesAssignment_0_1_1_1 = (Assignment)cGroup_0_1_1.eContents().get(1);
		private final CrossReference cEntitiesJdlEntityCrossReference_0_1_1_1_0 = (CrossReference)cEntitiesAssignment_0_1_1_1.eContents().get(0);
		private final RuleCall cEntitiesJdlEntityIDTerminalRuleCall_0_1_1_1_0_1 = (RuleCall)cEntitiesJdlEntityCrossReference_0_1_1_1_0.eContents().get(1);
		private final Keyword cWithKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//JdlEntityInclusion:
		//	(predicate=JdlWildcardPredicate | entities+=[JdlEntity] (',' entities+=[JdlEntity])*) 'with';
		@Override public ParserRule getRule() { return rule; }
		
		//(predicate=JdlWildcardPredicate | entities+=[JdlEntity] (',' entities+=[JdlEntity])*) 'with'
		public Group getGroup() { return cGroup; }
		
		//(predicate=JdlWildcardPredicate | entities+=[JdlEntity] (',' entities+=[JdlEntity])*)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//predicate=JdlWildcardPredicate
		public Assignment getPredicateAssignment_0_0() { return cPredicateAssignment_0_0; }
		
		//JdlWildcardPredicate
		public RuleCall getPredicateJdlWildcardPredicateParserRuleCall_0_0_0() { return cPredicateJdlWildcardPredicateParserRuleCall_0_0_0; }
		
		//entities+=[JdlEntity] (',' entities+=[JdlEntity])*
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//entities+=[JdlEntity]
		public Assignment getEntitiesAssignment_0_1_0() { return cEntitiesAssignment_0_1_0; }
		
		//[JdlEntity]
		public CrossReference getEntitiesJdlEntityCrossReference_0_1_0_0() { return cEntitiesJdlEntityCrossReference_0_1_0_0; }
		
		//ID
		public RuleCall getEntitiesJdlEntityIDTerminalRuleCall_0_1_0_0_1() { return cEntitiesJdlEntityIDTerminalRuleCall_0_1_0_0_1; }
		
		//(',' entities+=[JdlEntity])*
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }
		
		//','
		public Keyword getCommaKeyword_0_1_1_0() { return cCommaKeyword_0_1_1_0; }
		
		//entities+=[JdlEntity]
		public Assignment getEntitiesAssignment_0_1_1_1() { return cEntitiesAssignment_0_1_1_1; }
		
		//[JdlEntity]
		public CrossReference getEntitiesJdlEntityCrossReference_0_1_1_1_0() { return cEntitiesJdlEntityCrossReference_0_1_1_1_0; }
		
		//ID
		public RuleCall getEntitiesJdlEntityIDTerminalRuleCall_0_1_1_1_0_1() { return cEntitiesJdlEntityIDTerminalRuleCall_0_1_1_1_0_1; }
		
		//'with'
		public Keyword getWithKeyword_1() { return cWithKeyword_1; }
	}
	public class JdlEntityExclusionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.JDL.JdlEntityExclusion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExceptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEntitiesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEntitiesJdlEntityCrossReference_1_0 = (CrossReference)cEntitiesAssignment_1.eContents().get(0);
		private final RuleCall cEntitiesJdlEntityIDTerminalRuleCall_1_0_1 = (RuleCall)cEntitiesJdlEntityCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cEntitiesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cEntitiesJdlEntityCrossReference_2_1_0 = (CrossReference)cEntitiesAssignment_2_1.eContents().get(0);
		private final RuleCall cEntitiesJdlEntityIDTerminalRuleCall_2_1_0_1 = (RuleCall)cEntitiesJdlEntityCrossReference_2_1_0.eContents().get(1);
		
		//JdlEntityExclusion:
		//	'except' entities+=[JdlEntity] (',' entities+=[JdlEntity])*;
		@Override public ParserRule getRule() { return rule; }
		
		//'except' entities+=[JdlEntity] (',' entities+=[JdlEntity])*
		public Group getGroup() { return cGroup; }
		
		//'except'
		public Keyword getExceptKeyword_0() { return cExceptKeyword_0; }
		
		//entities+=[JdlEntity]
		public Assignment getEntitiesAssignment_1() { return cEntitiesAssignment_1; }
		
		//[JdlEntity]
		public CrossReference getEntitiesJdlEntityCrossReference_1_0() { return cEntitiesJdlEntityCrossReference_1_0; }
		
		//ID
		public RuleCall getEntitiesJdlEntityIDTerminalRuleCall_1_0_1() { return cEntitiesJdlEntityIDTerminalRuleCall_1_0_1; }
		
		//(',' entities+=[JdlEntity])*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//entities+=[JdlEntity]
		public Assignment getEntitiesAssignment_2_1() { return cEntitiesAssignment_2_1; }
		
		//[JdlEntity]
		public CrossReference getEntitiesJdlEntityCrossReference_2_1_0() { return cEntitiesJdlEntityCrossReference_2_1_0; }
		
		//ID
		public RuleCall getEntitiesJdlEntityIDTerminalRuleCall_2_1_0_1() { return cEntitiesJdlEntityIDTerminalRuleCall_2_1_0_1; }
	}
	public class JdlWildcardPredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.JDL.JdlWildcardPredicate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cWildcardAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cWildcardAsteriskKeyword_0_0 = (Keyword)cWildcardAssignment_0.eContents().get(0);
		private final Assignment cAllAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cAllAllKeyword_1_0 = (Keyword)cAllAssignment_1.eContents().get(0);
		
		//JdlWildcardPredicate:
		//	wildcard?='*' | all?='all';
		@Override public ParserRule getRule() { return rule; }
		
		//wildcard?='*' | all?='all'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//wildcard?='*'
		public Assignment getWildcardAssignment_0() { return cWildcardAssignment_0; }
		
		//'*'
		public Keyword getWildcardAsteriskKeyword_0_0() { return cWildcardAsteriskKeyword_0_0; }
		
		//all?='all'
		public Assignment getAllAssignment_1() { return cAllAssignment_1; }
		
		//'all'
		public Keyword getAllAllKeyword_1_0() { return cAllAllKeyword_1_0; }
	}
	public class JdlPaginateTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.JDL.JdlPaginateType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPaginationAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Alternatives cPaginationAlternatives_0_0 = (Alternatives)cPaginationAssignment_0.eContents().get(0);
		private final Keyword cPaginationPagerKeyword_0_0_0 = (Keyword)cPaginationAlternatives_0_0.eContents().get(0);
		private final Keyword cPaginationPaginationKeyword_0_0_1 = (Keyword)cPaginationAlternatives_0_0.eContents().get(1);
		private final Assignment cInfiniteScrollAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cInfiniteScrollInfiniteScrollKeyword_1_0 = (Keyword)cInfiniteScrollAssignment_1.eContents().get(0);
		
		//JdlPaginateType:
		//	pagination?=('pager' | 'pagination') | infiniteScroll?='infinite-scroll';
		@Override public ParserRule getRule() { return rule; }
		
		//pagination?=('pager' | 'pagination') | infiniteScroll?='infinite-scroll'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//pagination?=('pager' | 'pagination')
		public Assignment getPaginationAssignment_0() { return cPaginationAssignment_0; }
		
		//('pager' | 'pagination')
		public Alternatives getPaginationAlternatives_0_0() { return cPaginationAlternatives_0_0; }
		
		//'pager'
		public Keyword getPaginationPagerKeyword_0_0_0() { return cPaginationPagerKeyword_0_0_0; }
		
		//'pagination'
		public Keyword getPaginationPaginationKeyword_0_0_1() { return cPaginationPaginationKeyword_0_0_1; }
		
		//infiniteScroll?='infinite-scroll'
		public Assignment getInfiniteScrollAssignment_1() { return cInfiniteScrollAssignment_1; }
		
		//'infinite-scroll'
		public Keyword getInfiniteScrollInfiniteScrollKeyword_1_0() { return cInfiniteScrollInfiniteScrollKeyword_1_0; }
	}
	
	public class JdlNumericFieldTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.JDL.JdlNumericFieldType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cIntegerEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cIntegerIntegerKeyword_0_0 = (Keyword)cIntegerEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLongEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLongLongKeyword_1_0 = (Keyword)cLongEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBigDecimalEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBigDecimalBigDecimalKeyword_2_0 = (Keyword)cBigDecimalEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFloatEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFloatFloatKeyword_3_0 = (Keyword)cFloatEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDoubleEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDoubleDoubleKeyword_4_0 = (Keyword)cDoubleEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum JdlNumericFieldType:
		//	Integer | Long | BigDecimal | Float | Double;
		public EnumRule getRule() { return rule; }
		
		//Integer | Long | BigDecimal | Float | Double
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Integer
		public EnumLiteralDeclaration getIntegerEnumLiteralDeclaration_0() { return cIntegerEnumLiteralDeclaration_0; }
		
		//"Integer"
		public Keyword getIntegerIntegerKeyword_0_0() { return cIntegerIntegerKeyword_0_0; }
		
		//Long
		public EnumLiteralDeclaration getLongEnumLiteralDeclaration_1() { return cLongEnumLiteralDeclaration_1; }
		
		//"Long"
		public Keyword getLongLongKeyword_1_0() { return cLongLongKeyword_1_0; }
		
		//BigDecimal
		public EnumLiteralDeclaration getBigDecimalEnumLiteralDeclaration_2() { return cBigDecimalEnumLiteralDeclaration_2; }
		
		//"BigDecimal"
		public Keyword getBigDecimalBigDecimalKeyword_2_0() { return cBigDecimalBigDecimalKeyword_2_0; }
		
		//Float
		public EnumLiteralDeclaration getFloatEnumLiteralDeclaration_3() { return cFloatEnumLiteralDeclaration_3; }
		
		//"Float"
		public Keyword getFloatFloatKeyword_3_0() { return cFloatFloatKeyword_3_0; }
		
		//Double
		public EnumLiteralDeclaration getDoubleEnumLiteralDeclaration_4() { return cDoubleEnumLiteralDeclaration_4; }
		
		//"Double"
		public Keyword getDoubleDoubleKeyword_4_0() { return cDoubleDoubleKeyword_4_0; }
	}
	public class JdlBlobFieldTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.JDL.JdlBlobFieldType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBlobEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBlobBlobKeyword_0_0 = (Keyword)cBlobEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAnyBlobEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAnyBlobAnyBlobKeyword_1_0 = (Keyword)cAnyBlobEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cImageBlobEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cImageBlobImageBlobKeyword_2_0 = (Keyword)cImageBlobEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum JdlBlobFieldType:
		//	Blob | AnyBlob | ImageBlob;
		public EnumRule getRule() { return rule; }
		
		//Blob | AnyBlob | ImageBlob
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Blob
		public EnumLiteralDeclaration getBlobEnumLiteralDeclaration_0() { return cBlobEnumLiteralDeclaration_0; }
		
		//"Blob"
		public Keyword getBlobBlobKeyword_0_0() { return cBlobBlobKeyword_0_0; }
		
		//AnyBlob
		public EnumLiteralDeclaration getAnyBlobEnumLiteralDeclaration_1() { return cAnyBlobEnumLiteralDeclaration_1; }
		
		//"AnyBlob"
		public Keyword getAnyBlobAnyBlobKeyword_1_0() { return cAnyBlobAnyBlobKeyword_1_0; }
		
		//ImageBlob
		public EnumLiteralDeclaration getImageBlobEnumLiteralDeclaration_2() { return cImageBlobEnumLiteralDeclaration_2; }
		
		//"ImageBlob"
		public Keyword getImageBlobImageBlobKeyword_2_0() { return cImageBlobImageBlobKeyword_2_0; }
	}
	public class JdlCardinalityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.JDL.JdlCardinality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOneToManyEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOneToManyOneToManyKeyword_0_0 = (Keyword)cOneToManyEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cManyToOneEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cManyToOneManyToOneKeyword_1_0 = (Keyword)cManyToOneEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cOneToOneEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cOneToOneOneToOneKeyword_2_0 = (Keyword)cOneToOneEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cManyToManyEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cManyToManyManyToManyKeyword_3_0 = (Keyword)cManyToManyEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum JdlCardinality:
		//	OneToMany | ManyToOne | OneToOne | ManyToMany;
		public EnumRule getRule() { return rule; }
		
		//OneToMany | ManyToOne | OneToOne | ManyToMany
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OneToMany
		public EnumLiteralDeclaration getOneToManyEnumLiteralDeclaration_0() { return cOneToManyEnumLiteralDeclaration_0; }
		
		//"OneToMany"
		public Keyword getOneToManyOneToManyKeyword_0_0() { return cOneToManyOneToManyKeyword_0_0; }
		
		//ManyToOne
		public EnumLiteralDeclaration getManyToOneEnumLiteralDeclaration_1() { return cManyToOneEnumLiteralDeclaration_1; }
		
		//"ManyToOne"
		public Keyword getManyToOneManyToOneKeyword_1_0() { return cManyToOneManyToOneKeyword_1_0; }
		
		//OneToOne
		public EnumLiteralDeclaration getOneToOneEnumLiteralDeclaration_2() { return cOneToOneEnumLiteralDeclaration_2; }
		
		//"OneToOne"
		public Keyword getOneToOneOneToOneKeyword_2_0() { return cOneToOneOneToOneKeyword_2_0; }
		
		//ManyToMany
		public EnumLiteralDeclaration getManyToManyEnumLiteralDeclaration_3() { return cManyToManyEnumLiteralDeclaration_3; }
		
		//"ManyToMany"
		public Keyword getManyToManyManyToManyKeyword_3_0() { return cManyToManyManyToManyKeyword_3_0; }
	}
	public class JdlServiceTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.JDL.JdlServiceType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cServiceClassEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cServiceClassServiceClassKeyword_0_0 = (Keyword)cServiceClassEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cServiceImplEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cServiceImplServiceImplKeyword_1_0 = (Keyword)cServiceImplEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum JdlServiceType:
		//	serviceClass | serviceImpl;
		public EnumRule getRule() { return rule; }
		
		//serviceClass | serviceImpl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//serviceClass
		public EnumLiteralDeclaration getServiceClassEnumLiteralDeclaration_0() { return cServiceClassEnumLiteralDeclaration_0; }
		
		//"serviceClass"
		public Keyword getServiceClassServiceClassKeyword_0_0() { return cServiceClassServiceClassKeyword_0_0; }
		
		//serviceImpl
		public EnumLiteralDeclaration getServiceImplEnumLiteralDeclaration_1() { return cServiceImplEnumLiteralDeclaration_1; }
		
		//"serviceImpl"
		public Keyword getServiceImplServiceImplKeyword_1_0() { return cServiceImplServiceImplKeyword_1_0; }
	}
	public class JdlDtoTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.jhipster.jdl.JDL.JdlDtoType");
		private final EnumLiteralDeclaration cMapstructEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cMapstructMapstructKeyword_0 = (Keyword)cMapstructEnumLiteralDeclaration.eContents().get(0);
		
		//enum JdlDtoType:
		//	mapstruct;
		public EnumRule getRule() { return rule; }
		
		//mapstruct
		public EnumLiteralDeclaration getMapstructEnumLiteralDeclaration() { return cMapstructEnumLiteralDeclaration; }
		
		//"mapstruct"
		public Keyword getMapstructMapstructKeyword_0() { return cMapstructMapstructKeyword_0; }
	}
	
	private final JdlDomainModelElements pJdlDomainModel;
	private final JdlFeatureElements pJdlFeature;
	private final JdlEntityElements pJdlEntity;
	private final JdlEntityFieldElements pJdlEntityField;
	private final JdlFieldTypeElements pJdlFieldType;
	private final JdlEnumFieldElements pJdlEnumField;
	private final JdlStringFieldElements pJdlStringField;
	private final JdlNumericFieldElements pJdlNumericField;
	private final JdlNumericFieldTypeElements eJdlNumericFieldType;
	private final JdlBooleanFieldElements pJdlBooleanField;
	private final JdlDateFieldElements pJdlDateField;
	private final JdlBlobFieldElements pJdlBlobField;
	private final JdlBlobFieldTypeElements eJdlBlobFieldType;
	private final JdlStringValidatorsElements pJdlStringValidators;
	private final JdlNumericValidatorsElements pJdlNumericValidators;
	private final JdlBlobValidatorsElements pJdlBlobValidators;
	private final JdlRequiredValidatorElements pJdlRequiredValidator;
	private final JdlMinLengthValidatorElements pJdlMinLengthValidator;
	private final JdlMaxLengthValidatorElements pJdlMaxLengthValidator;
	private final JdlPatternValidatorElements pJdlPatternValidator;
	private final JdlMinValidatorElements pJdlMinValidator;
	private final JdlMaxValidatorElements pJdlMaxValidator;
	private final JdlMinBytesValidatorElements pJdlMinBytesValidator;
	private final JdlMaxBytesValidatorElements pJdlMaxBytesValidator;
	private final JdlRelationshipsElements pJdlRelationships;
	private final JdlRelationshipElements pJdlRelationship;
	private final JdlRelationshipNameElements pJdlRelationshipName;
	private final JdlCardinalityElements eJdlCardinality;
	private final JdlEnumTypeElements pJdlEnumType;
	private final JdlGenerationSettingElements pJdlGenerationSetting;
	private final JdlGenerationSettingTypeElements pJdlGenerationSettingType;
	private final JdlServiceGenerationSettingElements pJdlServiceGenerationSetting;
	private final JdlMicroserviceGenerationSettingElements pJdlMicroserviceGenerationSetting;
	private final JdlSearchGenerationSettingElements pJdlSearchGenerationSetting;
	private final JdlDtoGenerationSettingElements pJdlDtoGenerationSetting;
	private final JdlPaginateGenerationSettingElements pJdlPaginateGenerationSetting;
	private final JdlAngularSuffixGenerationSettingElements pJdlAngularSuffixGenerationSetting;
	private final JdlEntityInclusionElements pJdlEntityInclusion;
	private final JdlEntityExclusionElements pJdlEntityExclusion;
	private final JdlWildcardPredicateElements pJdlWildcardPredicate;
	private final JdlServiceTypeElements eJdlServiceType;
	private final JdlDtoTypeElements eJdlDtoType;
	private final JdlPaginateTypeElements pJdlPaginateType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public JDLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pJdlDomainModel = new JdlDomainModelElements();
		this.pJdlFeature = new JdlFeatureElements();
		this.pJdlEntity = new JdlEntityElements();
		this.pJdlEntityField = new JdlEntityFieldElements();
		this.pJdlFieldType = new JdlFieldTypeElements();
		this.pJdlEnumField = new JdlEnumFieldElements();
		this.pJdlStringField = new JdlStringFieldElements();
		this.pJdlNumericField = new JdlNumericFieldElements();
		this.eJdlNumericFieldType = new JdlNumericFieldTypeElements();
		this.pJdlBooleanField = new JdlBooleanFieldElements();
		this.pJdlDateField = new JdlDateFieldElements();
		this.pJdlBlobField = new JdlBlobFieldElements();
		this.eJdlBlobFieldType = new JdlBlobFieldTypeElements();
		this.pJdlStringValidators = new JdlStringValidatorsElements();
		this.pJdlNumericValidators = new JdlNumericValidatorsElements();
		this.pJdlBlobValidators = new JdlBlobValidatorsElements();
		this.pJdlRequiredValidator = new JdlRequiredValidatorElements();
		this.pJdlMinLengthValidator = new JdlMinLengthValidatorElements();
		this.pJdlMaxLengthValidator = new JdlMaxLengthValidatorElements();
		this.pJdlPatternValidator = new JdlPatternValidatorElements();
		this.pJdlMinValidator = new JdlMinValidatorElements();
		this.pJdlMaxValidator = new JdlMaxValidatorElements();
		this.pJdlMinBytesValidator = new JdlMinBytesValidatorElements();
		this.pJdlMaxBytesValidator = new JdlMaxBytesValidatorElements();
		this.pJdlRelationships = new JdlRelationshipsElements();
		this.pJdlRelationship = new JdlRelationshipElements();
		this.pJdlRelationshipName = new JdlRelationshipNameElements();
		this.eJdlCardinality = new JdlCardinalityElements();
		this.pJdlEnumType = new JdlEnumTypeElements();
		this.pJdlGenerationSetting = new JdlGenerationSettingElements();
		this.pJdlGenerationSettingType = new JdlGenerationSettingTypeElements();
		this.pJdlServiceGenerationSetting = new JdlServiceGenerationSettingElements();
		this.pJdlMicroserviceGenerationSetting = new JdlMicroserviceGenerationSettingElements();
		this.pJdlSearchGenerationSetting = new JdlSearchGenerationSettingElements();
		this.pJdlDtoGenerationSetting = new JdlDtoGenerationSettingElements();
		this.pJdlPaginateGenerationSetting = new JdlPaginateGenerationSettingElements();
		this.pJdlAngularSuffixGenerationSetting = new JdlAngularSuffixGenerationSettingElements();
		this.pJdlEntityInclusion = new JdlEntityInclusionElements();
		this.pJdlEntityExclusion = new JdlEntityExclusionElements();
		this.pJdlWildcardPredicate = new JdlWildcardPredicateElements();
		this.eJdlServiceType = new JdlServiceTypeElements();
		this.eJdlDtoType = new JdlDtoTypeElements();
		this.pJdlPaginateType = new JdlPaginateTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("io.github.jhipster.jdl.JDL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// * =========================================================================
	// * ROOT ELEMENTS
	// * ========================================================================= * / JdlDomainModel:
	//	features+=JdlFeature*;
	public JdlDomainModelElements getJdlDomainModelAccess() {
		return pJdlDomainModel;
	}
	
	public ParserRule getJdlDomainModelRule() {
		return getJdlDomainModelAccess().getRule();
	}
	
	//JdlFeature:
	//	JdlEntity | JdlEnumType | JdlRelationships | JdlGenerationSetting;
	public JdlFeatureElements getJdlFeatureAccess() {
		return pJdlFeature;
	}
	
	public ParserRule getJdlFeatureRule() {
		return getJdlFeatureAccess().getRule();
	}
	
	/// * =========================================================================
	// * ENTITY
	// * ========================================================================= * / JdlEntity:
	//	'entity' name=ID ('{' (fields+=JdlEntityField (',' fields+=JdlEntityField)*)?
	//	'}')?;
	public JdlEntityElements getJdlEntityAccess() {
		return pJdlEntity;
	}
	
	public ParserRule getJdlEntityRule() {
		return getJdlEntityAccess().getRule();
	}
	
	//JdlEntityField:
	//	name=ID type=JdlFieldType;
	public JdlEntityFieldElements getJdlEntityFieldAccess() {
		return pJdlEntityField;
	}
	
	public ParserRule getJdlEntityFieldRule() {
		return getJdlEntityFieldAccess().getRule();
	}
	
	//JdlFieldType:
	//	JdlEnumField | JdlStringField | JdlNumericField | JdlBooleanField | JdlDateField | JdlBlobField;
	public JdlFieldTypeElements getJdlFieldTypeAccess() {
		return pJdlFieldType;
	}
	
	public ParserRule getJdlFieldTypeRule() {
		return getJdlFieldTypeAccess().getRule();
	}
	
	//JdlEnumField JdlEntityField:
	//	enumType=[JdlEnumType] validators=JdlRequiredValidator?
	public JdlEnumFieldElements getJdlEnumFieldAccess() {
		return pJdlEnumField;
	}
	
	public ParserRule getJdlEnumFieldRule() {
		return getJdlEnumFieldAccess().getRule();
	}
	
	//JdlStringField JdlEntityField:
	//	stringType?='String' validators=JdlStringValidators?
	public JdlStringFieldElements getJdlStringFieldAccess() {
		return pJdlStringField;
	}
	
	public ParserRule getJdlStringFieldRule() {
		return getJdlStringFieldAccess().getRule();
	}
	
	//JdlNumericField JdlEntityField:
	//	numericFieldType=JdlNumericFieldType validators=JdlNumericValidators?
	public JdlNumericFieldElements getJdlNumericFieldAccess() {
		return pJdlNumericField;
	}
	
	public ParserRule getJdlNumericFieldRule() {
		return getJdlNumericFieldAccess().getRule();
	}
	
	//enum JdlNumericFieldType:
	//	Integer | Long | BigDecimal | Float | Double;
	public JdlNumericFieldTypeElements getJdlNumericFieldTypeAccess() {
		return eJdlNumericFieldType;
	}
	
	public EnumRule getJdlNumericFieldTypeRule() {
		return getJdlNumericFieldTypeAccess().getRule();
	}
	
	//JdlBooleanField JdlEntityField:
	//	booleanType?='Boolean' validators=JdlRequiredValidator?
	public JdlBooleanFieldElements getJdlBooleanFieldAccess() {
		return pJdlBooleanField;
	}
	
	public ParserRule getJdlBooleanFieldRule() {
		return getJdlBooleanFieldAccess().getRule();
	}
	
	//JdlDateField JdlEntityField:
	//	(localDateType?='LocalDate' | zonedDateTimeType?='ZonedDateTime') validators=JdlRequiredValidator?
	public JdlDateFieldElements getJdlDateFieldAccess() {
		return pJdlDateField;
	}
	
	public ParserRule getJdlDateFieldRule() {
		return getJdlDateFieldAccess().getRule();
	}
	
	//JdlBlobField JdlFieldType:
	//	blobFieldType=JdlBlobFieldType validators=JdlBlobValidators?
	public JdlBlobFieldElements getJdlBlobFieldAccess() {
		return pJdlBlobField;
	}
	
	public ParserRule getJdlBlobFieldRule() {
		return getJdlBlobFieldAccess().getRule();
	}
	
	//enum JdlBlobFieldType:
	//	Blob | AnyBlob | ImageBlob;
	public JdlBlobFieldTypeElements getJdlBlobFieldTypeAccess() {
		return eJdlBlobFieldType;
	}
	
	public EnumRule getJdlBlobFieldTypeRule() {
		return getJdlBlobFieldTypeAccess().getRule();
	}
	
	/// * =========================================================================
	// * VALIDATORS
	// * ========================================================================= * / JdlStringValidators:
	//	required?=JdlRequiredValidator minLength=JdlMinLengthValidator?
	//	maxlength=JdlMaxLengthValidator? pattern=JdlPatternValidator?;
	public JdlStringValidatorsElements getJdlStringValidatorsAccess() {
		return pJdlStringValidators;
	}
	
	public ParserRule getJdlStringValidatorsRule() {
		return getJdlStringValidatorsAccess().getRule();
	}
	
	//JdlNumericValidators:
	//	required=JdlRequiredValidator minlength=JdlMinValidator? maxlength=JdlMaxValidator?;
	public JdlNumericValidatorsElements getJdlNumericValidatorsAccess() {
		return pJdlNumericValidators;
	}
	
	public ParserRule getJdlNumericValidatorsRule() {
		return getJdlNumericValidatorsAccess().getRule();
	}
	
	//JdlBlobValidators:
	//	required=JdlRequiredValidator minbytes=JdlMinBytesValidator? maxbytes=JdlMaxBytesValidator?;
	public JdlBlobValidatorsElements getJdlBlobValidatorsAccess() {
		return pJdlBlobValidators;
	}
	
	public ParserRule getJdlBlobValidatorsRule() {
		return getJdlBlobValidatorsAccess().getRule();
	}
	
	//JdlRequiredValidator:
	//	required?='required';
	public JdlRequiredValidatorElements getJdlRequiredValidatorAccess() {
		return pJdlRequiredValidator;
	}
	
	public ParserRule getJdlRequiredValidatorRule() {
		return getJdlRequiredValidatorAccess().getRule();
	}
	
	//JdlMinLengthValidator:
	//	'minlength' '(' value=INT ')';
	public JdlMinLengthValidatorElements getJdlMinLengthValidatorAccess() {
		return pJdlMinLengthValidator;
	}
	
	public ParserRule getJdlMinLengthValidatorRule() {
		return getJdlMinLengthValidatorAccess().getRule();
	}
	
	//JdlMaxLengthValidator:
	//	'maxlength' '(' value=INT ')';
	public JdlMaxLengthValidatorElements getJdlMaxLengthValidatorAccess() {
		return pJdlMaxLengthValidator;
	}
	
	public ParserRule getJdlMaxLengthValidatorRule() {
		return getJdlMaxLengthValidatorAccess().getRule();
	}
	
	//JdlPatternValidator:
	//	'pattern' '(' value=STRING ')';
	public JdlPatternValidatorElements getJdlPatternValidatorAccess() {
		return pJdlPatternValidator;
	}
	
	public ParserRule getJdlPatternValidatorRule() {
		return getJdlPatternValidatorAccess().getRule();
	}
	
	//JdlMinValidator:
	//	'min' '(' value=INT ')';
	public JdlMinValidatorElements getJdlMinValidatorAccess() {
		return pJdlMinValidator;
	}
	
	public ParserRule getJdlMinValidatorRule() {
		return getJdlMinValidatorAccess().getRule();
	}
	
	//JdlMaxValidator:
	//	'max' '(' value=INT ')';
	public JdlMaxValidatorElements getJdlMaxValidatorAccess() {
		return pJdlMaxValidator;
	}
	
	public ParserRule getJdlMaxValidatorRule() {
		return getJdlMaxValidatorAccess().getRule();
	}
	
	//JdlMinBytesValidator:
	//	'minbytes' '(' value=INT ')';
	public JdlMinBytesValidatorElements getJdlMinBytesValidatorAccess() {
		return pJdlMinBytesValidator;
	}
	
	public ParserRule getJdlMinBytesValidatorRule() {
		return getJdlMinBytesValidatorAccess().getRule();
	}
	
	//JdlMaxBytesValidator:
	//	'maxbytes' '(' value=INT ')';
	public JdlMaxBytesValidatorElements getJdlMaxBytesValidatorAccess() {
		return pJdlMaxBytesValidator;
	}
	
	public ParserRule getJdlMaxBytesValidatorRule() {
		return getJdlMaxBytesValidatorAccess().getRule();
	}
	
	/// * =========================================================================
	// * RELATIONSHIP
	// * ========================================================================= * / JdlRelationships:
	//	'relationship' cardinality=JdlCardinality '{'
	//	relationships+=JdlRelationship* (',' relationships+=JdlRelationship)*
	//	'}';
	public JdlRelationshipsElements getJdlRelationshipsAccess() {
		return pJdlRelationships;
	}
	
	public ParserRule getJdlRelationshipsRule() {
		return getJdlRelationshipsAccess().getRule();
	}
	
	//JdlRelationship:
	//	fromEntity=[JdlEntity] fromName=JdlRelationshipName? 'to' toEntity=[JdlEntity] toName=JdlRelationshipName?;
	public JdlRelationshipElements getJdlRelationshipAccess() {
		return pJdlRelationship;
	}
	
	public ParserRule getJdlRelationshipRule() {
		return getJdlRelationshipAccess().getRule();
	}
	
	//JdlRelationshipName:
	//	'{' name=ID ('(' role=ID ')')? '}';
	public JdlRelationshipNameElements getJdlRelationshipNameAccess() {
		return pJdlRelationshipName;
	}
	
	public ParserRule getJdlRelationshipNameRule() {
		return getJdlRelationshipNameAccess().getRule();
	}
	
	//enum JdlCardinality:
	//	OneToMany | ManyToOne | OneToOne | ManyToMany;
	public JdlCardinalityElements getJdlCardinalityAccess() {
		return eJdlCardinality;
	}
	
	public EnumRule getJdlCardinalityRule() {
		return getJdlCardinalityAccess().getRule();
	}
	
	/// * =========================================================================
	// * ENUM
	// * ========================================================================= * / JdlEnumType:
	//	'enum' name=ID '{'
	//	values+=ID (',' values+=ID)*
	//	'}';
	public JdlEnumTypeElements getJdlEnumTypeAccess() {
		return pJdlEnumType;
	}
	
	public ParserRule getJdlEnumTypeRule() {
		return getJdlEnumTypeAccess().getRule();
	}
	
	/// * =========================================================================
	// * GENERATION SETTING
	// * ========================================================================= * / JdlGenerationSetting:
	//	setting=JdlGenerationSettingType excludes=JdlEntityExclusion?;
	public JdlGenerationSettingElements getJdlGenerationSettingAccess() {
		return pJdlGenerationSetting;
	}
	
	public ParserRule getJdlGenerationSettingRule() {
		return getJdlGenerationSettingAccess().getRule();
	}
	
	//JdlGenerationSettingType:
	//	JdlServiceGenerationSetting | JdlMicroserviceGenerationSetting | JdlSearchGenerationSetting | JdlDtoGenerationSetting
	//	| JdlPaginateGenerationSetting | JdlAngularSuffixGenerationSetting;
	public JdlGenerationSettingTypeElements getJdlGenerationSettingTypeAccess() {
		return pJdlGenerationSettingType;
	}
	
	public ParserRule getJdlGenerationSettingTypeRule() {
		return getJdlGenerationSettingTypeAccess().getRule();
	}
	
	//JdlServiceGenerationSetting JdlGenerationSetting:
	//	serviceGenerationSetting?='service' includes=JdlEntityInclusion serviceType=JdlServiceType
	public JdlServiceGenerationSettingElements getJdlServiceGenerationSettingAccess() {
		return pJdlServiceGenerationSetting;
	}
	
	public ParserRule getJdlServiceGenerationSettingRule() {
		return getJdlServiceGenerationSettingAccess().getRule();
	}
	
	//JdlMicroserviceGenerationSetting JdlGenerationSetting:
	//	microserviceGenerationSetting?='microservice' includes=JdlEntityInclusion appname=ID
	public JdlMicroserviceGenerationSettingElements getJdlMicroserviceGenerationSettingAccess() {
		return pJdlMicroserviceGenerationSetting;
	}
	
	public ParserRule getJdlMicroserviceGenerationSettingRule() {
		return getJdlMicroserviceGenerationSettingAccess().getRule();
	}
	
	//JdlSearchGenerationSetting JdlGenerationSetting:
	//	searchGenerationSetting?='search' includes=JdlEntityInclusion service=ID
	public JdlSearchGenerationSettingElements getJdlSearchGenerationSettingAccess() {
		return pJdlSearchGenerationSetting;
	}
	
	public ParserRule getJdlSearchGenerationSettingRule() {
		return getJdlSearchGenerationSettingAccess().getRule();
	}
	
	//JdlDtoGenerationSetting JdlGenerationSetting:
	//	dtoGenerationSetting?='dto' includes=JdlEntityInclusion dtoType=JdlDtoType
	public JdlDtoGenerationSettingElements getJdlDtoGenerationSettingAccess() {
		return pJdlDtoGenerationSetting;
	}
	
	public ParserRule getJdlDtoGenerationSettingRule() {
		return getJdlDtoGenerationSettingAccess().getRule();
	}
	
	//JdlPaginateGenerationSetting JdlGenerationSetting:
	//	paginateGenerationSetting?='paginate' includes=JdlEntityInclusion paginateType=JdlPaginateType
	public JdlPaginateGenerationSettingElements getJdlPaginateGenerationSettingAccess() {
		return pJdlPaginateGenerationSetting;
	}
	
	public ParserRule getJdlPaginateGenerationSettingRule() {
		return getJdlPaginateGenerationSettingAccess().getRule();
	}
	
	//JdlAngularSuffixGenerationSetting JdlGenerationSetting:
	//	angularSuffixGenerationSetting?='angularSuffix' includes=JdlEntityInclusion id=ID
	public JdlAngularSuffixGenerationSettingElements getJdlAngularSuffixGenerationSettingAccess() {
		return pJdlAngularSuffixGenerationSetting;
	}
	
	public ParserRule getJdlAngularSuffixGenerationSettingRule() {
		return getJdlAngularSuffixGenerationSettingAccess().getRule();
	}
	
	//JdlEntityInclusion:
	//	(predicate=JdlWildcardPredicate | entities+=[JdlEntity] (',' entities+=[JdlEntity])*) 'with';
	public JdlEntityInclusionElements getJdlEntityInclusionAccess() {
		return pJdlEntityInclusion;
	}
	
	public ParserRule getJdlEntityInclusionRule() {
		return getJdlEntityInclusionAccess().getRule();
	}
	
	//JdlEntityExclusion:
	//	'except' entities+=[JdlEntity] (',' entities+=[JdlEntity])*;
	public JdlEntityExclusionElements getJdlEntityExclusionAccess() {
		return pJdlEntityExclusion;
	}
	
	public ParserRule getJdlEntityExclusionRule() {
		return getJdlEntityExclusionAccess().getRule();
	}
	
	//JdlWildcardPredicate:
	//	wildcard?='*' | all?='all';
	public JdlWildcardPredicateElements getJdlWildcardPredicateAccess() {
		return pJdlWildcardPredicate;
	}
	
	public ParserRule getJdlWildcardPredicateRule() {
		return getJdlWildcardPredicateAccess().getRule();
	}
	
	//enum JdlServiceType:
	//	serviceClass | serviceImpl;
	public JdlServiceTypeElements getJdlServiceTypeAccess() {
		return eJdlServiceType;
	}
	
	public EnumRule getJdlServiceTypeRule() {
		return getJdlServiceTypeAccess().getRule();
	}
	
	//enum JdlDtoType:
	//	mapstruct;
	public JdlDtoTypeElements getJdlDtoTypeAccess() {
		return eJdlDtoType;
	}
	
	public EnumRule getJdlDtoTypeRule() {
		return getJdlDtoTypeAccess().getRule();
	}
	
	//JdlPaginateType:
	//	pagination?=('pager' | 'pagination') | infiniteScroll?='infinite-scroll';
	public JdlPaginateTypeElements getJdlPaginateTypeAccess() {
		return pJdlPaginateType;
	}
	
	public ParserRule getJdlPaginateTypeRule() {
		return getJdlPaginateTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
