grammar io.github.jhipster.jdl.dsl.JDL with org.eclipse.xtext.common.Terminals

generate jdl 'http://www.github.io/jhipster/jdl/dsl/JDL'

JdlDomainModel:
	features+=JdlFeature*;

JdlFeature:
	JdlEntity | EnumType | Relationships | GenerationSetting;

/* =========================================================================
 * ENTITY
 * ========================================================================= */
JdlEntity:
	'entity' name=ID ('{'
		(fields+=JdlEntityField (',' fields+=JdlEntityField)*)?
	'}')?;

JdlEntityField:
	name=ID type=JdlFieldType;

JdlFieldType:
	JdlEnumField | JdlStringField | JdlNumericField | JdlBooleanField | JdlDateField | JdlBlobField;

JdlEnumField returns JdlEntityField:
	enumType=[EnumType] validators=RequiredValidator?;

JdlStringField returns JdlEntityField:
	stringField?='String' validators=StringValidators?;

JdlNumericField returns JdlEntityField:
	numericFieldType=NumericFieldType validators=NumericValidators?;

enum NumericFieldType:
	Integer | Long | BigDecimal | Float | Double;

JdlBooleanField returns JdlEntityField:
	booleanField?='Boolean' validators=RequiredValidator?;
	
JdlDateField returns JdlEntityField:
	(localDateField?='LocalDate' | zonedDateTimeField?='ZonedDateTime') validators=RequiredValidator?;

JdlBlobField returns JdlFieldType:
	blobFieldType=BlobFieldType validators=BlobValidators?;

enum BlobFieldType:
	Blob | AnyBlob | ImageBlob;

/* =========================================================================
 * VALIDATORS
 * ========================================================================= */

RequiredValidator:
	required?='required';

MinLengthValidator:
	'minlength' '(' value=INT ')';

MaxLengthValidator:
	'maxlength' '(' value=INT ')';

PatternValidator:
	'pattern' '(' value=STRING ')';

MinValidator:
	'min' '(' value=INT ')';

MaxValidator:
	'max' '(' value=INT ')';

MinBytesValidator:
	'minbytes' '(' value=INT ')';

MaxBytesValidator:
	'maxbytes' '(' value=INT ')';

StringValidators:
	(required=RequiredValidator) (minLength=MinLengthValidator)? 
	(maxlength=MaxLengthValidator)? (pattern=PatternValidator)?;

NumericValidators:
	(required=RequiredValidator) (minlength=MinValidator)? (maxlength=MaxValidator)?;

BlobValidators:
	(required=RequiredValidator) (minbytes=MinBytesValidator)? (maxbytes=MaxBytesValidator)?;

/* =========================================================================
 * RELATIONSHIP
 * ========================================================================= */
Relationships:
	'relationship' cardinality=Cardinality '{'
		relationships+=Relationship* (',' relationships+=Relationship)*
	'}';

Relationship:
	fromEntity=[JdlEntity] fromName=RelationshipName? 'to' toEntity=[JdlEntity] toName=RelationshipName?;

RelationshipName:
	'{' name=ID ('(' role=ID ')')? '}';

enum Cardinality:
	OneToMany | ManyToOne | OneToOne | ManyToMany;

/* =========================================================================
 * ENUM
 * ========================================================================= */
EnumType:
	'enum' name=ID '{'
		values+=ID (',' values+=ID)*
	'}';

/* =========================================================================
 * GENERATION SETTING
 * ========================================================================= */
GenerationSetting:
	setting=GenerationSettingType (excludes=EntityExclusion)?;

GenerationSettingType:
	ServiceGenerationSetting | MicroserviceGenerationSetting | SearchGenerationSetting | 
	DTOGenerationSetting | PaginateGenerationSetting | AngularSuffixGenerationSetting;

ServiceGenerationSetting returns GenerationSetting:
	serviceGenerationSetting?='service' includes=EntityInclusion serviceType=ServiceType;

MicroserviceGenerationSetting returns GenerationSetting:
	microserviceGenerationSetting?='microservice' includes=EntityInclusion appname=ID;

SearchGenerationSetting returns GenerationSetting:
	searchGenerationSetting?='search' includes=EntityInclusion service=ID;

DTOGenerationSetting returns GenerationSetting:
	dtoGenerationSetting?='dto' includes=EntityInclusion dtoType=DTOType;

PaginateGenerationSetting returns GenerationSetting:
	paginateGenerationSetting?='paginate' includes=EntityInclusion paginateType=PaginateType;

AngularSuffixGenerationSetting returns GenerationSetting:
	angularSuffixGenerationSetting?='angularSuffix' includes=EntityInclusion id=ID;

EntityInclusion:
	(predicate=WildcardPredicate | entities+=[JdlEntity] (',' entities+=[JdlEntity])*)  'with';

EntityExclusion:
	'except' entities+=[JdlEntity] (',' entities+=[JdlEntity])*;

WildcardPredicate:
	wildcard?='*' | all?='all';

enum ServiceType:
	serviceClass | serviceImpl;

enum DTOType:
	mapstruct;

PaginateType:
	pagination?='pagination' | infiniteScroll?='infinite-scroll';

/* =========================================================================
 * END OF GRAMMAR
 * ========================================================================= */