grammar io.github.jhipster.jdl.dsl.JDL with org.eclipse.xtext.common.Terminals

generate jdl 'http://www.github.io/jhipster/jdl/dsl/JDL'

DomainModel:
	elements+=Elements*;

Elements:
	Entity | EnumType | Relationships | GenerationSetting;

/* =========================================================================
 * ENTITY
 * ========================================================================= */
Entity:
	'entity' name=ID '{'
		fields+=Field (',' fields+=Field)*
	'}';

Field:
	StringField | NumericField | BooleanField | DateField | BinaryLargeObjectField | EnumField;

EnumField:
	name=ID enumType=[EnumType] validators=RequiredValidator?;

StringField:
	name=ID 'String' validators=StringValidators?;

NumericField:
	IntegerField | LongField | BigDecimalField | FloatField | DoubleField;

IntegerField:
	name=ID 'Integer' validators=NumericValidators?;

LongField:
	name=ID 'Long' validators=NumericValidators?;

BigDecimalField:
	name=ID 'BigDecimal' validators=NumericValidators?;

FloatField:
	name=ID 'Float' validators=NumericValidators?;

DoubleField:
	name=ID 'Double' validators=NumericValidators?;

BooleanField:
	name=ID 'Boolean' validators=RequiredValidator?;
	
DateField:
	LocalDateField | ZonedDateTimeField;

LocalDateField:
	name=ID 'LocalDate' validators=RequiredValidator?;

ZonedDateTimeField:
	name=ID 'ZonedDateTime' validators=RequiredValidator?;

BinaryLargeObjectField:
	BlobField | AnyBlobField | ImageBlobField;

BlobField:
	name=ID 'Blob' validators=BlobValidators?;

AnyBlobField:
	name=ID 'AnyBlob' validators=BlobValidators?;

ImageBlobField:
	name=ID 'ImageBlob' validators=BlobValidators?;

/* =========================================================================
 * VALIDATORS
 * ========================================================================= */

RequiredValidator:
	required?='required';

MinLengthValidator:
	'minlength' '(' value=INT ')';

MaxLengthValidator:
	'maxlength' '(' value=INT ')';

PatternValidator:
	'pattern' '(' value=STRING ')';

MinValidator:
	'min' '(' value=INT ')';

MaxValidator:
	'max' '(' value=INT ')';

MinBytesValidator:
	'minbytes' '(' value=INT ')';

MaxBytesValidator:
	'maxbytes' '(' value=INT ')';

StringValidators:
	(required=RequiredValidator) (minLength=MinLengthValidator)? 
	(maxlength=MaxLengthValidator)? (pattern=PatternValidator)?;

NumericValidators:
	(required=RequiredValidator) (minlength=MinValidator)? (maxlength=MaxValidator)?;

BlobValidators:
	(required=RequiredValidator) (minbytes=MinBytesValidator)? (maxbytes=MaxBytesValidator)?;

/* =========================================================================
 * RELATIONSHIP
 * ========================================================================= */
Relationships:
	'relationship' cardinality=Cardinality '{'
		relationships+=Relationship*
	'}';

Relationship:
	fromEntity=[Entity] fromName=RelationshipName? 'to' toEntity=[Entity] toName=RelationshipName?;

RelationshipName:
	'{' name=ID ('(' role=ID ')')? '}';

enum Cardinality:
	OneToMany | ManyToOne | OneToOne | ManyToMany;

/* =========================================================================
 * ENUM
 * ========================================================================= */
EnumType:
	'enum' name=ID '{'
		values+=ID (',' values+=ID)*
	'}';

/* =========================================================================
 * GENERATION SETTING
 * ========================================================================= */
GenerationSetting:
	ServiceGenerationSetting | DTOGenerationSetting | PaginateGenerationSetting | AngularSuffixGenerationSetting;

ServiceGenerationSetting:
	'service' entities+=[Entity] (',' entities+=[Entity])* 'with' serviceType=ServiceType;

enum ServiceType:
	serviceClass | serviceImpl;

DTOGenerationSetting:
	'dto' entities+=[Entity] (',' entities+=[Entity])* 'with' dtoType=DTOType;

enum DTOType:
	mapstruct;

PaginateGenerationSetting:
	'paginate' entities+=[Entity] (',' entities+=[Entity])* 'with' paginateType=PaginateType;

PaginateType:
	pagination?='pagination' | infiniteScroll?='infinite-scroll';

AngularSuffixGenerationSetting:
	'angularSuffix' entities+=[Entity] (',' entities+=[Entity])* 'with' id=ID;
