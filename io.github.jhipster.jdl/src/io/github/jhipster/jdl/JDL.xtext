grammar io.github.jhipster.jdl.JDL with org.eclipse.xtext.common.Terminals

generate jdl "http://www.github.io/jhipster/jdl/JDL"

/* =========================================================================
 * ROOT
 * ========================================================================= */
JdlDomainModel:
	features+=JdlFeature*;

JdlFeature:
	JdlEntity | JdlEnumType | JdlRelationships | JdlGenerationSetting;

/* =========================================================================
 * ENTITY
 * ========================================================================= */
JdlEntity:
	'entity' name=ID ('{'
	(fields+=JdlEntityField (',' fields+=JdlEntityField)*)?
	'}')?;

JdlEntityField:
	name=ID type=JdlFieldType;

JdlFieldType:
	JdlEnumField | JdlStringField | JdlNumericField | JdlBooleanField | JdlDateField | JdlBlobField;

JdlEnumField returns JdlEntityField:
	enumType=[JdlEnumType] validators=JdlRequiredValidator?;

JdlStringField returns JdlEntityField:
	stringType?='String' validators=JdlStringValidators?;

JdlNumericField returns JdlEntityField:
	numericFieldType=JdlNumericFieldType validators=JdlNumericValidators?;

enum JdlNumericFieldType:
	Integer | Long | BigDecimal | Float | Double;

JdlBooleanField returns JdlEntityField:
	booleanType?='Boolean' validators=JdlRequiredValidator?;

JdlDateField returns JdlEntityField:
	(localDateType?='LocalDate' | zonedDateTimeType?='ZonedDateTime') validators=JdlRequiredValidator?;

JdlBlobField returns JdlFieldType:
	blobFieldType=JdlBlobFieldType validators=JdlBlobValidators?;

enum JdlBlobFieldType:
	Blob | AnyBlob | ImageBlob;

JdlStringValidators:
	(required?=JdlRequiredValidator) (minLength=JdlMinLengthValidator)?
	(maxlength=JdlMaxLengthValidator)? (pattern=JdlPatternValidator)?;

JdlNumericValidators:
	(required=JdlRequiredValidator) (minlength=JdlMinValidator)? (maxlength=JdlMaxValidator)?;

JdlBlobValidators:
	(required=JdlRequiredValidator) (minbytes=JdlMinBytesValidator)? (maxbytes=JdlMaxBytesValidator)?;

JdlRequiredValidator:
	required?='required';

JdlMinLengthValidator:
	'minlength' '(' value=INT ')';

JdlMaxLengthValidator:
	'maxlength' '(' value=INT ')';

JdlPatternValidator:
	'pattern' '(' value=STRING ')';

JdlMinValidator:
	'min' '(' value=INT ')';

JdlMaxValidator:
	'max' '(' value=INT ')';

JdlMinBytesValidator:
	'minbytes' '(' value=INT ')';

JdlMaxBytesValidator:
	'maxbytes' '(' value=INT ')';

/* =========================================================================
 * RELATIONSHIP
 * ========================================================================= */
JdlRelationships:
	'relationship' cardinality=JdlCardinality '{'
	relationships+=JdlRelationship* (',' relationships+=JdlRelationship)*
	'}';

JdlRelationship:
	fromEntity=[JdlEntity] fromName=JdlRelationshipName? 'to' toEntity=[JdlEntity] toName=JdlRelationshipName?;

JdlRelationshipName:
	'{' name=ID ('(' role=ID ')')? '}';

enum JdlCardinality:
	OneToMany | ManyToOne | OneToOne | ManyToMany;

/* =========================================================================
 * ENUM
 * ========================================================================= */
JdlEnumType:
	'enum' name=ID '{'
	values+=ID (',' values+=ID)*
	'}';

/* =========================================================================
 * GENERATION SETTTINGS
 * ========================================================================= */
JdlGenerationSetting:
	setting=JdlGenerationSettingType (excludes=JdlEntityExclusion)?;

JdlGenerationSettingType:
	JdlDtoGenerationSetting |
	JdlPaginateGenerationSetting |
	JdlServiceGenerationSetting |
	JdlMicroserviceGenerationSetting |
	JdlSearchGenerationSetting |
	JdlSkipClientGenerationSetting |
	JdlSkipServerGenerationSetting |
	JdlAngularSuffixGenerationSetting |
	JdlNoFluentMethodGenerationSetting;

JdlWithEntityInclusion:
	(predicate=JdlWildcardPredicate | entities+=[JdlEntity] (',' entities+=[JdlEntity])*) 'with';

JdlForEntityInclusion:
	'for' (predicate=JdlWildcardPredicate | entities+=[JdlEntity] (',' entities+=[JdlEntity])*);

JdlWildcardPredicate:
	wildcard?='*' | all?='all';

JdlEntityExclusion:
	'except' entities+=[JdlEntity] (',' entities+=[JdlEntity])*;

/* =========================================================================
 * DTO GENERATION SETTTINGS
 * ========================================================================= */
JdlDtoGenerationSetting returns JdlGenerationSetting:
	dtoGenerationSetting?='dto' includes=JdlWithEntityInclusion dtoType=JdlDtoType;

enum JdlDtoType:
	mapstruct;

/* =========================================================================
 * PAGINATION GENERATION SETTTINGS
 * ========================================================================= */
JdlPaginateGenerationSetting returns JdlGenerationSetting:
	paginateGenerationSetting?='paginate' includes=JdlWithEntityInclusion paginateType=JdlPaginateType;

JdlPaginateType:
	pagination?=('pager' | 'pagination') | infiniteScroll?='infinite-scroll';

/* =========================================================================
 * SERVICE GENERATION SETTTINGS
 * ========================================================================= */
JdlServiceGenerationSetting returns JdlGenerationSetting:
	serviceGenerationSetting?='service' includes=JdlWithEntityInclusion serviceType=JdlServiceType;

enum JdlServiceType:
	serviceClass | serviceImpl;

/* =========================================================================
 * MICRO SERVICE GENERATION SETTTINGS
 * ========================================================================= */
JdlMicroserviceGenerationSetting returns JdlGenerationSetting:
	microserviceGenerationSetting?='microservice' includes=JdlWithEntityInclusion appname=ID;

/* =========================================================================
 * SEARCH GENERATION SETTTINGS
 * ========================================================================= */
JdlSearchGenerationSetting returns JdlGenerationSetting:
	searchGenerationSetting?='search' includes=JdlWithEntityInclusion searchType=JdlSearchType;

enum JdlSearchType:
	elasticsearch;

/* =========================================================================
 * SKIP CLIENT GENERATION SETTTINGS
 * ========================================================================= */
JdlSkipClientGenerationSetting returns JdlGenerationSetting:
	skipClienGenerationSetting?='skipClient' includes=JdlForEntityInclusion;

/* =========================================================================
 * SKIP SERVER GENERATION SETTTINGS
 * ========================================================================= */
JdlSkipServerGenerationSetting returns JdlGenerationSetting:
	skipServerGenerationSetting?='skipServer' includes=JdlForEntityInclusion;

/* =========================================================================
 * ANGULAR SUFFIX GENERATION SETTTINGS
 * ========================================================================= */
JdlAngularSuffixGenerationSetting returns JdlGenerationSetting:
	angularSuffixGenerationSetting?='angularSuffix' includes=JdlWithEntityInclusion id=ID;

/* =========================================================================
 * NO FLUENT METHOD GENERATION SETTTINGS
 * ========================================================================= */
JdlNoFluentMethodGenerationSetting returns JdlGenerationSetting:
	noFluentMethodGenerationSetting?='noFluentMethod' includes=JdlForEntityInclusion;

