/**
 * generated by Xtext 2.10.0
 */
package io.github.jhipster.jdl.dsl.formatting2;

import com.google.inject.Inject;
import io.github.jhipster.jdl.dsl.jdl.DomainModel;
import io.github.jhipster.jdl.dsl.jdl.Elements;
import io.github.jhipster.jdl.dsl.jdl.Entity;
import io.github.jhipster.jdl.dsl.jdl.Field;
import io.github.jhipster.jdl.dsl.services.JDLGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class JDLFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private JDLGrammarAccess _jDLGrammarAccess;
  
  protected void _format(final DomainModel domainModel, @Extension final IFormattableDocument document) {
    EList<Elements> _elements = domainModel.getElements();
    for (final Elements elements : _elements) {
      document.<Elements>format(elements);
    }
  }
  
  protected void _format(final Entity entity, @Extension final IFormattableDocument document) {
    EList<Field> _fields = entity.getFields();
    for (final Field fields : _fields) {
      document.<Field>format(fields);
    }
  }
  
  public void format(final Object entity, final IFormattableDocument document) {
    if (entity instanceof XtextResource) {
      _format((XtextResource)entity, document);
      return;
    } else if (entity instanceof Entity) {
      _format((Entity)entity, document);
      return;
    } else if (entity instanceof DomainModel) {
      _format((DomainModel)entity, document);
      return;
    } else if (entity instanceof EObject) {
      _format((EObject)entity, document);
      return;
    } else if (entity == null) {
      _format((Void)null, document);
      return;
    } else if (entity != null) {
      _format(entity, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(entity, document).toString());
    }
  }
}
